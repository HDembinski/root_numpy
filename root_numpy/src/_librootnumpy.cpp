/* Generated by Cython 0.21.2 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_2"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___librootnumpy
#define __PYX_HAVE_API___librootnumpy
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "pythread.h"
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>
#include <map>
#include <string>
#include "TObject.h"
#include "TFile.h"
#include "TKey.h"
#include "TObjArray.h"
#include "TList.h"
#include "TBranch.h"
#include "TLeaf.h"
#include "TTree.h"
#include "TChain.h"
#include "TFormula.h"
#include "TTreeFormula.h"
#include "TClassEdit.h"
#include "TF1.h"
#include "TF2.h"
#include "TF3.h"
#include "TH1.h"
#include "TH2.h"
#include "TH3.h"
#include "TProfile.h"
#include "TProfile2D.h"
#include "TProfile3D.h"
#include "TGraph.h"
#include "TGraph2D.h"
#include "TSpline.h"
#include "TArrayD.h"
#include "TArrayF.h"
#include "TArrayL.h"
#include "TArrayI.h"
#include "TArrayS.h"
#include "TArrayC.h"
#include "TMatrixTBase.h"
#include "Column.h"
#include "BetterChain.h"
#include "util.h"
#include "2to3.h"
#include "Vector2Array.h"
#include <memory>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "ascii"
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "setup.pxi",
  "tree.pyx",
  "array.pyx",
  "matrix.pyx",
  "sample.pyx",
  "hist.pyx",
  "graph.pyx",
  "evaluate.pyx",
  "innerjoin.pyx",
  "array.pxd",
  "__init__.pxd",
  "stringsource",
  "stringsource",
  "_librootnumpy.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */

#line 723 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */

#line 724 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */

#line 725 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */

#line 726 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */

#line 730 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */

#line 731 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */

#line 732 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */

#line 733 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */

#line 737 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */

#line 738 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */

#line 747 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */

#line 748 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */

#line 749 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */

#line 751 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */

#line 752 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */

#line 753 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */

#line 755 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */

#line 756 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */

#line 758 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */

#line 759 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */

#line 760 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "root_numpy/src/setup.pxi":41
 * from ._warnings import RootNumpyUnconvertibleWarning
 * 
 * ctypedef unsigned char unsigned_char             # <<<<<<<<<<<<<<
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int
 */

#line 41 "root_numpy/src/setup.pxi"
typedef unsigned char __pyx_t_13_librootnumpy_unsigned_char;

/* "root_numpy/src/setup.pxi":42
 * 
 * ctypedef unsigned char unsigned_char
 * ctypedef unsigned short unsigned_short             # <<<<<<<<<<<<<<
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long
 */

#line 42 "root_numpy/src/setup.pxi"
typedef unsigned short __pyx_t_13_librootnumpy_unsigned_short;

/* "root_numpy/src/setup.pxi":43
 * ctypedef unsigned char unsigned_char
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int             # <<<<<<<<<<<<<<
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long
 */

#line 43 "root_numpy/src/setup.pxi"
typedef unsigned int __pyx_t_13_librootnumpy_unsigned_int;

/* "root_numpy/src/setup.pxi":44
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long             # <<<<<<<<<<<<<<
 * ctypedef long long long_long
 * ctypedef unsigned long long unsigned_long_long
 */

#line 44 "root_numpy/src/setup.pxi"
typedef unsigned long __pyx_t_13_librootnumpy_unsigned_long;

/* "root_numpy/src/setup.pxi":45
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long unsigned_long_long
 * 
 */

#line 45 "root_numpy/src/setup.pxi"
typedef PY_LONG_LONG __pyx_t_13_librootnumpy_long_long;

/* "root_numpy/src/setup.pxi":46
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long
 * ctypedef unsigned long long unsigned_long_long             # <<<<<<<<<<<<<<
 * 
 * include "ROOT.pxi"
 */

#line 46 "root_numpy/src/setup.pxi"
typedef unsigned PY_LONG_LONG __pyx_t_13_librootnumpy_unsigned_long_long;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */

#line 762 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */

#line 763 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */

#line 764 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cdouble __pyx_t_5numpy_complex_t;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_parse_tree_structure;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_Converter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_BasicConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_ObjectConverterBase;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VaryArrayConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_FixedArrayConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
template <typename T>

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
template <typename T>

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorVectorConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorBoolConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorVectorBoolConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_StringConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorStringConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_VectorVectorStringConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_handle_load;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_NP2CConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_t_13_librootnumpy_ScalarNP2CConverter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_find_np2c_converter;

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
struct __pyx_opt_args_13_librootnumpy_array2tree;

/* "root_numpy/src/tree.pyx":106
 * 
 * 
 * cdef parse_tree_structure(TTree* tree, branches=None):             # <<<<<<<<<<<<<<
 *     cdef int ibranch
 *     cdef TBranch* branch
 */

#line 106 "root_numpy/src/tree.pyx"
struct __pyx_opt_args_13_librootnumpy_parse_tree_structure {

#line 106 "root_numpy/src/tree.pyx"
  int __pyx_n;

#line 106 "root_numpy/src/tree.pyx"
  PyObject *branches;

#line 106 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_Converter
#line 106 "root_numpy/src/tree.pyx"
 {

  /* "root_numpy/src/tree.pyx":187
 * 
 * 
 * cdef cppclass Converter:             # <<<<<<<<<<<<<<
 *     __init__():
 *         pass
 */

#line 187 "root_numpy/src/tree.pyx"
   __pyx_t_13_librootnumpy_Converter(void);
  virtual 
#line 187 "root_numpy/src/tree.pyx"
 ~__pyx_t_13_librootnumpy_Converter(void);
  virtual 
#line 187 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual 
#line 187 "root_numpy/src/tree.pyx"
PyObject *get_nptype(void);

#line 187 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_BasicConverter : public __pyx_t_13_librootnumpy_Converter
#line 187 "root_numpy/src/tree.pyx"
 {

  /* "root_numpy/src/tree.pyx":201
 * 
 * 
 * cdef cppclass BasicConverter(Converter):             # <<<<<<<<<<<<<<
 *     # cdef string rtype
 *     int size
 */

#line 201 "root_numpy/src/tree.pyx"
  int size;

#line 201 "root_numpy/src/tree.pyx"
  int nptypecode;

#line 201 "root_numpy/src/tree.pyx"
  std::string nptype;

#line 201 "root_numpy/src/tree.pyx"
   __pyx_t_13_librootnumpy_BasicConverter(int, std::string, int);
  virtual 
#line 201 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual 
#line 201 "root_numpy/src/tree.pyx"
PyObject *get_nptype(void);
  virtual 
#line 201 "root_numpy/src/tree.pyx"
int get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_BasicConverter() { }
#line 201 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_ObjectConverterBase : public __pyx_t_13_librootnumpy_Converter
#line 201 "root_numpy/src/tree.pyx"
 {
  virtual 
#line 201 "root_numpy/src/tree.pyx"
PyObject *get_nptype(void);
  virtual 
#line 201 "root_numpy/src/tree.pyx"
PyObject *get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_ObjectConverterBase() { }
#line 201 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_VaryArrayConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 201 "root_numpy/src/tree.pyx"
 {

  /* "root_numpy/src/tree.pyx":232
 * 
 * 
 * cdef cppclass VaryArrayConverter(ObjectConverterBase):             # <<<<<<<<<<<<<<
 *     BasicConverter* conv # converter for single element
 *     int typecode
 */

#line 232 "root_numpy/src/tree.pyx"
  __pyx_t_13_librootnumpy_BasicConverter *conv;

#line 232 "root_numpy/src/tree.pyx"
  int typecode;

#line 232 "root_numpy/src/tree.pyx"
  int elesize;

#line 232 "root_numpy/src/tree.pyx"
   __pyx_t_13_librootnumpy_VaryArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *);
  virtual 
#line 232 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VaryArrayConverter() { }
#line 232 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_FixedArrayConverter : public __pyx_t_13_librootnumpy_Converter
#line 232 "root_numpy/src/tree.pyx"
 {

  /* "root_numpy/src/tree.pyx":248
 * 
 * 
 * cdef cppclass FixedArrayConverter(Converter):             # <<<<<<<<<<<<<<
 *     BasicConverter* conv # converter for single element
 *     int L # numele
 */

#line 248 "root_numpy/src/tree.pyx"
  __pyx_t_13_librootnumpy_BasicConverter *conv;

#line 248 "root_numpy/src/tree.pyx"
  int L;

#line 248 "root_numpy/src/tree.pyx"
   __pyx_t_13_librootnumpy_FixedArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *, int);
  virtual 
#line 248 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual 
#line 248 "root_numpy/src/tree.pyx"
PyObject *get_nptype(void);
  virtual 
#line 248 "root_numpy/src/tree.pyx"
int get_nptypecode(void);
  virtual ~__pyx_t_13_librootnumpy_FixedArrayConverter() { }
#line 248 "root_numpy/src/tree.pyx"
};

/* "root_numpy/src/tree.pyx":269
 * 
 * 
 * cdef cppclass VectorConverter[T](ObjectConverterBase):             # <<<<<<<<<<<<<<
 *     int elesize
 *     int nptypecode
 */

#line 269 "root_numpy/src/tree.pyx"
template <class T>
struct __pyx_t_13_librootnumpy_VectorConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 269 "root_numpy/src/tree.pyx"
 {

#line 269 "root_numpy/src/tree.pyx"
  int elesize;

#line 269 "root_numpy/src/tree.pyx"
  int nptypecode;

#line 269 "root_numpy/src/tree.pyx"
  Vector2Array<T>  v2a;

#line 269 "root_numpy/src/tree.pyx"
   __pyx_t_13_librootnumpy_VectorConverter(void);
  virtual 
#line 269 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorConverter() { }
#line 269 "root_numpy/src/tree.pyx"
};

/* "root_numpy/src/tree.pyx":289
 * 
 * 
 * cdef cppclass VectorVectorConverter[T](ObjectConverterBase):             # <<<<<<<<<<<<<<
 *     int elesize
 *     int nptypecode
 */

#line 289 "root_numpy/src/tree.pyx"
template <class T>
struct __pyx_t_13_librootnumpy_VectorVectorConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 289 "root_numpy/src/tree.pyx"
 {

#line 289 "root_numpy/src/tree.pyx"
  int elesize;

#line 289 "root_numpy/src/tree.pyx"
  int nptypecode;

#line 289 "root_numpy/src/tree.pyx"
  Vector2Array<T>  v2a;

#line 289 "root_numpy/src/tree.pyx"
   __pyx_t_13_librootnumpy_VectorVectorConverter(void);
  virtual 
#line 289 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorVectorConverter() { }
#line 289 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_VectorBoolConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 289 "root_numpy/src/tree.pyx"
 {
  virtual 
#line 289 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorBoolConverter() { }
#line 289 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_VectorVectorBoolConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 289 "root_numpy/src/tree.pyx"
 {
  virtual 
#line 289 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorVectorBoolConverter() { }
#line 289 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_StringConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 289 "root_numpy/src/tree.pyx"
 {
  virtual 
#line 289 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_StringConverter() { }
#line 289 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_VectorStringConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 289 "root_numpy/src/tree.pyx"
 {
  virtual 
#line 289 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorStringConverter() { }
#line 289 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_VectorVectorStringConverter : public __pyx_t_13_librootnumpy_ObjectConverterBase
#line 289 "root_numpy/src/tree.pyx"
 {
  virtual 
#line 289 "root_numpy/src/tree.pyx"
int write(Column *, void *);
  virtual ~__pyx_t_13_librootnumpy_VectorVectorStringConverter() { }
#line 289 "root_numpy/src/tree.pyx"
};

/* "root_numpy/src/tree.pyx":419
 * 
 * cdef cpp_map[string, Converter*] CONVERTERS
 * ctypedef pair[string, Converter*] CONVERTERS_ITEM             # <<<<<<<<<<<<<<
 * 
 * # basic type converters
 */

#line 419 "root_numpy/src/tree.pyx"
typedef std::pair<std::string,__pyx_t_13_librootnumpy_Converter *>  __pyx_t_13_librootnumpy_CONVERTERS_ITEM;

/* "root_numpy/src/tree.pyx":552
 * 
 * 
 * cdef handle_load(int load, bool ignore_index=False):             # <<<<<<<<<<<<<<
 *     if load >= 0:
 *         return
 */

#line 552 "root_numpy/src/tree.pyx"
struct __pyx_opt_args_13_librootnumpy_handle_load {

#line 552 "root_numpy/src/tree.pyx"
  int __pyx_n;

#line 552 "root_numpy/src/tree.pyx"
  bool ignore_index;

#line 552 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_NP2CConverter
#line 552 "root_numpy/src/tree.pyx"
 {
  virtual 
#line 552 "root_numpy/src/tree.pyx"
void fill_from(void *);
  virtual 
#line 552 "root_numpy/src/tree.pyx"
 ~__pyx_t_13_librootnumpy_NP2CConverter(void);

  /* "root_numpy/src/tree.pyx":743
 * ####################################
 * 
 * cdef cppclass NP2CConverter:             # <<<<<<<<<<<<<<
 *     void fill_from(void* source):
 *         pass
 */

#line 743 "root_numpy/src/tree.pyx"
};
struct __pyx_t_13_librootnumpy_ScalarNP2CConverter : public __pyx_t_13_librootnumpy_NP2CConverter
#line 743 "root_numpy/src/tree.pyx"
 {

  /* "root_numpy/src/tree.pyx":750
 * 
 * 
 * cdef cppclass ScalarNP2CConverter(NP2CConverter):             # <<<<<<<<<<<<<<
 *     int nbytes
 *     string roottype
 */

#line 750 "root_numpy/src/tree.pyx"
  int nbytes;

#line 750 "root_numpy/src/tree.pyx"
  std::string roottype;

#line 750 "root_numpy/src/tree.pyx"
  std::string name;

#line 750 "root_numpy/src/tree.pyx"
  void *value;

#line 750 "root_numpy/src/tree.pyx"
  TBranch *branch;

#line 750 "root_numpy/src/tree.pyx"
   __pyx_t_13_librootnumpy_ScalarNP2CConverter(TTree *, std::string, std::string, int);
  virtual 
#line 750 "root_numpy/src/tree.pyx"
PyObject *__del__(PyObject *);
  virtual 
#line 750 "root_numpy/src/tree.pyx"
void fill_from(void *);
  virtual ~__pyx_t_13_librootnumpy_ScalarNP2CConverter() { }
#line 750 "root_numpy/src/tree.pyx"
};

/* "root_numpy/src/tree.pyx":787
 * 
 * 
 * cdef NP2CConverter* find_np2c_converter(TTree* tree, name, dtype, peekvalue=None):             # <<<<<<<<<<<<<<
 *     # TODO:
 *     # np.float16: #this needs special treatment root doesn't have 16 bit float?
 */

#line 787 "root_numpy/src/tree.pyx"
struct __pyx_opt_args_13_librootnumpy_find_np2c_converter {

#line 787 "root_numpy/src/tree.pyx"
  int __pyx_n;

#line 787 "root_numpy/src/tree.pyx"
  PyObject *peekvalue;

#line 787 "root_numpy/src/tree.pyx"
};

/* "root_numpy/src/tree.pyx":810
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     # hmm how do I catch all python exception
 *     # and clean up before throwing ?
 */

#line 810 "root_numpy/src/tree.pyx"
struct __pyx_opt_args_13_librootnumpy_array2tree {

#line 810 "root_numpy/src/tree.pyx"
  int __pyx_n;

#line 810 "root_numpy/src/tree.pyx"
  PyObject *name;

#line 810 "root_numpy/src/tree.pyx"
  TTree *tree;

#line 810 "root_numpy/src/tree.pyx"
};
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback);

#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) : \
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static void __Pyx_RaiseBufferIndexError(int axis);

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static void __Pyx_RaiseBufferFallbackError(void);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_MAJOR_VERSION >= 3
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
#if PY_MAJOR_VERSION >= 3
        int ob_exports;
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    op->ob_size = size;
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->ob_size) {
        self->ob_size = n;
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= self->allocated) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = newsize;
    return 0;
}
#endif

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value);

static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'array' */

/* Module declarations from 'cpython.array' */
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp' */

/* Module declarations from '_librootnumpy' */
static std::map<std::string,__pyx_t_13_librootnumpy_Converter *>  __pyx_v_13_librootnumpy_CONVERTERS;
static CYTHON_INLINE PyObject *__pyx_f_13_librootnumpy_resolve_type(char const *); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_parse_branch_structure(TBranch *); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_parse_tree_structure(TTree *, struct __pyx_opt_args_13_librootnumpy_parse_tree_structure *__pyx_optional_args); /*proto*/
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray(void *, void *, int, unsigned long, int); /*proto*/
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorbool(void *, std::vector<bool>  *); /*proto*/
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorstring(void *, std::vector<std::string>  *); /*proto*/
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter(Column *); /*proto*/
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter_by_typename(std::string); /*proto*/
static PyArrayObject *__pyx_f_13_librootnumpy_init_array(std::vector<Column *>  &, std::vector<__pyx_t_13_librootnumpy_Converter *>  &, unsigned long, PyObject *, PyObject *); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_handle_load(int, struct __pyx_opt_args_13_librootnumpy_handle_load *__pyx_optional_args); /*proto*/
static PyObject *__pyx_f_13_librootnumpy_tree2array(TTree *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
static __pyx_t_13_librootnumpy_NP2CConverter *__pyx_f_13_librootnumpy_find_np2c_converter(TTree *, PyObject *, PyObject *, struct __pyx_opt_args_13_librootnumpy_find_np2c_converter *__pyx_optional_args); /*proto*/
static TTree *__pyx_f_13_librootnumpy_array2tree(PyArrayObject *, struct __pyx_opt_args_13_librootnumpy_array2tree *__pyx_optional_args); /*proto*/
static CYTHON_INLINE PyArrayObject *__pyx_f_13_librootnumpy_tonumpyarray(void *, int, int); /*proto*/
static PyObject *__pyx_f_13_librootnumpy__blockwise_inner_join(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static PyObject *__pyx_f_13_librootnumpy__vector_fk_inner_join(PyArrayObject *, PyObject *, PyArrayObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static PyObject *__pyx_f_13_librootnumpy__scalar_fk_inner_join(PyArrayObject *, PyObject *, PyArrayObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyArrayObject *, PyArrayObject *, PyArrayObject *); /*proto*/
static std::string __pyx_convert_string_from_py_std__string(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__string(std::string const &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int_t = { "int_t", NULL, sizeof(__pyx_t_5numpy_int_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t = { "int8_t", NULL, sizeof(__pyx_t_5numpy_int8_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int8_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int8_t), 0 };
#define __Pyx_MODULE_NAME "_librootnumpy"
int __pyx_module_is_main__librootnumpy = 0;

/* Implementation of '_librootnumpy' */
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_xrange;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_pf_13_librootnumpy_list_trees(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_2list_structures(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_4list_branches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_6root2array_fromFname(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnames, PyObject *__pyx_v_treename, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_8root2array_fromCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_10array2tree_toCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_name, PyObject *__pyx_v_tree); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_12array2root(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_filename, PyObject *__pyx_v_treename, PyObject *__pyx_v_mode); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_14cleanup(CYTHON_UNUSED PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_16array_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_18array_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_20array_l(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_22array_i(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_24array_s(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_26array_c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_28matrix_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_30matrix_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_32sample_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f1, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_34sample_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h1, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_36sample_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f2, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_38sample_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h2, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_40sample_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f3, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_42sample_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h3, unsigned int __pyx_v_n_samples); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_44fill_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_46fill_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_48fill_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_50fill_p1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_52fill_p2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_54fill_p3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_56fill_g1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_58fill_g2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_60evaluate_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_62evaluate_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_64evaluate_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_66evaluate_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_68evaluate_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_70evaluate_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_72evaluate_formula_1d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_74evaluate_formula_2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_76evaluate_formula_3d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_78evaluate_formula_4d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_80evaluate_graph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_82evaluate_spline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_spline, PyArrayObject *__pyx_v_array); /* proto */
static PyObject *__pyx_pf_13_librootnumpy_84_blockwise_inner_join(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_left, PyObject *__pyx_v_fk, PyObject *__pyx_v_right, PyObject *__pyx_v_force_repeat, PyObject *__pyx_v_fk_name); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static char __pyx_k_[] = ", ";
static char __pyx_k_B[] = "B";
static char __pyx_k_D[] = "D";
static char __pyx_k_F[] = "F";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_S[] = "S";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_j[] = "j";
static char __pyx_k_l[] = "l";
static char __pyx_k_n[] = "n";
static char __pyx_k_q[] = "q";
static char __pyx_k_s[] = "s";
static char __pyx_k_t[] = "t";
static char __pyx_k_x[] = "x";
static char __pyx_k_y[] = "y";
static char __pyx_k_z[] = "z";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k_f1[] = "f1";
static char __pyx_k_f2[] = "f2";
static char __pyx_k_f3[] = "f3";
static char __pyx_k_fk[] = "fk";
static char __pyx_k_fn[] = "fn";
static char __pyx_k_h1[] = "h1";
static char __pyx_k_h2[] = "h2";
static char __pyx_k_h3[] = "h3";
static char __pyx_k_it[] = "it";
static char __pyx_k_np[] = "np";
static char __pyx_k__19[] = "/";
static char __pyx_k_arr[] = "arr";
static char __pyx_k_get[] = "get";
static char __pyx_k_idx[] = "idx";
static char __pyx_k_int[] = "int";
static char __pyx_k_key[] = "key";
static char __pyx_k_mat[] = "_mat";
static char __pyx_k_ret[] = "ret";
static char __pyx_k_bool[] = "bool";
static char __pyx_k_char[] = "char";
static char __pyx_k_data[] = "data";
static char __pyx_k_f1_2[] = "f1_";
static char __pyx_k_f2_2[] = "f2_";
static char __pyx_k_f3_2[] = "f3_";
static char __pyx_k_file[] = "file";
static char __pyx_k_fk_d[] = "fk%d";
static char __pyx_k_func[] = "func";
static char __pyx_k_h1_2[] = "h1_";
static char __pyx_k_h2_2[] = "h2_";
static char __pyx_k_h3_2[] = "h3_";
static char __pyx_k_hist[] = "hist";
static char __pyx_k_int8[] = "int8";
static char __pyx_k_join[] = "join";
static char __pyx_k_keys[] = "keys";
static char __pyx_k_left[] = "left";
static char __pyx_k_long[] = "long";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_mode[] = "mode";
static char __pyx_k_name[] = "name";
static char __pyx_k_read[] = "read";
static char __pyx_k_size[] = "size";
static char __pyx_k_step[] = "step";
static char __pyx_k_stop[] = "stop";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_tree[] = "tree";
static char __pyx_k_vary[] = "[vary]";
static char __pyx_k_warn[] = "warn";
static char __pyx_k_0___1[] = "{0}_{1}";
static char __pyx_k_TTree[] = "TTree";
static char __pyx_k_TYPES[] = "TYPES";
static char __pyx_k_arr_2[] = "_arr";
static char __pyx_k_array[] = "array";
static char __pyx_k_chain[] = "chain";
static char __pyx_k_ctype[] = "ctype";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_empty[] = "empty";
static char __pyx_k_fixed[] = "[fixed]";
static char __pyx_k_float[] = "float";
static char __pyx_k_fname[] = "fname";
static char __pyx_k_graph[] = "graph";
static char __pyx_k_index[] = "index";
static char __pyx_k_int16[] = "int16";
static char __pyx_k_int32[] = "int32";
static char __pyx_k_int64[] = "int64";
static char __pyx_k_items[] = "items";
static char __pyx_k_names[] = "names";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_range[] = "range";
static char __pyx_k_right[] = "right";
static char __pyx_k_short[] = "short";
static char __pyx_k_start[] = "start";
static char __pyx_k_ttree[] = "ttree";
static char __pyx_k_uint8[] = "uint8";
static char __pyx_k_atexit[] = "atexit";
static char __pyx_k_double[] = "double";
static char __pyx_k_fields[] = "fields";
static char __pyx_k_fnames[] = "fnames";
static char __pyx_k_format[] = "format";
static char __pyx_k_func_2[] = "_func";
static char __pyx_k_hist_2[] = "_hist";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_intree[] = "intree";
static char __pyx_k_matrix[] = "matrix";
static char __pyx_k_object[] = "object";
static char __pyx_k_resize[] = "resize";
static char __pyx_k_spline[] = "spline";
static char __pyx_k_string[] = "string";
static char __pyx_k_uint16[] = "uint16";
static char __pyx_k_uint32[] = "uint32";
static char __pyx_k_uint64[] = "uint64";
static char __pyx_k_update[] = "update";
static char __pyx_k_values[] = "values";
static char __pyx_k_xrange[] = "xrange";
static char __pyx_k_IOError[] = "IOError";
static char __pyx_k_TNtuple[] = "TNtuple";
static char __pyx_k_array_c[] = "array_c";
static char __pyx_k_array_d[] = "array_d";
static char __pyx_k_array_f[] = "array_f";
static char __pyx_k_array_i[] = "array_i";
static char __pyx_k_array_l[] = "array_l";
static char __pyx_k_array_s[] = "array_s";
static char __pyx_k_bin_idx[] = "bin_idx";
static char __pyx_k_cleanup[] = "cleanup";
static char __pyx_k_clsname[] = "clsname";
static char __pyx_k_fill_g1[] = "fill_g1";
static char __pyx_k_fill_g2[] = "fill_g2";
static char __pyx_k_fill_h1[] = "fill_h1";
static char __pyx_k_fill_h2[] = "fill_h2";
static char __pyx_k_fill_h3[] = "fill_h3";
static char __pyx_k_fill_p1[] = "fill_p1";
static char __pyx_k_fill_p2[] = "fill_p2";
static char __pyx_k_fill_p3[] = "fill_p3";
static char __pyx_k_fk_name[] = "fk_name";
static char __pyx_k_float32[] = "float32";
static char __pyx_k_float64[] = "float64";
static char __pyx_k_graph_2[] = "_graph";
static char __pyx_k_indices[] = "indices";
static char __pyx_k_outtree[] = "outtree";
static char __pyx_k_profile[] = "profile";
static char __pyx_k_weights[] = "weights";
static char __pyx_k_Long64_t[] = "Long64_t";
static char __pyx_k_branches[] = "branches";
static char __pyx_k_filename[] = "filename";
static char __pyx_k_itemsize[] = "itemsize";
static char __pyx_k_longlong[] = "longlong";
static char __pyx_k_matrix_d[] = "matrix_d";
static char __pyx_k_matrix_f[] = "matrix_f";
static char __pyx_k_register[] = "register";
static char __pyx_k_root_arr[] = "root_arr";
static char __pyx_k_root_mat[] = "root_mat";
static char __pyx_k_spline_2[] = "_spline";
static char __pyx_k_treename[] = "treename";
static char __pyx_k_warnings[] = "warnings";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_ULong64_t[] = "ULong64_t";
static char __pyx_k_ctypename[] = "ctypename";
static char __pyx_k_dtypecode[] = "dtypecode";
static char __pyx_k_long_long[] = "long long";
static char __pyx_k_n_samples[] = "n_samples";
static char __pyx_k_profile_2[] = "_profile";
static char __pyx_k_sample_f1[] = "sample_f1";
static char __pyx_k_sample_f2[] = "sample_f2";
static char __pyx_k_sample_f3[] = "sample_f3";
static char __pyx_k_sample_h1[] = "sample_h1";
static char __pyx_k_sample_h2[] = "sample_h2";
static char __pyx_k_sample_h3[] = "sample_h3";
static char __pyx_k_selection[] = "selection";
static char __pyx_k_ulonglong[] = "ulonglong";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_array2root[] = "array2root";
static char __pyx_k_list_trees[] = "list_trees";
static char __pyx_k_rpartition[] = "rpartition";
static char __pyx_k_vector_int[] = "vector<int>";
static char __pyx_k_warnings_2[] = "_warnings";
static char __pyx_k_ImportError[] = "ImportError";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_OrderedDict[] = "OrderedDict";
static char __pyx_k_collections[] = "collections";
static char __pyx_k_evaluate_f1[] = "evaluate_f1";
static char __pyx_k_evaluate_f2[] = "evaluate_f2";
static char __pyx_k_evaluate_f3[] = "evaluate_f3";
static char __pyx_k_evaluate_h1[] = "evaluate_h1";
static char __pyx_k_evaluate_h2[] = "evaluate_h2";
static char __pyx_k_evaluate_h3[] = "evaluate_h3";
static char __pyx_k_flatnonzero[] = "flatnonzero";
static char __pyx_k_vector_bool[] = "vector<bool>";
static char __pyx_k_vector_char[] = "vector<char>";
static char __pyx_k_vector_long[] = "vector<long>";
static char __pyx_k_weight_name[] = "weight_name";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_force_repeat[] = "force_repeat";
static char __pyx_k_librootnumpy[] = "_librootnumpy";
static char __pyx_k_unsigned_int[] = "unsigned int";
static char __pyx_k_vector_float[] = "vector<float>";
static char __pyx_k_vector_short[] = "vector<short>";
static char __pyx_k_cannot_read_0[] = "cannot read {0}";
static char __pyx_k_count_nonzero[] = "count_nonzero";
static char __pyx_k_list_branches[] = "list_branches";
static char __pyx_k_unsigned_char[] = "unsigned char";
static char __pyx_k_unsigned_long[] = "unsigned long";
static char __pyx_k_vector_double[] = "vector<double>";
static char __pyx_k_vector_string[] = "vector<string>";
static char __pyx_k_chain_is_empty[] = "chain is empty";
static char __pyx_k_evaluate_graph[] = "evaluate_graph";
static char __pyx_k_include_weight[] = "include_weight";
static char __pyx_k_return_indices[] = "return_indices";
static char __pyx_k_unsigned_short[] = "unsigned short";
static char __pyx_k_evaluate_spline[] = "evaluate_spline";
static char __pyx_k_list_structures[] = "list_structures";
static char __pyx_k_SPECIAL_TYPEDEFS[] = "SPECIAL_TYPEDEFS";
static char __pyx_k_TYPES_NUMPY2ROOT[] = "TYPES_NUMPY2ROOT";
static char __pyx_k_vector_long_long[] = "vector<long long>";
static char __pyx_k_array2tree_toCObj[] = "array2tree_toCObj";
static char __pyx_k_vector_vector_int[] = "vector<vector<int> >";
static char __pyx_k_cannot_open_file_0[] = "cannot open file {0}";
static char __pyx_k_extern_ordereddict[] = "extern.ordereddict";
static char __pyx_k_no_converter_for_0[] = "no converter for {0}";
static char __pyx_k_unsigned_long_long[] = "unsigned long long";
static char __pyx_k_vector_vector_bool[] = "vector<vector<bool> >";
static char __pyx_k_vector_vector_char[] = "vector<vector<char> >";
static char __pyx_k_vector_vector_long[] = "vector<vector<long> >";
static char __pyx_k_evaluate_formula_1d[] = "evaluate_formula_1d";
static char __pyx_k_evaluate_formula_2d[] = "evaluate_formula_2d";
static char __pyx_k_evaluate_formula_3d[] = "evaluate_formula_3d";
static char __pyx_k_evaluate_formula_4d[] = "evaluate_formula_4d";
static char __pyx_k_root2array_fromCObj[] = "root2array_fromCObj";
static char __pyx_k_vector_unsigned_int[] = "vector<unsigned int>";
static char __pyx_k_vector_vector_float[] = "vector<vector<float> >";
static char __pyx_k_vector_vector_short[] = "vector<vector<short> >";
static char __pyx_k_root2array_fromFname[] = "root2array_fromFname";
static char __pyx_k_tree_has_no_branches[] = "tree has no branches";
static char __pyx_k_vector_unsigned_char[] = "vector<unsigned char>";
static char __pyx_k_vector_unsigned_long[] = "vector<unsigned long>";
static char __pyx_k_vector_vector_double[] = "vector<vector<double> >";
static char __pyx_k_vector_vector_string[] = "vector<vector<string> >";
static char __pyx_k_tree_0_not_found_in_1[] = "tree {0} not found in {1}";
static char __pyx_k_vector_unsigned_short[] = "vector<unsigned short>";
static char __pyx_k_branch_0_has_no_leaves[] = "branch {0} has no leaves";
static char __pyx_k_file_0_is_not_writable[] = "file {0} is not writable";
static char __pyx_k_multiple_trees_found_0[] = "multiple trees found: {0}";
static char __pyx_k_tree_must_be_PyCObject[] = "tree must be PyCObject";
static char __pyx_k_unable_to_get_keys_in_0[] = "unable to get keys in {0}";
static char __pyx_k_vector_vector_long_long[] = "vector<vector<long long> >";
static char __pyx_k_cannot_open_current_file[] = "cannot open current file";
static char __pyx_k_branches_is_an_empty_list[] = "branches is an empty list";
static char __pyx_k_vector_unsigned_long_long[] = "vector<unsigned long long>";
static char __pyx_k_vector_vector_unsigned_int[] = "vector<vector<unsigned int> >";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_vector_vector_unsigned_char[] = "vector<vector<unsigned char> >";
static char __pyx_k_vector_vector_unsigned_long[] = "vector<vector<unsigned long> >";
static char __pyx_k_duplicate_branches_requested[] = "duplicate branches requested";
static char __pyx_k_read_failure_in_current_tree[] = "read failure in current tree";
static char __pyx_k_the_chain_is_not_initialized[] = "the chain is not initialized";
static char __pyx_k_unable_to_access_tree_0_in_1[] = "unable to access tree '{0}' in {1}";
static char __pyx_k_vector_vector_unsigned_short[] = "vector<vector<unsigned short> >";
static char __pyx_k_RootNumpyUnconvertibleWarning[] = "RootNumpyUnconvertibleWarning";
static char __pyx_k_home_endw_workspace_root_numpy[] = "/home/endw/workspace/root_numpy/root_numpy/src/tree.pyx";
static char __pyx_k_cannot_convert_leaf_0_of_branch[] = "cannot convert leaf {0} of branch {1} with type {2} (skipping)";
static char __pyx_k_converter_for_r_not_implemented[] = "converter for %r not implemented yet (skipping)";
static char __pyx_k_leaf_list_for_branch_0_is_empty[] = "leaf list for branch {0} is empty";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_cannot_access_tree_in_current_fi[] = "cannot access tree in current file";
static char __pyx_k_could_not_compile_selection_form[] = "could not compile selection formula";
static char __pyx_k_field_0_of_type_1_is_not_compati[] = "field `{0}` of type `{1}` is not compatible with existing branch of type `{2}`";
static char __pyx_k_home_endw_workspace_root_numpy_2[] = "/home/endw/workspace/root_numpy/root_numpy/src/array.pyx";
static char __pyx_k_home_endw_workspace_root_numpy_3[] = "/home/endw/workspace/root_numpy/root_numpy/src/matrix.pyx";
static char __pyx_k_home_endw_workspace_root_numpy_4[] = "/home/endw/workspace/root_numpy/root_numpy/src/sample.pyx";
static char __pyx_k_home_endw_workspace_root_numpy_5[] = "/home/endw/workspace/root_numpy/root_numpy/src/hist.pyx";
static char __pyx_k_home_endw_workspace_root_numpy_6[] = "/home/endw/workspace/root_numpy/root_numpy/src/graph.pyx";
static char __pyx_k_home_endw_workspace_root_numpy_7[] = "/home/endw/workspace/root_numpy/root_numpy/src/evaluate.pyx";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_the_branch_or_expression_0_is_no[] = "the branch or expression {0} is not present or valid";
static char __pyx_k_tree_index_in_chain_is_out_of_bo[] = "tree index in chain is out of bounds";
static char __pyx_k_unable_to_convert_any_branches_i[] = "unable to convert any branches in this tree";
static char __pyx_k_vector_vector_unsigned_long_long[] = "vector<vector<unsigned long long> >";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_kp_s_;
static PyObject *__pyx_kp_s_0___1;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_n_s_F;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_I;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_L;
static PyObject *__pyx_n_s_Long64_t;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_O;
static PyObject *__pyx_n_s_OrderedDict;
static PyObject *__pyx_n_s_RootNumpyUnconvertibleWarning;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_S;
static PyObject *__pyx_n_s_SPECIAL_TYPEDEFS;
static PyObject *__pyx_n_s_TNtuple;
static PyObject *__pyx_n_s_TTree;
static PyObject *__pyx_n_s_TYPES;
static PyObject *__pyx_n_s_TYPES_NUMPY2ROOT;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ULong64_t;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__19;
static PyObject *__pyx_n_s_arr;
static PyObject *__pyx_n_s_arr_2;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_array2root;
static PyObject *__pyx_n_s_array2tree_toCObj;
static PyObject *__pyx_n_s_array_c;
static PyObject *__pyx_n_s_array_d;
static PyObject *__pyx_n_s_array_f;
static PyObject *__pyx_n_s_array_i;
static PyObject *__pyx_n_s_array_l;
static PyObject *__pyx_n_s_array_s;
static PyObject *__pyx_n_s_atexit;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_bin_idx;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_kp_s_branch_0_has_no_leaves;
static PyObject *__pyx_n_s_branches;
static PyObject *__pyx_kp_s_branches_is_an_empty_list;
static PyObject *__pyx_kp_s_cannot_access_tree_in_current_fi;
static PyObject *__pyx_kp_s_cannot_convert_leaf_0_of_branch;
static PyObject *__pyx_kp_s_cannot_open_current_file;
static PyObject *__pyx_kp_s_cannot_open_file_0;
static PyObject *__pyx_kp_s_cannot_read_0;
static PyObject *__pyx_n_s_chain;
static PyObject *__pyx_kp_s_chain_is_empty;
static PyObject *__pyx_n_s_char;
static PyObject *__pyx_n_s_cleanup;
static PyObject *__pyx_n_s_clsname;
static PyObject *__pyx_n_s_collections;
static PyObject *__pyx_kp_s_converter_for_r_not_implemented;
static PyObject *__pyx_kp_s_could_not_compile_selection_form;
static PyObject *__pyx_n_s_count_nonzero;
static PyObject *__pyx_n_s_ctype;
static PyObject *__pyx_n_s_ctypename;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dtypecode;
static PyObject *__pyx_kp_s_duplicate_branches_requested;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_evaluate_f1;
static PyObject *__pyx_n_s_evaluate_f2;
static PyObject *__pyx_n_s_evaluate_f3;
static PyObject *__pyx_n_s_evaluate_formula_1d;
static PyObject *__pyx_n_s_evaluate_formula_2d;
static PyObject *__pyx_n_s_evaluate_formula_3d;
static PyObject *__pyx_n_s_evaluate_formula_4d;
static PyObject *__pyx_n_s_evaluate_graph;
static PyObject *__pyx_n_s_evaluate_h1;
static PyObject *__pyx_n_s_evaluate_h2;
static PyObject *__pyx_n_s_evaluate_h3;
static PyObject *__pyx_n_s_evaluate_spline;
static PyObject *__pyx_n_s_extern_ordereddict;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_f1;
static PyObject *__pyx_n_s_f1_2;
static PyObject *__pyx_n_s_f2;
static PyObject *__pyx_n_s_f2_2;
static PyObject *__pyx_n_s_f3;
static PyObject *__pyx_n_s_f3_2;
static PyObject *__pyx_kp_s_field_0_of_type_1_is_not_compati;
static PyObject *__pyx_n_s_fields;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_kp_s_file_0_is_not_writable;
static PyObject *__pyx_n_s_filename;
static PyObject *__pyx_n_s_fill_g1;
static PyObject *__pyx_n_s_fill_g2;
static PyObject *__pyx_n_s_fill_h1;
static PyObject *__pyx_n_s_fill_h2;
static PyObject *__pyx_n_s_fill_h3;
static PyObject *__pyx_n_s_fill_p1;
static PyObject *__pyx_n_s_fill_p2;
static PyObject *__pyx_n_s_fill_p3;
static PyObject *__pyx_kp_s_fixed;
static PyObject *__pyx_n_s_fk;
static PyObject *__pyx_kp_s_fk_d;
static PyObject *__pyx_n_s_fk_name;
static PyObject *__pyx_n_s_flatnonzero;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_float64;
static PyObject *__pyx_n_s_fn;
static PyObject *__pyx_n_s_fname;
static PyObject *__pyx_n_s_fnames;
static PyObject *__pyx_n_s_force_repeat;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_func;
static PyObject *__pyx_n_s_func_2;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_graph;
static PyObject *__pyx_n_s_graph_2;
static PyObject *__pyx_n_s_h1;
static PyObject *__pyx_n_s_h1_2;
static PyObject *__pyx_n_s_h2;
static PyObject *__pyx_n_s_h2_2;
static PyObject *__pyx_n_s_h3;
static PyObject *__pyx_n_s_h3_2;
static PyObject *__pyx_n_s_hist;
static PyObject *__pyx_n_s_hist_2;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_2;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_3;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_4;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_5;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_6;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_7;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_include_weight;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_indices;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_int16;
static PyObject *__pyx_n_s_int32;
static PyObject *__pyx_n_s_int64;
static PyObject *__pyx_n_s_int8;
static PyObject *__pyx_n_s_intree;
static PyObject *__pyx_n_s_it;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_itemsize;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_l;
static PyObject *__pyx_kp_s_leaf_list_for_branch_0_is_empty;
static PyObject *__pyx_n_s_left;
static PyObject *__pyx_n_s_librootnumpy;
static PyObject *__pyx_n_s_list_branches;
static PyObject *__pyx_n_s_list_structures;
static PyObject *__pyx_n_s_list_trees;
static PyObject *__pyx_n_s_long;
static PyObject *__pyx_kp_s_long_long;
static PyObject *__pyx_n_s_longlong;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mat;
static PyObject *__pyx_n_s_matrix;
static PyObject *__pyx_n_s_matrix_d;
static PyObject *__pyx_n_s_matrix_f;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_kp_s_multiple_trees_found_0;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_n_samples;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_names;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_kp_s_no_converter_for_0;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_outtree;
static PyObject *__pyx_n_s_profile;
static PyObject *__pyx_n_s_profile_2;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_kp_s_read_failure_in_current_tree;
static PyObject *__pyx_n_s_register;
static PyObject *__pyx_n_s_resize;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_n_s_return_indices;
static PyObject *__pyx_n_s_right;
static PyObject *__pyx_n_s_root2array_fromCObj;
static PyObject *__pyx_n_s_root2array_fromFname;
static PyObject *__pyx_n_s_root_arr;
static PyObject *__pyx_n_s_root_mat;
static PyObject *__pyx_n_s_rpartition;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_sample_f1;
static PyObject *__pyx_n_s_sample_f2;
static PyObject *__pyx_n_s_sample_f3;
static PyObject *__pyx_n_s_sample_h1;
static PyObject *__pyx_n_s_sample_h2;
static PyObject *__pyx_n_s_sample_h3;
static PyObject *__pyx_n_s_selection;
static PyObject *__pyx_n_s_short;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_spline;
static PyObject *__pyx_n_s_spline_2;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_b_string;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_kp_s_the_branch_or_expression_0_is_no;
static PyObject *__pyx_kp_s_the_chain_is_not_initialized;
static PyObject *__pyx_n_s_tree;
static PyObject *__pyx_kp_s_tree_0_not_found_in_1;
static PyObject *__pyx_kp_s_tree_has_no_branches;
static PyObject *__pyx_kp_s_tree_index_in_chain_is_out_of_bo;
static PyObject *__pyx_kp_s_tree_must_be_PyCObject;
static PyObject *__pyx_n_s_treename;
static PyObject *__pyx_n_s_ttree;
static PyObject *__pyx_n_s_uint16;
static PyObject *__pyx_n_s_uint32;
static PyObject *__pyx_n_s_uint64;
static PyObject *__pyx_n_s_uint8;
static PyObject *__pyx_n_s_ulonglong;
static PyObject *__pyx_kp_s_unable_to_access_tree_0_in_1;
static PyObject *__pyx_kp_s_unable_to_convert_any_branches_i;
static PyObject *__pyx_kp_s_unable_to_get_keys_in_0;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_kp_s_unsigned_char;
static PyObject *__pyx_kp_s_unsigned_int;
static PyObject *__pyx_kp_s_unsigned_long;
static PyObject *__pyx_kp_s_unsigned_long_long;
static PyObject *__pyx_kp_s_unsigned_short;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_kp_s_vary;
static PyObject *__pyx_kp_b_vector_bool;
static PyObject *__pyx_kp_b_vector_char;
static PyObject *__pyx_kp_b_vector_double;
static PyObject *__pyx_kp_b_vector_float;
static PyObject *__pyx_kp_b_vector_int;
static PyObject *__pyx_kp_b_vector_long;
static PyObject *__pyx_kp_b_vector_long_long;
static PyObject *__pyx_kp_b_vector_short;
static PyObject *__pyx_kp_b_vector_string;
static PyObject *__pyx_kp_b_vector_unsigned_char;
static PyObject *__pyx_kp_b_vector_unsigned_int;
static PyObject *__pyx_kp_b_vector_unsigned_long;
static PyObject *__pyx_kp_b_vector_unsigned_long_long;
static PyObject *__pyx_kp_b_vector_unsigned_short;
static PyObject *__pyx_kp_b_vector_vector_bool;
static PyObject *__pyx_kp_b_vector_vector_char;
static PyObject *__pyx_kp_b_vector_vector_double;
static PyObject *__pyx_kp_b_vector_vector_float;
static PyObject *__pyx_kp_b_vector_vector_int;
static PyObject *__pyx_kp_b_vector_vector_long;
static PyObject *__pyx_kp_b_vector_vector_long_long;
static PyObject *__pyx_kp_b_vector_vector_short;
static PyObject *__pyx_kp_b_vector_vector_string;
static PyObject *__pyx_kp_b_vector_vector_unsigned_char;
static PyObject *__pyx_kp_b_vector_vector_unsigned_int;
static PyObject *__pyx_kp_b_vector_vector_unsigned_long;
static PyObject *__pyx_kp_b_vector_vector_unsigned_long_long;
static PyObject *__pyx_kp_b_vector_vector_unsigned_short;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_warnings_2;
static PyObject *__pyx_n_s_weight_name;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_z;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_8;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;

/* "root_numpy/src/tree.pyx":40
 * 
 * 
 * cdef inline unicode resolve_type(const char* typename):             # <<<<<<<<<<<<<<
 *     # resolve Float_t -> float, vector<Float_t> -> vector<float>, ...
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()
 */

#line 40 "root_numpy/src/tree.pyx"


#line 40 "root_numpy/src/tree.pyx"
static CYTHON_INLINE PyObject *__pyx_f_13_librootnumpy_resolve_type(char const *__pyx_v_typename) {
  PyObject *__pyx_v_resolvedtype = NULL
#line 40 "root_numpy/src/tree.pyx"
;

#line 40 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 40 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("resolve_type", 0);

  /* "root_numpy/src/tree.pyx":42
 * cdef inline unicode resolve_type(const char* typename):
 *     # resolve Float_t -> float, vector<Float_t> -> vector<float>, ...
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()             # <<<<<<<<<<<<<<
 *     resolvedtype = <unicode>SPECIAL_TYPEDEFS.get(resolvedtype, resolvedtype)
 *     return resolvedtype
 */

#line 42 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyUnicode_FromString(TClassEdit::ResolveTypedef(__pyx_v_typename, 1).c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 42 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 42 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __pyx_t_1;

#line 42 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_t_2);

#line 42 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 42 "root_numpy/src/tree.pyx"
  __pyx_v_resolvedtype = ((PyObject*)__pyx_t_2);

#line 42 "root_numpy/src/tree.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/tree.pyx":43
 *     # resolve Float_t -> float, vector<Float_t> -> vector<float>, ...
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()
 *     resolvedtype = <unicode>SPECIAL_TYPEDEFS.get(resolvedtype, resolvedtype)             # <<<<<<<<<<<<<<
 *     return resolvedtype
 * 
 */

#line 43 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_SPECIAL_TYPEDEFS); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 43 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 43 "root_numpy/src/tree.pyx"
  __pyx_t_1 = NULL;

#line 43 "root_numpy/src/tree.pyx"
  __pyx_t_4 = 0;

#line 43 "root_numpy/src/tree.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 43 "root_numpy/src/tree.pyx"
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);

#line 43 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_1)) {

#line 43 "root_numpy/src/tree.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 43 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_1);

#line 43 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(function);

#line 43 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 43 "root_numpy/src/tree.pyx"
      __pyx_t_4 = 1;

#line 43 "root_numpy/src/tree.pyx"
    }

#line 43 "root_numpy/src/tree.pyx"
  }

#line 43 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 43 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

#line 43 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;

#line 43 "root_numpy/src/tree.pyx"
  }

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_resolvedtype);

#line 43 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_4, __pyx_v_resolvedtype);

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_v_resolvedtype);

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_resolvedtype);

#line 43 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_4, __pyx_v_resolvedtype);

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_v_resolvedtype);

#line 43 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 43 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __pyx_t_2;

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_t_3);

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 43 "root_numpy/src/tree.pyx"
  __Pyx_DECREF_SET(__pyx_v_resolvedtype, ((PyObject*)__pyx_t_3));

#line 43 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/tree.pyx":44
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()
 *     resolvedtype = <unicode>SPECIAL_TYPEDEFS.get(resolvedtype, resolvedtype)
 *     return resolvedtype             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 44 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 44 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_resolvedtype);

#line 44 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_resolvedtype;

#line 44 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":40
 * 
 * 
 * cdef inline unicode resolve_type(const char* typename):             # <<<<<<<<<<<<<<
 *     # resolve Float_t -> float, vector<Float_t> -> vector<float>, ...
 *     resolvedtype = <unicode>ResolveTypedef(typename, True).c_str()
 */

#line 40 "root_numpy/src/tree.pyx"


#line 40 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 40 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 40 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 40 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 40 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 40 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 40 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.resolve_type", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 40 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 40 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 40 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_resolvedtype);

#line 40 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 40 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 40 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 40 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":47
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 */

#line 47 "root_numpy/src/tree.pyx"


#line 47 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 47 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_1list_trees(PyObject *__pyx_self, PyObject *__pyx_v_fname); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_1list_trees = 
#line 47 "root_numpy/src/tree.pyx"
{"list_trees", (PyCFunction)__pyx_pw_13_librootnumpy_1list_trees, METH_O, 0};

#line 47 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_1list_trees(PyObject *__pyx_self, PyObject *__pyx_v_fname) {

#line 47 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_trees (wrapper)", 0);
  __pyx_r = 
#line 47 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_list_trees(__pyx_self, ((PyObject *)__pyx_v_fname));

#line 47 "root_numpy/src/tree.pyx"


#line 47 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 47 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 47 "root_numpy/src/tree.pyx"
}

#line 47 "root_numpy/src/tree.pyx"


#line 47 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_list_trees(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname) {
  TFile *__pyx_v_f
#line 47 "root_numpy/src/tree.pyx"
;
  TList *__pyx_v_keys
#line 47 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_ret = NULL
#line 47 "root_numpy/src/tree.pyx"
;
  int __pyx_v_n
#line 47 "root_numpy/src/tree.pyx"
;
  TKey *__pyx_v_key
#line 47 "root_numpy/src/tree.pyx"
;
  int __pyx_v_i
#line 47 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_clsname = NULL
#line 47 "root_numpy/src/tree.pyx"
;

#line 47 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_trees", 0);

  /* "root_numpy/src/tree.pyx":48
 * 
 * def list_trees(fname):
 *     cdef TFile* f = Open(fname, 'read')             # <<<<<<<<<<<<<<
 *     if f is NULL:
 *         raise IOError("cannot read {0}".format(fname))
 */

#line 48 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_fname); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 48 "root_numpy/src/tree.pyx"
  __pyx_v_f = TFile::Open(__pyx_t_1, __pyx_k_read);

  /* "root_numpy/src/tree.pyx":49
 * def list_trees(fname):
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TList* keys = f.GetListOfKeys()
 */

#line 49 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((__pyx_v_f == NULL) != 0);

#line 49 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":50
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 *         raise IOError("cannot read {0}".format(fname))             # <<<<<<<<<<<<<<
 *     cdef TList* keys = f.GetListOfKeys()
 *     if keys is NULL:
 */

#line 50 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_read_0, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 50 "root_numpy/src/tree.pyx"
    __pyx_t_5 = NULL;

#line 50 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 50 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 50 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_5)) {

#line 50 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 50 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 50 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 50 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 50 "root_numpy/src/tree.pyx"
      }

#line 50 "root_numpy/src/tree.pyx"
    }

#line 50 "root_numpy/src/tree.pyx"
    if (!__pyx_t_5) {

#line 50 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_fname); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 50 "root_numpy/src/tree.pyx"
    } else {

#line 50 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 50 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 50 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_fname);

#line 50 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_fname);

#line 50 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_fname);

#line 50 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 50 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 50 "root_numpy/src/tree.pyx"
    }

#line 50 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 50 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 50 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 50 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 50 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

#line 50 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 50 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 50 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 50 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 50 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":51
 *     if f is NULL:
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TList* keys = f.GetListOfKeys()             # <<<<<<<<<<<<<<
 *     if keys is NULL:
 *         raise IOError("unable to get keys in {0}".format(fname))
 */

#line 51 "root_numpy/src/tree.pyx"
  __pyx_v_keys = __pyx_v_f->GetListOfKeys();

  /* "root_numpy/src/tree.pyx":52
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TList* keys = f.GetListOfKeys()
 *     if keys is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("unable to get keys in {0}".format(fname))
 *     ret = dict()
 */

#line 52 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((__pyx_v_keys == NULL) != 0);

#line 52 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":53
 *     cdef TList* keys = f.GetListOfKeys()
 *     if keys is NULL:
 *         raise IOError("unable to get keys in {0}".format(fname))             # <<<<<<<<<<<<<<
 *     ret = dict()
 *     cdef int n = keys.GetEntries()
 */

#line 53 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_unable_to_get_keys_in_0, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 53 "root_numpy/src/tree.pyx"
    __pyx_t_6 = NULL;

#line 53 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 53 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);

#line 53 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_6)) {

#line 53 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 53 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 53 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 53 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 53 "root_numpy/src/tree.pyx"
      }

#line 53 "root_numpy/src/tree.pyx"
    }

#line 53 "root_numpy/src/tree.pyx"
    if (!__pyx_t_6) {

#line 53 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_fname); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 53 "root_numpy/src/tree.pyx"
    } else {

#line 53 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 53 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;

#line 53 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_fname);

#line 53 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_fname);

#line 53 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_fname);

#line 53 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 53 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 53 "root_numpy/src/tree.pyx"
    }

#line 53 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 53 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 53 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 53 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 53 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

#line 53 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 53 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 53 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 53 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 53 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":54
 *     if keys is NULL:
 *         raise IOError("unable to get keys in {0}".format(fname))
 *     ret = dict()             # <<<<<<<<<<<<<<
 *     cdef int n = keys.GetEntries()
 *     cdef TKey* key
 */

#line 54 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 54 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 54 "root_numpy/src/tree.pyx"
  __pyx_v_ret = ((PyObject*)__pyx_t_3);

#line 54 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/tree.pyx":55
 *         raise IOError("unable to get keys in {0}".format(fname))
 *     ret = dict()
 *     cdef int n = keys.GetEntries()             # <<<<<<<<<<<<<<
 *     cdef TKey* key
 *     for i in range(n):
 */

#line 55 "root_numpy/src/tree.pyx"
  __pyx_v_n = __pyx_v_keys->GetEntries();

  /* "root_numpy/src/tree.pyx":57
 *     cdef int n = keys.GetEntries()
 *     cdef TKey* key
 *     for i in range(n):             # <<<<<<<<<<<<<<
 *         key = <TKey*> keys.At(i)
 *         clsname = str(key.GetClassName())
 */

#line 57 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __pyx_v_n;

#line 57 "root_numpy/src/tree.pyx"
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {

#line 57 "root_numpy/src/tree.pyx"
    __pyx_v_i = __pyx_t_8;

    /* "root_numpy/src/tree.pyx":58
 *     cdef TKey* key
 *     for i in range(n):
 *         key = <TKey*> keys.At(i)             # <<<<<<<<<<<<<<
 *         clsname = str(key.GetClassName())
 *         if clsname == 'TTree' or clsname == 'TNtuple':
 */

#line 58 "root_numpy/src/tree.pyx"
    __pyx_v_key = ((TKey *)__pyx_v_keys->At(__pyx_v_i));

    /* "root_numpy/src/tree.pyx":59
 *     for i in range(n):
 *         key = <TKey*> keys.At(i)
 *         clsname = str(key.GetClassName())             # <<<<<<<<<<<<<<
 *         if clsname == 'TTree' or clsname == 'TNtuple':
 *             ret[str(key.GetName())] = None
 */

#line 59 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyStr_FromString(__pyx_v_key->GetClassName()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 59 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 59 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 59 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 59 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 59 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 59 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

#line 59 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 59 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 59 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 59 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF_SET(__pyx_v_clsname, __pyx_t_3);

#line 59 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/tree.pyx":60
 *         key = <TKey*> keys.At(i)
 *         clsname = str(key.GetClassName())
 *         if clsname == 'TTree' or clsname == 'TNtuple':             # <<<<<<<<<<<<<<
 *             ret[str(key.GetName())] = None
 *     return list(ret.keys())
 */

#line 60 "root_numpy/src/tree.pyx"
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_clsname, __pyx_n_s_TTree, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/tree.pyx"
    if (!__pyx_t_9) {

#line 60 "root_numpy/src/tree.pyx"
    } else {

#line 60 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __pyx_t_9;

#line 60 "root_numpy/src/tree.pyx"
      goto __pyx_L8_bool_binop_done;

#line 60 "root_numpy/src/tree.pyx"
    }

#line 60 "root_numpy/src/tree.pyx"
    __pyx_t_9 = (__Pyx_PyString_Equals(__pyx_v_clsname, __pyx_n_s_TNtuple, Py_EQ)); if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_t_9;

#line 60 "root_numpy/src/tree.pyx"
    __pyx_L8_bool_binop_done:;

#line 60 "root_numpy/src/tree.pyx"
    if (__pyx_t_2) {

      /* "root_numpy/src/tree.pyx":61
 *         clsname = str(key.GetClassName())
 *         if clsname == 'TTree' or clsname == 'TNtuple':
 *             ret[str(key.GetName())] = None             # <<<<<<<<<<<<<<
 *     return list(ret.keys())
 * 
 */

#line 61 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyStr_FromString(__pyx_v_key->GetName()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 61 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 61 "root_numpy/src/tree.pyx"
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 61 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 61 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 61 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 61 "root_numpy/src/tree.pyx"
      __pyx_t_3 = 0;

#line 61 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 61 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 61 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 61 "root_numpy/src/tree.pyx"
      if (unlikely(PyDict_SetItem(__pyx_v_ret, __pyx_t_3, Py_None) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 61 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 61 "root_numpy/src/tree.pyx"
      goto __pyx_L7;

#line 61 "root_numpy/src/tree.pyx"
    }

#line 61 "root_numpy/src/tree.pyx"
    __pyx_L7:;

#line 61 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":62
 *         if clsname == 'TTree' or clsname == 'TNtuple':
 *             ret[str(key.GetName())] = None
 *     return list(ret.keys())             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 62 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 62 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_PyDict_Keys(__pyx_v_ret); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 62 "root_numpy/src/tree.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 62 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 62 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_3);

#line 62 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

#line 62 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 62 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 62 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_3;

#line 62 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

#line 62 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":47
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 */

#line 47 "root_numpy/src/tree.pyx"


#line 47 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 47 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_trees", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 47 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 47 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_ret);

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_clsname);

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 47 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 47 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":65
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree is None:
 *         # automatically select single tree
 */

#line 65 "root_numpy/src/tree.pyx"


#line 65 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 65 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_3list_structures(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_3list_structures = 
#line 65 "root_numpy/src/tree.pyx"
{"list_structures", (PyCFunction)__pyx_pw_13_librootnumpy_3list_structures, METH_VARARGS|METH_KEYWORDS, 0};

#line 65 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_3list_structures(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0
#line 65 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tree = 0
#line 65 "root_numpy/src/tree.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 65 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_structures (wrapper)", 0);

#line 65 "root_numpy/src/tree.pyx"
  {

#line 65 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_tree,0};

#line 65 "root_numpy/src/tree.pyx"
    PyObject* values[2] = {0,0};

#line 65 "root_numpy/src/tree.pyx"
    values[1] = ((PyObject *)Py_None);

#line 65 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 65 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 65 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 65 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  2: 
#line 65 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 65 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 65 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 65 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 65 "root_numpy/src/tree.pyx"
      }

#line 65 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 65 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 65 "root_numpy/src/tree.pyx"
        case  0:

#line 65 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else 
#line 65 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 65 "root_numpy/src/tree.pyx"
        case  1:

#line 65 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 65 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree);

#line 65 "root_numpy/src/tree.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 65 "root_numpy/src/tree.pyx"
        }

#line 65 "root_numpy/src/tree.pyx"
      }

#line 65 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 65 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "list_structures") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 65 "root_numpy/src/tree.pyx"
      }

#line 65 "root_numpy/src/tree.pyx"
    } else {

#line 65 "root_numpy/src/tree.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 65 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 65 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 65 "root_numpy/src/tree.pyx"
        break;
        default: 
#line 65 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 65 "root_numpy/src/tree.pyx"
      }

#line 65 "root_numpy/src/tree.pyx"
    }

#line 65 "root_numpy/src/tree.pyx"
    __pyx_v_fname = values[0];

#line 65 "root_numpy/src/tree.pyx"
    __pyx_v_tree = values[1];

#line 65 "root_numpy/src/tree.pyx"
  }

#line 65 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 65 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_structures", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 65 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 65 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_structures", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 65 "root_numpy/src/tree.pyx"
  return NULL;

#line 65 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 65 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_2list_structures(__pyx_self, __pyx_v_fname, __pyx_v_tree);

#line 65 "root_numpy/src/tree.pyx"


#line 65 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 65 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 65 "root_numpy/src/tree.pyx"
}

#line 65 "root_numpy/src/tree.pyx"


#line 65 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_2list_structures(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree) {
  TFile *__pyx_v_f
#line 65 "root_numpy/src/tree.pyx"
;
  TTree *__pyx_v_t
#line 65 "root_numpy/src/tree.pyx"
;

#line 65 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  const char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_structures", 0);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_tree);

  /* "root_numpy/src/tree.pyx":66
 * 
 * def list_structures(fname, tree=None):
 *     if tree is None:             # <<<<<<<<<<<<<<
 *         # automatically select single tree
 *         tree = list_trees(fname)
 */

#line 66 "root_numpy/src/tree.pyx"
  __pyx_t_1 = (__pyx_v_tree == Py_None);

#line 66 "root_numpy/src/tree.pyx"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 66 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":68
 *     if tree is None:
 *         # automatically select single tree
 *         tree = list_trees(fname)             # <<<<<<<<<<<<<<
 *         if len(tree) != 1:
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))
 */

#line 68 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_list_trees); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 68 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 68 "root_numpy/src/tree.pyx"
    __pyx_t_5 = NULL;

#line 68 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 68 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 68 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_5)) {

#line 68 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 68 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 68 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 68 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 68 "root_numpy/src/tree.pyx"
      }

#line 68 "root_numpy/src/tree.pyx"
    }

#line 68 "root_numpy/src/tree.pyx"
    if (!__pyx_t_5) {

#line 68 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_fname); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 68 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 68 "root_numpy/src/tree.pyx"
    } else {

#line 68 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 68 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 68 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 68 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_fname);

#line 68 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_fname);

#line 68 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_fname);

#line 68 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 68 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 68 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 68 "root_numpy/src/tree.pyx"
    }

#line 68 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 68 "root_numpy/src/tree.pyx"
    __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_3);

#line 68 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/tree.pyx":69
 *         # automatically select single tree
 *         tree = list_trees(fname)
 *         if len(tree) != 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))
 *         else:
 */

#line 69 "root_numpy/src/tree.pyx"
    __pyx_t_7 = PyObject_Length(__pyx_v_tree); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 69 "root_numpy/src/tree.pyx"
    __pyx_t_2 = ((__pyx_t_7 != 1) != 0);

#line 69 "root_numpy/src/tree.pyx"
    if (__pyx_t_2) {

      /* "root_numpy/src/tree.pyx":70
 *         tree = list_trees(fname)
 *         if len(tree) != 1:
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))             # <<<<<<<<<<<<<<
 *         else:
 *             tree = tree[0]
 */

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_multiple_trees_found_0, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_6 = __Pyx_PyString_Join(__pyx_kp_s_, __pyx_v_tree); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_5 = NULL;

#line 70 "root_numpy/src/tree.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 70 "root_numpy/src/tree.pyx"
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 70 "root_numpy/src/tree.pyx"
        if (likely(__pyx_t_5)) {

#line 70 "root_numpy/src/tree.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 70 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_t_5);

#line 70 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(function);

#line 70 "root_numpy/src/tree.pyx"
          __Pyx_DECREF_SET(__pyx_t_4, function);

#line 70 "root_numpy/src/tree.pyx"
        }

#line 70 "root_numpy/src/tree.pyx"
      }

#line 70 "root_numpy/src/tree.pyx"
      if (!__pyx_t_5) {

#line 70 "root_numpy/src/tree.pyx"
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 70 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 70 "root_numpy/src/tree.pyx"
      } else {

#line 70 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 70 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 70 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);

#line 70 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_6);

#line 70 "root_numpy/src/tree.pyx"
        __pyx_t_6 = 0;

#line 70 "root_numpy/src/tree.pyx"
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 70 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 70 "root_numpy/src/tree.pyx"
      }

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 70 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_3 = 0;

#line 70 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 70 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 70 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/tree.pyx"
    }

#line 70 "root_numpy/src/tree.pyx"
    /*else*/ {

      /* "root_numpy/src/tree.pyx":72
 *             raise ValueError("multiple trees found: {0}".format(', '.join(tree)))
 *         else:
 *             tree = tree[0]             # <<<<<<<<<<<<<<
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 */

#line 72 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_tree, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 72 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 72 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_v_tree, __pyx_t_3);

#line 72 "root_numpy/src/tree.pyx"
      __pyx_t_3 = 0;

#line 72 "root_numpy/src/tree.pyx"
    }

#line 72 "root_numpy/src/tree.pyx"
    goto __pyx_L3;

#line 72 "root_numpy/src/tree.pyx"
  }

#line 72 "root_numpy/src/tree.pyx"
  __pyx_L3:;

  /* "root_numpy/src/tree.pyx":73
 *         else:
 *             tree = tree[0]
 *     cdef TFile* f = Open(fname, 'read')             # <<<<<<<<<<<<<<
 *     if f is NULL:
 *         raise IOError("cannot read {0}".format(fname))
 */

#line 73 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_fname); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 73 "root_numpy/src/tree.pyx"
  __pyx_v_f = TFile::Open(__pyx_t_9, __pyx_k_read);

  /* "root_numpy/src/tree.pyx":74
 *             tree = tree[0]
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TTree* t = <TTree*> f.Get(tree)
 */

#line 74 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((__pyx_v_f == NULL) != 0);

#line 74 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":75
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 *         raise IOError("cannot read {0}".format(fname))             # <<<<<<<<<<<<<<
 *     cdef TTree* t = <TTree*> f.Get(tree)
 *     if t is NULL:
 */

#line 75 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_read_0, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 75 "root_numpy/src/tree.pyx"
    __pyx_t_8 = NULL;

#line 75 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 75 "root_numpy/src/tree.pyx"
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);

#line 75 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_8)) {

#line 75 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 75 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_8);

#line 75 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 75 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 75 "root_numpy/src/tree.pyx"
      }

#line 75 "root_numpy/src/tree.pyx"
    }

#line 75 "root_numpy/src/tree.pyx"
    if (!__pyx_t_8) {

#line 75 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_fname); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 75 "root_numpy/src/tree.pyx"
    } else {

#line 75 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 75 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;

#line 75 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_fname);

#line 75 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_fname);

#line 75 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_fname);

#line 75 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 75 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 75 "root_numpy/src/tree.pyx"
    }

#line 75 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 75 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 75 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 75 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 75 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

#line 75 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 75 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 75 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 75 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 75 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":76
 *     if f is NULL:
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TTree* t = <TTree*> f.Get(tree)             # <<<<<<<<<<<<<<
 *     if t is NULL:
 *         raise IOError("tree {0} not found in {1}".format(tree, fname))
 */

#line 76 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_AsString(__pyx_v_tree); if (unlikely((!__pyx_t_9) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 76 "root_numpy/src/tree.pyx"
  __pyx_v_t = ((TTree *)__pyx_v_f->Get(__pyx_t_9));

  /* "root_numpy/src/tree.pyx":77
 *         raise IOError("cannot read {0}".format(fname))
 *     cdef TTree* t = <TTree*> f.Get(tree)
 *     if t is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("tree {0} not found in {1}".format(tree, fname))
 *     return parse_tree_structure(t)
 */

#line 77 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((__pyx_v_t == NULL) != 0);

#line 77 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":78
 *     cdef TTree* t = <TTree*> f.Get(tree)
 *     if t is NULL:
 *         raise IOError("tree {0} not found in {1}".format(tree, fname))             # <<<<<<<<<<<<<<
 *     return parse_tree_structure(t)
 * 
 */

#line 78 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_tree_0_not_found_in_1, __pyx_n_s_format); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 78 "root_numpy/src/tree.pyx"
    __pyx_t_6 = NULL;

#line 78 "root_numpy/src/tree.pyx"
    __pyx_t_7 = 0;

#line 78 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 78 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);

#line 78 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_6)) {

#line 78 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 78 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 78 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 78 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 78 "root_numpy/src/tree.pyx"
        __pyx_t_7 = 1;

#line 78 "root_numpy/src/tree.pyx"
      }

#line 78 "root_numpy/src/tree.pyx"
    }

#line 78 "root_numpy/src/tree.pyx"
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 78 "root_numpy/src/tree.pyx"
    if (__pyx_t_6) {

#line 78 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;

#line 78 "root_numpy/src/tree.pyx"
    }

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_tree);

#line 78 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_tree);

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_v_tree);

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_fname);

#line 78 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_fname);

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_v_fname);

#line 78 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 78 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 78 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 78 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

#line 78 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 78 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 78 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":79
 *     if t is NULL:
 *         raise IOError("tree {0} not found in {1}".format(tree, fname))
 *     return parse_tree_structure(t)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 79 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 79 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __pyx_f_13_librootnumpy_parse_tree_structure(__pyx_v_t, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 79 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 79 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_3;

#line 79 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

#line 79 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":65
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree is None:
 *         # automatically select single tree
 */

#line 65 "root_numpy/src/tree.pyx"


#line 65 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 65 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_structures", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 65 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 65 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_tree);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 65 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 65 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":82
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list(list_structures(fname, tree).keys())
 * 
 */

#line 82 "root_numpy/src/tree.pyx"


#line 82 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 82 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_5list_branches(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_5list_branches = 
#line 82 "root_numpy/src/tree.pyx"
{"list_branches", (PyCFunction)__pyx_pw_13_librootnumpy_5list_branches, METH_VARARGS|METH_KEYWORDS, 0};

#line 82 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_5list_branches(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fname = 0
#line 82 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tree = 0
#line 82 "root_numpy/src/tree.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 82 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_branches (wrapper)", 0);

#line 82 "root_numpy/src/tree.pyx"
  {

#line 82 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fname,&__pyx_n_s_tree,0};

#line 82 "root_numpy/src/tree.pyx"
    PyObject* values[2] = {0,0};

#line 82 "root_numpy/src/tree.pyx"
    values[1] = ((PyObject *)Py_None);

#line 82 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 82 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 82 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 82 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  2: 
#line 82 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 82 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 82 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 82 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 82 "root_numpy/src/tree.pyx"
      }

#line 82 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 82 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 82 "root_numpy/src/tree.pyx"
        case  0:

#line 82 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fname)) != 0)) kw_args--;
        else 
#line 82 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 82 "root_numpy/src/tree.pyx"
        case  1:

#line 82 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 82 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree);

#line 82 "root_numpy/src/tree.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 82 "root_numpy/src/tree.pyx"
        }

#line 82 "root_numpy/src/tree.pyx"
      }

#line 82 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 82 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "list_branches") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 82 "root_numpy/src/tree.pyx"
      }

#line 82 "root_numpy/src/tree.pyx"
    } else {

#line 82 "root_numpy/src/tree.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: 
#line 82 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 82 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 82 "root_numpy/src/tree.pyx"
        break;
        default: 
#line 82 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 82 "root_numpy/src/tree.pyx"
      }

#line 82 "root_numpy/src/tree.pyx"
    }

#line 82 "root_numpy/src/tree.pyx"
    __pyx_v_fname = values[0];

#line 82 "root_numpy/src/tree.pyx"
    __pyx_v_tree = values[1];

#line 82 "root_numpy/src/tree.pyx"
  }

#line 82 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 82 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("list_branches", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 82 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 82 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_branches", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 82 "root_numpy/src/tree.pyx"
  return NULL;

#line 82 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 82 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_4list_branches(__pyx_self, __pyx_v_fname, __pyx_v_tree);

#line 82 "root_numpy/src/tree.pyx"


#line 82 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 82 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 82 "root_numpy/src/tree.pyx"
}

#line 82 "root_numpy/src/tree.pyx"


#line 82 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_4list_branches(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fname, PyObject *__pyx_v_tree) {

#line 82 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("list_branches", 0);

  /* "root_numpy/src/tree.pyx":83
 * 
 * def list_branches(fname, tree=None):
 *     return list(list_structures(fname, tree).keys())             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_list_structures); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_4 = NULL;

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 83 "root_numpy/src/tree.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {

#line 83 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);

#line 83 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_4)) {

#line 83 "root_numpy/src/tree.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 83 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 83 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(function);

#line 83 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 83 "root_numpy/src/tree.pyx"
      __pyx_t_5 = 1;

#line 83 "root_numpy/src/tree.pyx"
    }

#line 83 "root_numpy/src/tree.pyx"
  }

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_6 = PyTuple_New(2+__pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 83 "root_numpy/src/tree.pyx"
  if (__pyx_t_4) {

#line 83 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;

#line 83 "root_numpy/src/tree.pyx"
  }

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_fname);

#line 83 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_5, __pyx_v_fname);

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_v_fname);

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_tree);

#line 83 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_5, __pyx_v_tree);

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_v_tree);

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_keys); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_2 = NULL;

#line 83 "root_numpy/src/tree.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 83 "root_numpy/src/tree.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);

#line 83 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_2)) {

#line 83 "root_numpy/src/tree.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 83 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 83 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(function);

#line 83 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_t_3, function);

#line 83 "root_numpy/src/tree.pyx"
    }

#line 83 "root_numpy/src/tree.pyx"
  }

#line 83 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

#line 83 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 83 "root_numpy/src/tree.pyx"
  } else {

#line 83 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/tree.pyx"
  }

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 83 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 83 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 83 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_1;

#line 83 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

#line 83 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":82
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list(list_structures(fname, tree).keys())
 * 
 */

#line 82 "root_numpy/src/tree.pyx"


#line 82 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 82 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.list_branches", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 82 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 82 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 82 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 82 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":86
 * 
 * 
 * cdef parse_branch_structure(TBranch* branch):             # <<<<<<<<<<<<<<
 *     cdef TObjArray* leaves
 *     cdef TLeaf* leaf
 */

#line 86 "root_numpy/src/tree.pyx"


#line 86 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_parse_branch_structure(TBranch *__pyx_v_branch) {
  TObjArray *__pyx_v_leaves
#line 86 "root_numpy/src/tree.pyx"
;
  TLeaf *__pyx_v_leaf
#line 86 "root_numpy/src/tree.pyx"
;
  int __pyx_v_ileaf
#line 86 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_leaflist = NULL
#line 86 "root_numpy/src/tree.pyx"
;
  const char *__pyx_v_lname
#line 86 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_ltype = NULL
#line 86 "root_numpy/src/tree.pyx"
;

#line 86 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("parse_branch_structure", 0);

  /* "root_numpy/src/tree.pyx":90
 *     cdef TLeaf* leaf
 *     cdef int ileaf
 *     leaves = branch.GetListOfLeaves()             # <<<<<<<<<<<<<<
 *     if leaves is NULL:
 *         raise RuntimeError("branch {0} has no leaves".format(branch.GetName()))
 */

#line 90 "root_numpy/src/tree.pyx"
  __pyx_v_leaves = __pyx_v_branch->GetListOfLeaves();

  /* "root_numpy/src/tree.pyx":91
 *     cdef int ileaf
 *     leaves = branch.GetListOfLeaves()
 *     if leaves is NULL:             # <<<<<<<<<<<<<<
 *         raise RuntimeError("branch {0} has no leaves".format(branch.GetName()))
 *     leaflist = []
 */

#line 91 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_leaves == NULL) != 0);

#line 91 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":92
 *     leaves = branch.GetListOfLeaves()
 *     if leaves is NULL:
 *         raise RuntimeError("branch {0} has no leaves".format(branch.GetName()))             # <<<<<<<<<<<<<<
 *     leaflist = []
 *     for ileaf in range(leaves.GetEntries()):
 */

#line 92 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_branch_0_has_no_leaves, __pyx_n_s_format); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 92 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyStr_FromString(__pyx_v_branch->GetName()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 92 "root_numpy/src/tree.pyx"
    __pyx_t_5 = NULL;

#line 92 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {

#line 92 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);

#line 92 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_5)) {

#line 92 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);

#line 92 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 92 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 92 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_3, function);

#line 92 "root_numpy/src/tree.pyx"
      }

#line 92 "root_numpy/src/tree.pyx"
    }

#line 92 "root_numpy/src/tree.pyx"
    if (!__pyx_t_5) {

#line 92 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 92 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 92 "root_numpy/src/tree.pyx"
    } else {

#line 92 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 92 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 92 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);

#line 92 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_4);

#line 92 "root_numpy/src/tree.pyx"
      __pyx_t_4 = 0;

#line 92 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_6, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 92 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 92 "root_numpy/src/tree.pyx"
    }

#line 92 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 92 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 92 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 92 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 92 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

#line 92 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 92 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 92 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 92 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 92 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":93
 *     if leaves is NULL:
 *         raise RuntimeError("branch {0} has no leaves".format(branch.GetName()))
 *     leaflist = []             # <<<<<<<<<<<<<<
 *     for ileaf in range(leaves.GetEntries()):
 *         leaf = <TLeaf*>leaves.At(ileaf)
 */

#line 93 "root_numpy/src/tree.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 93 "root_numpy/src/tree.pyx"
  __pyx_v_leaflist = ((PyObject*)__pyx_t_2);

#line 93 "root_numpy/src/tree.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/tree.pyx":94
 *         raise RuntimeError("branch {0} has no leaves".format(branch.GetName()))
 *     leaflist = []
 *     for ileaf in range(leaves.GetEntries()):             # <<<<<<<<<<<<<<
 *         leaf = <TLeaf*>leaves.At(ileaf)
 *         lname = leaf.GetName()
 */

#line 94 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __pyx_v_leaves->GetEntries();

#line 94 "root_numpy/src/tree.pyx"
  for (__pyx_t_8 = 0; __pyx_t_8 < __pyx_t_7; __pyx_t_8+=1) {

#line 94 "root_numpy/src/tree.pyx"
    __pyx_v_ileaf = __pyx_t_8;

    /* "root_numpy/src/tree.pyx":95
 *     leaflist = []
 *     for ileaf in range(leaves.GetEntries()):
 *         leaf = <TLeaf*>leaves.At(ileaf)             # <<<<<<<<<<<<<<
 *         lname = leaf.GetName()
 *         ltype = resolve_type(leaf.GetTypeName())
 */

#line 95 "root_numpy/src/tree.pyx"
    __pyx_v_leaf = ((TLeaf *)__pyx_v_leaves->At(__pyx_v_ileaf));

    /* "root_numpy/src/tree.pyx":96
 *     for ileaf in range(leaves.GetEntries()):
 *         leaf = <TLeaf*>leaves.At(ileaf)
 *         lname = leaf.GetName()             # <<<<<<<<<<<<<<
 *         ltype = resolve_type(leaf.GetTypeName())
 *         leaflist.append((lname, ltype))
 */

#line 96 "root_numpy/src/tree.pyx"
    __pyx_v_lname = __pyx_v_leaf->GetName();

    /* "root_numpy/src/tree.pyx":97
 *         leaf = <TLeaf*>leaves.At(ileaf)
 *         lname = leaf.GetName()
 *         ltype = resolve_type(leaf.GetTypeName())             # <<<<<<<<<<<<<<
 *         leaflist.append((lname, ltype))
 *     if not leaflist:
 */

#line 97 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_f_13_librootnumpy_resolve_type(__pyx_v_leaf->GetTypeName()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 97 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF_SET(__pyx_v_ltype, ((PyObject*)__pyx_t_2));

#line 97 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":98
 *         lname = leaf.GetName()
 *         ltype = resolve_type(leaf.GetTypeName())
 *         leaflist.append((lname, ltype))             # <<<<<<<<<<<<<<
 *     if not leaflist:
 *         raise RuntimeError(
 */

#line 98 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_lname); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 98 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 98 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);

#line 98 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 98 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_ltype);

#line 98 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_ltype);

#line 98 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_v_ltype);

#line 98 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

#line 98 "root_numpy/src/tree.pyx"
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_leaflist, __pyx_t_3); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 98 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 98 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":99
 *         ltype = resolve_type(leaf.GetTypeName())
 *         leaflist.append((lname, ltype))
 *     if not leaflist:             # <<<<<<<<<<<<<<
 *         raise RuntimeError(
 *             "leaf list for branch {0} is empty".format(
 */

#line 99 "root_numpy/src/tree.pyx"
  __pyx_t_1 = (__pyx_v_leaflist != Py_None) && (PyList_GET_SIZE(__pyx_v_leaflist) != 0);

#line 99 "root_numpy/src/tree.pyx"
  __pyx_t_10 = ((!__pyx_t_1) != 0);

#line 99 "root_numpy/src/tree.pyx"
  if (__pyx_t_10) {

    /* "root_numpy/src/tree.pyx":101
 *     if not leaflist:
 *         raise RuntimeError(
 *             "leaf list for branch {0} is empty".format(             # <<<<<<<<<<<<<<
 *                 branch.GetName()))
 *     return leaflist
 */

#line 101 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_leaf_list_for_branch_0_is_empty, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

    /* "root_numpy/src/tree.pyx":102
 *         raise RuntimeError(
 *             "leaf list for branch {0} is empty".format(
 *                 branch.GetName()))             # <<<<<<<<<<<<<<
 *     return leaflist
 * 
 */

#line 102 "root_numpy/src/tree.pyx"
    __pyx_t_6 = __Pyx_PyStr_FromString(__pyx_v_branch->GetName()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 102 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 102 "root_numpy/src/tree.pyx"
    __pyx_t_4 = NULL;

#line 102 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {

#line 102 "root_numpy/src/tree.pyx"
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);

#line 102 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_4)) {

#line 102 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 102 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_4);

#line 102 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 102 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 102 "root_numpy/src/tree.pyx"
      }

#line 102 "root_numpy/src/tree.pyx"
    }

#line 102 "root_numpy/src/tree.pyx"
    if (!__pyx_t_4) {

#line 102 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 102 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 102 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 102 "root_numpy/src/tree.pyx"
    } else {

#line 102 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 102 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 102 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;

#line 102 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_6);

#line 102 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_6);

#line 102 "root_numpy/src/tree.pyx"
      __pyx_t_6 = 0;

#line 102 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 102 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 102 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 102 "root_numpy/src/tree.pyx"
    }

#line 102 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":100
 *         leaflist.append((lname, ltype))
 *     if not leaflist:
 *         raise RuntimeError(             # <<<<<<<<<<<<<<
 *             "leaf list for branch {0} is empty".format(
 *                 branch.GetName()))
 */

#line 100 "root_numpy/src/tree.pyx"
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 100 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);

#line 100 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_3);

#line 100 "root_numpy/src/tree.pyx"
    __pyx_t_3 = 0;

#line 100 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 100 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 100 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 100 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 100 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":103
 *             "leaf list for branch {0} is empty".format(
 *                 branch.GetName()))
 *     return leaflist             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 103 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 103 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_leaflist);

#line 103 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_leaflist;

#line 103 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":86
 * 
 * 
 * cdef parse_branch_structure(TBranch* branch):             # <<<<<<<<<<<<<<
 *     cdef TObjArray* leaves
 *     cdef TLeaf* leaf
 */

#line 86 "root_numpy/src/tree.pyx"


#line 86 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 86 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.parse_branch_structure", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 86 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 86 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_leaflist);

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_ltype);

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 86 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 86 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 86 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":106
 * 
 * 
 * cdef parse_tree_structure(TTree* tree, branches=None):             # <<<<<<<<<<<<<<
 *     cdef int ibranch
 *     cdef TBranch* branch
 */

#line 106 "root_numpy/src/tree.pyx"


#line 106 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_parse_tree_structure(TTree *__pyx_v_tree, struct __pyx_opt_args_13_librootnumpy_parse_tree_structure *__pyx_optional_args) {

#line 106 "root_numpy/src/tree.pyx"
  PyObject *__pyx_v_branches = ((PyObject *)Py_None);
  int __pyx_v_ibranch
#line 106 "root_numpy/src/tree.pyx"
;
  TBranch *__pyx_v_branch
#line 106 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_ret = NULL
#line 106 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_branch_name = NULL
#line 106 "root_numpy/src/tree.pyx"
;
  TObjArray *__pyx_v_all_branches
#line 106 "root_numpy/src/tree.pyx"
;

#line 106 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  const char *__pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 106 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("parse_tree_structure", 0);

#line 106 "root_numpy/src/tree.pyx"
  if (__pyx_optional_args) {

#line 106 "root_numpy/src/tree.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 106 "root_numpy/src/tree.pyx"
      __pyx_v_branches = __pyx_optional_args->branches;

#line 106 "root_numpy/src/tree.pyx"
    }

#line 106 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":109
 *     cdef int ibranch
 *     cdef TBranch* branch
 *     ret = OrderedDict()             # <<<<<<<<<<<<<<
 *     if branches is not None:
 *         for branch_name in branches:
 */

#line 109 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 109 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 109 "root_numpy/src/tree.pyx"
  __pyx_t_3 = NULL;

#line 109 "root_numpy/src/tree.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 109 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);

#line 109 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_3)) {

#line 109 "root_numpy/src/tree.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 109 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_3);

#line 109 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(function);

#line 109 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 109 "root_numpy/src/tree.pyx"
    }

#line 109 "root_numpy/src/tree.pyx"
  }

#line 109 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

#line 109 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 109 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 109 "root_numpy/src/tree.pyx"
  } else {

#line 109 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 109 "root_numpy/src/tree.pyx"
  }

#line 109 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 109 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 109 "root_numpy/src/tree.pyx"
  __pyx_v_ret = __pyx_t_1;

#line 109 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":110
 *     cdef TBranch* branch
 *     ret = OrderedDict()
 *     if branches is not None:             # <<<<<<<<<<<<<<
 *         for branch_name in branches:
 *             branch = tree.GetBranch(branch_name)
 */

#line 110 "root_numpy/src/tree.pyx"
  __pyx_t_4 = (__pyx_v_branches != Py_None);

#line 110 "root_numpy/src/tree.pyx"
  __pyx_t_5 = (__pyx_t_4 != 0);

#line 110 "root_numpy/src/tree.pyx"
  if (__pyx_t_5) {

    /* "root_numpy/src/tree.pyx":111
 *     ret = OrderedDict()
 *     if branches is not None:
 *         for branch_name in branches:             # <<<<<<<<<<<<<<
 *             branch = tree.GetBranch(branch_name)
 *             if branch is NULL:
 */

#line 111 "root_numpy/src/tree.pyx"
    if (likely(PyList_CheckExact(__pyx_v_branches)) || PyTuple_CheckExact(__pyx_v_branches)) {

#line 111 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __pyx_v_branches; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;

#line 111 "root_numpy/src/tree.pyx"
      __pyx_t_7 = NULL;

#line 111 "root_numpy/src/tree.pyx"
    } else {
      __pyx_t_6 = -1; 
#line 111 "root_numpy/src/tree.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_v_branches); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 111 "root_numpy/src/tree.pyx"
      __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/tree.pyx"
    }

#line 111 "root_numpy/src/tree.pyx"
    for (;;) {

#line 111 "root_numpy/src/tree.pyx"
      if (likely(!__pyx_t_7)) {

#line 111 "root_numpy/src/tree.pyx"
        if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 111 "root_numpy/src/tree.pyx"
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 111 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 111 "root_numpy/src/tree.pyx"
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/tree.pyx"
          #else

#line 111 "root_numpy/src/tree.pyx"
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/tree.pyx"
          #endif

#line 111 "root_numpy/src/tree.pyx"
        } else {

#line 111 "root_numpy/src/tree.pyx"
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 111 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 111 "root_numpy/src/tree.pyx"
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_2); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/tree.pyx"
          #else

#line 111 "root_numpy/src/tree.pyx"
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/tree.pyx"
          #endif

#line 111 "root_numpy/src/tree.pyx"
        }
      } else 
#line 111 "root_numpy/src/tree.pyx"
{

#line 111 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __pyx_t_7(__pyx_t_1);

#line 111 "root_numpy/src/tree.pyx"
        if (unlikely(!__pyx_t_2)) {

#line 111 "root_numpy/src/tree.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 111 "root_numpy/src/tree.pyx"
          if (exc_type) {

#line 111 "root_numpy/src/tree.pyx"
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 111 "root_numpy/src/tree.pyx"
            else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/tree.pyx"
          }

#line 111 "root_numpy/src/tree.pyx"
          break;

#line 111 "root_numpy/src/tree.pyx"
        }

#line 111 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 111 "root_numpy/src/tree.pyx"
      }

#line 111 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF_SET(__pyx_v_branch_name, __pyx_t_2);

#line 111 "root_numpy/src/tree.pyx"
      __pyx_t_2 = 0;

      /* "root_numpy/src/tree.pyx":112
 *     if branches is not None:
 *         for branch_name in branches:
 *             branch = tree.GetBranch(branch_name)             # <<<<<<<<<<<<<<
 *             if branch is NULL:
 *                 continue
 */

#line 112 "root_numpy/src/tree.pyx"
      __pyx_t_8 = __Pyx_PyObject_AsString(__pyx_v_branch_name); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/tree.pyx"
      __pyx_v_branch = __pyx_v_tree->GetBranch(__pyx_t_8);

      /* "root_numpy/src/tree.pyx":113
 *         for branch_name in branches:
 *             branch = tree.GetBranch(branch_name)
 *             if branch is NULL:             # <<<<<<<<<<<<<<
 *                 continue
 *             ret[branch.GetName()] = parse_branch_structure(branch)
 */

#line 113 "root_numpy/src/tree.pyx"
      __pyx_t_5 = ((__pyx_v_branch == NULL) != 0);

#line 113 "root_numpy/src/tree.pyx"
      if (__pyx_t_5) {

        /* "root_numpy/src/tree.pyx":114
 *             branch = tree.GetBranch(branch_name)
 *             if branch is NULL:
 *                 continue             # <<<<<<<<<<<<<<
 *             ret[branch.GetName()] = parse_branch_structure(branch)
 *         return ret
 */

#line 114 "root_numpy/src/tree.pyx"
        goto __pyx_L4_continue;

#line 114 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":115
 *             if branch is NULL:
 *                 continue
 *             ret[branch.GetName()] = parse_branch_structure(branch)             # <<<<<<<<<<<<<<
 *         return ret
 *     # all branches
 */

#line 115 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __pyx_f_13_librootnumpy_parse_branch_structure(__pyx_v_branch); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 115 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyStr_FromString(__pyx_v_branch->GetName()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 115 "root_numpy/src/tree.pyx"
      if (unlikely(PyObject_SetItem(__pyx_v_ret, __pyx_t_3, __pyx_t_2) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 115 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "root_numpy/src/tree.pyx":111
 *     ret = OrderedDict()
 *     if branches is not None:
 *         for branch_name in branches:             # <<<<<<<<<<<<<<
 *             branch = tree.GetBranch(branch_name)
 *             if branch is NULL:
 */

#line 111 "root_numpy/src/tree.pyx"
      __pyx_L4_continue:;

#line 111 "root_numpy/src/tree.pyx"
    }

#line 111 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "root_numpy/src/tree.pyx":116
 *                 continue
 *             ret[branch.GetName()] = parse_branch_structure(branch)
 *         return ret             # <<<<<<<<<<<<<<
 *     # all branches
 *     cdef TObjArray* all_branches = tree.GetListOfBranches()
 */

#line 116 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 116 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_ret);

#line 116 "root_numpy/src/tree.pyx"
    __pyx_r = __pyx_v_ret;

#line 116 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

#line 116 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":118
 *         return ret
 *     # all branches
 *     cdef TObjArray* all_branches = tree.GetListOfBranches()             # <<<<<<<<<<<<<<
 *     if all_branches is NULL:
 *         return ret
 */

#line 118 "root_numpy/src/tree.pyx"
  __pyx_v_all_branches = __pyx_v_tree->GetListOfBranches();

  /* "root_numpy/src/tree.pyx":119
 *     # all branches
 *     cdef TObjArray* all_branches = tree.GetListOfBranches()
 *     if all_branches is NULL:             # <<<<<<<<<<<<<<
 *         return ret
 *     for ibranch in range(all_branches.GetEntries()):
 */

#line 119 "root_numpy/src/tree.pyx"
  __pyx_t_5 = ((__pyx_v_all_branches == NULL) != 0);

#line 119 "root_numpy/src/tree.pyx"
  if (__pyx_t_5) {

    /* "root_numpy/src/tree.pyx":120
 *     cdef TObjArray* all_branches = tree.GetListOfBranches()
 *     if all_branches is NULL:
 *         return ret             # <<<<<<<<<<<<<<
 *     for ibranch in range(all_branches.GetEntries()):
 *         branch = <TBranch*>(all_branches.At(ibranch))
 */

#line 120 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 120 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_ret);

#line 120 "root_numpy/src/tree.pyx"
    __pyx_r = __pyx_v_ret;

#line 120 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

#line 120 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":121
 *     if all_branches is NULL:
 *         return ret
 *     for ibranch in range(all_branches.GetEntries()):             # <<<<<<<<<<<<<<
 *         branch = <TBranch*>(all_branches.At(ibranch))
 *         ret[branch.GetName()] = parse_branch_structure(branch)
 */

#line 121 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __pyx_v_all_branches->GetEntries();

#line 121 "root_numpy/src/tree.pyx"
  for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {

#line 121 "root_numpy/src/tree.pyx"
    __pyx_v_ibranch = __pyx_t_10;

    /* "root_numpy/src/tree.pyx":122
 *         return ret
 *     for ibranch in range(all_branches.GetEntries()):
 *         branch = <TBranch*>(all_branches.At(ibranch))             # <<<<<<<<<<<<<<
 *         ret[branch.GetName()] = parse_branch_structure(branch)
 *     return ret
 */

#line 122 "root_numpy/src/tree.pyx"
    __pyx_v_branch = ((TBranch *)__pyx_v_all_branches->At(__pyx_v_ibranch));

    /* "root_numpy/src/tree.pyx":123
 *     for ibranch in range(all_branches.GetEntries()):
 *         branch = <TBranch*>(all_branches.At(ibranch))
 *         ret[branch.GetName()] = parse_branch_structure(branch)             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */

#line 123 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __pyx_f_13_librootnumpy_parse_branch_structure(__pyx_v_branch); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 123 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 123 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_branch->GetName()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 123 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 123 "root_numpy/src/tree.pyx"
    if (unlikely(PyObject_SetItem(__pyx_v_ret, __pyx_t_2, __pyx_t_1) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 123 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 123 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 123 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":124
 *         branch = <TBranch*>(all_branches.At(ibranch))
 *         ret[branch.GetName()] = parse_branch_structure(branch)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 124 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 124 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_ret);

#line 124 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_ret;

#line 124 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":106
 * 
 * 
 * cdef parse_tree_structure(TTree* tree, branches=None):             # <<<<<<<<<<<<<<
 *     cdef int ibranch
 *     cdef TBranch* branch
 */

#line 106 "root_numpy/src/tree.pyx"


#line 106 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 106 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 106 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 106 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 106 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 106 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.parse_tree_structure", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 106 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 106 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 106 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_ret);

#line 106 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_branch_name);

#line 106 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 106 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 106 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 106 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":130
 * # given numelement and size of each element
 * # and write it to buffer
 * cdef inline int create_numpyarray(void* buffer, void* src, int typecode,             # <<<<<<<<<<<<<<
 *                                   unsigned long numele, int elesize):
 *     cdef np.npy_intp dims[1]
 */

#line 130 "root_numpy/src/tree.pyx"


#line 130 "root_numpy/src/tree.pyx"
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray(void *__pyx_v_buffer, void *__pyx_v_src, int __pyx_v_typecode, unsigned long __pyx_v_numele, int __pyx_v_elesize) {
  npy_intp __pyx_v_dims[1]
#line 130 "root_numpy/src/tree.pyx"
;
  PyArrayObject *__pyx_v_tmp = 0
#line 130 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tmpobj
#line 130 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_nbytes
#line 130 "root_numpy/src/tree.pyx"
;

#line 130 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 130 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("create_numpyarray", 0);

  /* "root_numpy/src/tree.pyx":133
 *                                   unsigned long numele, int elesize):
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, typecode, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */

#line 133 "root_numpy/src/tree.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/tree.pyx":134
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, typecode, 0)             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # increase one since we are putting in buffer directly
 */

#line 134 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, __pyx_v_typecode, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 134 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "root_numpy/src/tree.pyx"
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_1);

#line 134 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":135
 *     dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, typecode, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref             # <<<<<<<<<<<<<<
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)
 */

#line 135 "root_numpy/src/tree.pyx"
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_tmp);

  /* "root_numpy/src/tree.pyx":137
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)             # <<<<<<<<<<<<<<
 *     # copy to tmp.data
 *     cdef unsigned long nbytes = numele * elesize
 */

#line 137 "root_numpy/src/tree.pyx"
  Py_INCREF(((PyObject *)__pyx_v_tmp));

  /* "root_numpy/src/tree.pyx":139
 *     Py_INCREF(tmp)
 *     # copy to tmp.data
 *     cdef unsigned long nbytes = numele * elesize             # <<<<<<<<<<<<<<
 *     memcpy(tmp.data, src, nbytes)
 *     # now write PyObject* to buffer
 */

#line 139 "root_numpy/src/tree.pyx"
  __pyx_v_nbytes = (__pyx_v_numele * __pyx_v_elesize);

  /* "root_numpy/src/tree.pyx":140
 *     # copy to tmp.data
 *     cdef unsigned long nbytes = numele * elesize
 *     memcpy(tmp.data, src, nbytes)             # <<<<<<<<<<<<<<
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 */

#line 140 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_tmp->data, __pyx_v_src, __pyx_v_nbytes);

  /* "root_numpy/src/tree.pyx":142
 *     memcpy(tmp.data, src, nbytes)
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *     return sizeof(tmpobj)
 * 
 */

#line 142 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "root_numpy/src/tree.pyx":143
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 *     return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 143 "root_numpy/src/tree.pyx"
  __pyx_r = (sizeof(__pyx_v_tmpobj));

#line 143 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":130
 * # given numelement and size of each element
 * # and write it to buffer
 * cdef inline int create_numpyarray(void* buffer, void* src, int typecode,             # <<<<<<<<<<<<<<
 *                                   unsigned long numele, int elesize):
 *     cdef np.npy_intp dims[1]
 */

#line 130 "root_numpy/src/tree.pyx"


#line 130 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 130 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 130 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 130 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.create_numpyarray", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 130 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 130 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 130 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);

#line 130 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 130 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 130 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":147
 * 
 * # special treatment for vector<bool>
 * cdef inline int create_numpyarray_vectorbool(void* buffer, vector[bool]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef np.npy_intp dims[1]
 */

#line 147 "root_numpy/src/tree.pyx"


#line 147 "root_numpy/src/tree.pyx"
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorbool(void *__pyx_v_buffer, std::vector<bool>  *__pyx_v_src) {
  unsigned long __pyx_v_numele
#line 147 "root_numpy/src/tree.pyx"
;
  npy_intp __pyx_v_dims[1]
#line 147 "root_numpy/src/tree.pyx"
;
  PyArrayObject *__pyx_v_tmp = 0
#line 147 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tmpobj
#line 147 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_i
#line 147 "root_numpy/src/tree.pyx"
;

#line 147 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  unsigned long __pyx_t_2;
  unsigned long __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 147 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("create_numpyarray_vectorbool", 0);

  /* "root_numpy/src/tree.pyx":148
 * # special treatment for vector<bool>
 * cdef inline int create_numpyarray_vectorbool(void* buffer, vector[bool]* src):
 *     cdef unsigned long numele = src.size()             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;
 */

#line 148 "root_numpy/src/tree.pyx"
  __pyx_v_numele = __pyx_v_src->size();

  /* "root_numpy/src/tree.pyx":150
 *     cdef unsigned long numele = src.size()
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_BOOL, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */

#line 150 "root_numpy/src/tree.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/tree.pyx":151
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_BOOL, 0)             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # increase one since we are putting in buffer directly
 */

#line 151 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, NPY_BOOL, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 151 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 151 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 151 "root_numpy/src/tree.pyx"
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_1);

#line 151 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":152
 *     dims[0] = numele;
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_BOOL, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref             # <<<<<<<<<<<<<<
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)
 */

#line 152 "root_numpy/src/tree.pyx"
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_tmp);

  /* "root_numpy/src/tree.pyx":154
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)             # <<<<<<<<<<<<<<
 *     # can't use memcpy here...
 *     cdef unsigned long i
 */

#line 154 "root_numpy/src/tree.pyx"
  Py_INCREF(((PyObject *)__pyx_v_tmp));

  /* "root_numpy/src/tree.pyx":157
 *     # can't use memcpy here...
 *     cdef unsigned long i
 *     for i in range(numele):             # <<<<<<<<<<<<<<
 *         tmp[i] = src.at(i)
 *     # now write PyObject* to buffer
 */

#line 157 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __pyx_v_numele;

#line 157 "root_numpy/src/tree.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 157 "root_numpy/src/tree.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "root_numpy/src/tree.pyx":158
 *     cdef unsigned long i
 *     for i in range(numele):
 *         tmp[i] = src.at(i)             # <<<<<<<<<<<<<<
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 */

#line 158 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_src->at(__pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 158 "root_numpy/src/tree.pyx"
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_tmp), __pyx_v_i, __pyx_t_1, unsigned long, 0, __Pyx_PyInt_From_unsigned_long, 0, 0, 1) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 158 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":160
 *         tmp[i] = src.at(i)
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *     return sizeof(tmpobj)
 * 
 */

#line 160 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "root_numpy/src/tree.pyx":161
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 *     return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 161 "root_numpy/src/tree.pyx"
  __pyx_r = (sizeof(__pyx_v_tmpobj));

#line 161 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":147
 * 
 * # special treatment for vector<bool>
 * cdef inline int create_numpyarray_vectorbool(void* buffer, vector[bool]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef np.npy_intp dims[1]
 */

#line 147 "root_numpy/src/tree.pyx"


#line 147 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 147 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 147 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 147 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.create_numpyarray_vectorbool", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 147 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 147 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 147 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);

#line 147 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 147 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 147 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":164
 * 
 * 
 * cdef inline int create_numpyarray_vectorstring(void* buffer, vector[string]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef np.npy_intp dims[1]
 */

#line 164 "root_numpy/src/tree.pyx"


#line 164 "root_numpy/src/tree.pyx"
static CYTHON_INLINE int __pyx_f_13_librootnumpy_create_numpyarray_vectorstring(void *__pyx_v_buffer, std::vector<std::string>  *__pyx_v_src) {
  unsigned long __pyx_v_numele
#line 164 "root_numpy/src/tree.pyx"
;
  npy_intp __pyx_v_dims[1]
#line 164 "root_numpy/src/tree.pyx"
;
  int __pyx_v_objsize
#line 164 "root_numpy/src/tree.pyx"
;
  PyArrayObject *__pyx_v_tmp = 0
#line 164 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tmpobj
#line 164 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tmpstrobj
#line 164 "root_numpy/src/tree.pyx"
;
  char *__pyx_v_dataptr
#line 164 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_i
#line 164 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_py_bytes = NULL
#line 164 "root_numpy/src/tree.pyx"
;

#line 164 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  unsigned long __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 164 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("create_numpyarray_vectorstring", 0);

  /* "root_numpy/src/tree.pyx":165
 * 
 * cdef inline int create_numpyarray_vectorstring(void* buffer, vector[string]* src):
 *     cdef unsigned long numele = src.size()             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;
 */

#line 165 "root_numpy/src/tree.pyx"
  __pyx_v_numele = __pyx_v_src->size();

  /* "root_numpy/src/tree.pyx":167
 *     cdef unsigned long numele = src.size()
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;             # <<<<<<<<<<<<<<
 *     cdef int objsize = np.dtype('O').itemsize
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)
 */

#line 167 "root_numpy/src/tree.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/tree.pyx":168
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;
 *     cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */

#line 168 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 168 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 168 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((PyArray_Descr *)__pyx_t_1)->elsize;

#line 168 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 168 "root_numpy/src/tree.pyx"
  __pyx_v_objsize = __pyx_t_2;

  /* "root_numpy/src/tree.pyx":169
 *     dims[0] = numele;
 *     cdef int objsize = np.dtype('O').itemsize
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # increase one since we are putting in buffer directly
 */

#line 169 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, NPY_OBJECT, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 169 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/tree.pyx"
  __pyx_v_tmp = ((PyArrayObject *)__pyx_t_1);

#line 169 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":170
 *     cdef int objsize = np.dtype('O').itemsize
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref             # <<<<<<<<<<<<<<
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)
 */

#line 170 "root_numpy/src/tree.pyx"
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_tmp);

  /* "root_numpy/src/tree.pyx":172
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 *     # increase one since we are putting in buffer directly
 *     Py_INCREF(tmp)             # <<<<<<<<<<<<<<
 *     cdef PyObject* tmpstrobj
 *     cdef char* dataptr = <char*> tmp.data
 */

#line 172 "root_numpy/src/tree.pyx"
  Py_INCREF(((PyObject *)__pyx_v_tmp));

  /* "root_numpy/src/tree.pyx":174
 *     Py_INCREF(tmp)
 *     cdef PyObject* tmpstrobj
 *     cdef char* dataptr = <char*> tmp.data             # <<<<<<<<<<<<<<
 *     # can't use memcpy here...
 *     cdef unsigned long i
 */

#line 174 "root_numpy/src/tree.pyx"
  __pyx_v_dataptr = ((char *)__pyx_v_tmp->data);

  /* "root_numpy/src/tree.pyx":177
 *     # can't use memcpy here...
 *     cdef unsigned long i
 *     for i in range(numele):             # <<<<<<<<<<<<<<
 *         py_bytes = str(src.at(i))
 *         Py_INCREF(py_bytes)
 */

#line 177 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __pyx_v_numele;

#line 177 "root_numpy/src/tree.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 177 "root_numpy/src/tree.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "root_numpy/src/tree.pyx":178
 *     cdef unsigned long i
 *     for i in range(numele):
 *         py_bytes = str(src.at(i))             # <<<<<<<<<<<<<<
 *         Py_INCREF(py_bytes)
 *         tmpstrobj = <PyObject*> py_bytes
 */

#line 178 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__string(__pyx_v_src->at(__pyx_v_i)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 178 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 178 "root_numpy/src/tree.pyx"
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 178 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 178 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);

#line 178 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 178 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

#line 178 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 178 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 178 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 178 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF_SET(__pyx_v_py_bytes, __pyx_t_1);

#line 178 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

    /* "root_numpy/src/tree.pyx":179
 *     for i in range(numele):
 *         py_bytes = str(src.at(i))
 *         Py_INCREF(py_bytes)             # <<<<<<<<<<<<<<
 *         tmpstrobj = <PyObject*> py_bytes
 *         memcpy(&dataptr[i*objsize], &tmpstrobj, sizeof(PyObject*))
 */

#line 179 "root_numpy/src/tree.pyx"
    Py_INCREF(__pyx_v_py_bytes);

    /* "root_numpy/src/tree.pyx":180
 *         py_bytes = str(src.at(i))
 *         Py_INCREF(py_bytes)
 *         tmpstrobj = <PyObject*> py_bytes             # <<<<<<<<<<<<<<
 *         memcpy(&dataptr[i*objsize], &tmpstrobj, sizeof(PyObject*))
 *     # now write PyObject* to buffer
 */

#line 180 "root_numpy/src/tree.pyx"
    __pyx_v_tmpstrobj = ((PyObject *)__pyx_v_py_bytes);

    /* "root_numpy/src/tree.pyx":181
 *         Py_INCREF(py_bytes)
 *         tmpstrobj = <PyObject*> py_bytes
 *         memcpy(&dataptr[i*objsize], &tmpstrobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 */

#line 181 "root_numpy/src/tree.pyx"
    memcpy((&(__pyx_v_dataptr[(__pyx_v_i * __pyx_v_objsize)])), (&__pyx_v_tmpstrobj), (sizeof(PyObject *)));

#line 181 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":183
 *         memcpy(&dataptr[i*objsize], &tmpstrobj, sizeof(PyObject*))
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *     return sizeof(tmpobj)
 * 
 */

#line 183 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "root_numpy/src/tree.pyx":184
 *     # now write PyObject* to buffer
 *     memcpy(buffer, &tmpobj, sizeof(PyObject*))
 *     return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 184 "root_numpy/src/tree.pyx"
  __pyx_r = (sizeof(__pyx_v_tmpobj));

#line 184 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":164
 * 
 * 
 * cdef inline int create_numpyarray_vectorstring(void* buffer, vector[string]* src):             # <<<<<<<<<<<<<<
 *     cdef unsigned long numele = src.size()
 *     cdef np.npy_intp dims[1]
 */

#line 164 "root_numpy/src/tree.pyx"


#line 164 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 164 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 164 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 164 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 164 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.create_numpyarray_vectorstring", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 164 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 164 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 164 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp);

#line 164 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_py_bytes);

#line 164 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 164 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 164 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":188
 * 
 * cdef cppclass Converter:
 *     __init__():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 188 "root_numpy/src/tree.pyx"


#line 188 "root_numpy/src/tree.pyx"
 __pyx_t_13_librootnumpy_Converter::__pyx_t_13_librootnumpy_Converter(void) {
  __Pyx_RefNannyDeclarations

#line 188 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

#line 188 "root_numpy/src/tree.pyx"


#line 188 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 188 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 188 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":191
 *         pass
 * 
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 191 "root_numpy/src/tree.pyx"


#line 191 "root_numpy/src/tree.pyx"
 __pyx_t_13_librootnumpy_Converter::~__pyx_t_13_librootnumpy_Converter(void) {
  __Pyx_RefNannyDeclarations

#line 191 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("<del>", 0);

#line 191 "root_numpy/src/tree.pyx"


#line 191 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 191 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 191 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":194
 *         pass
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 194 "root_numpy/src/tree.pyx"


#line 194 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_Converter::write(CYTHON_UNUSED Column *__pyx_v_col, CYTHON_UNUSED void *__pyx_v_buffer) {

#line 194 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 194 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

#line 194 "root_numpy/src/tree.pyx"


#line 194 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 194 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 194 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 194 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 194 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":197
 *         pass
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 197 "root_numpy/src/tree.pyx"


#line 197 "root_numpy/src/tree.pyx"
PyObject *__pyx_t_13_librootnumpy_Converter::get_nptype(void) {

#line 197 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 197 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("get_nptype", 0);

#line 197 "root_numpy/src/tree.pyx"


#line 197 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 197 "root_numpy/src/tree.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 197 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 197 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 197 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 197 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":207
 *     string nptype
 * 
 *     __init__(int size, string nptype, int nptypecode):             # <<<<<<<<<<<<<<
 *         this.size = size
 *         this.nptypecode = nptypecode
 */

#line 207 "root_numpy/src/tree.pyx"


#line 207 "root_numpy/src/tree.pyx"
 __pyx_t_13_librootnumpy_BasicConverter::__pyx_t_13_librootnumpy_BasicConverter(int __pyx_v_size, std::string __pyx_v_nptype, int __pyx_v_nptypecode) {
  __Pyx_RefNannyDeclarations

#line 207 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/tree.pyx":208
 * 
 *     __init__(int size, string nptype, int nptypecode):
 *         this.size = size             # <<<<<<<<<<<<<<
 *         this.nptypecode = nptypecode
 *         this.nptype = nptype
 */

#line 208 "root_numpy/src/tree.pyx"
  this->size = __pyx_v_size;

  /* "root_numpy/src/tree.pyx":209
 *     __init__(int size, string nptype, int nptypecode):
 *         this.size = size
 *         this.nptypecode = nptypecode             # <<<<<<<<<<<<<<
 *         this.nptype = nptype
 * 
 */

#line 209 "root_numpy/src/tree.pyx"
  this->nptypecode = __pyx_v_nptypecode;

  /* "root_numpy/src/tree.pyx":210
 *         this.size = size
 *         this.nptypecode = nptypecode
 *         this.nptype = nptype             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 210 "root_numpy/src/tree.pyx"
  this->nptype = __pyx_v_nptype;

  /* "root_numpy/src/tree.pyx":207
 *     string nptype
 * 
 *     __init__(int size, string nptype, int nptypecode):             # <<<<<<<<<<<<<<
 *         this.size = size
 *         this.nptypecode = nptypecode
 */

#line 207 "root_numpy/src/tree.pyx"


#line 207 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 207 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 207 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":212
 *         this.nptype = nptype
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)
 */

#line 212 "root_numpy/src/tree.pyx"


#line 212 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_BasicConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  void *__pyx_v_src
#line 212 "root_numpy/src/tree.pyx"
;

#line 212 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 212 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":213
 * 
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         memcpy(buffer, src, this.size)
 *         return this.size
 */

#line 213 "root_numpy/src/tree.pyx"
  __pyx_v_src = __pyx_v_col->GetValuePointer();

  /* "root_numpy/src/tree.pyx":214
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)             # <<<<<<<<<<<<<<
 *         return this.size
 * 
 */

#line 214 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_buffer, __pyx_v_src, this->size);

  /* "root_numpy/src/tree.pyx":215
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)
 *         return this.size             # <<<<<<<<<<<<<<
 * 
 *     object get_nptype():
 */

#line 215 "root_numpy/src/tree.pyx"
  __pyx_r = this->size;

#line 215 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":212
 *         this.nptype = nptype
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         memcpy(buffer, src, this.size)
 */

#line 212 "root_numpy/src/tree.pyx"


#line 212 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 212 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 212 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 212 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 212 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":217
 *         return this.size
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.dtype(this.nptype)
 * 
 */

#line 217 "root_numpy/src/tree.pyx"


#line 217 "root_numpy/src/tree.pyx"
PyObject *__pyx_t_13_librootnumpy_BasicConverter::get_nptype(void) {

#line 217 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 217 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "root_numpy/src/tree.pyx":218
 * 
 *     object get_nptype():
 *         return np.dtype(this.nptype)             # <<<<<<<<<<<<<<
 * 
 *     int get_nptypecode():
 */

#line 218 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 218 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__string(this->nptype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 218 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 218 "root_numpy/src/tree.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 218 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 218 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 218 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 218 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

#line 218 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 218 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 218 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 218 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_1;

#line 218 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

#line 218 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":217
 *         return this.size
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.dtype(this.nptype)
 * 
 */

#line 217 "root_numpy/src/tree.pyx"


#line 217 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 217 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 217 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 217 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 217 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("BasicConverter.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 217 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 217 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 217 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 217 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 217 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 217 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":220
 *         return np.dtype(this.nptype)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.nptypecode
 * 
 */

#line 220 "root_numpy/src/tree.pyx"


#line 220 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_BasicConverter::get_nptypecode(void) {

#line 220 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 220 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "root_numpy/src/tree.pyx":221
 * 
 *     int get_nptypecode():
 *         return this.nptypecode             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 221 "root_numpy/src/tree.pyx"
  __pyx_r = this->nptypecode;

#line 221 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":220
 *         return np.dtype(this.nptype)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.nptypecode
 * 
 */

#line 220 "root_numpy/src/tree.pyx"


#line 220 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 220 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 220 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 220 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 220 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":225
 * 
 * cdef cppclass ObjectConverterBase(Converter):
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.object
 * 
 */

#line 225 "root_numpy/src/tree.pyx"


#line 225 "root_numpy/src/tree.pyx"
PyObject *__pyx_t_13_librootnumpy_ObjectConverterBase::get_nptype(void) {

#line 225 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 225 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "root_numpy/src/tree.pyx":226
 * cdef cppclass ObjectConverterBase(Converter):
 *     object get_nptype():
 *         return np.object             # <<<<<<<<<<<<<<
 * 
 *     object get_nptypecode():
 */

#line 226 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 226 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 226 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 226 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_object); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 226 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 226 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 226 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_2;

#line 226 "root_numpy/src/tree.pyx"
  __pyx_t_2 = 0;

#line 226 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":225
 * 
 * cdef cppclass ObjectConverterBase(Converter):
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return np.object
 * 
 */

#line 225 "root_numpy/src/tree.pyx"


#line 225 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 225 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 225 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 225 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 225 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("ObjectConverterBase.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 225 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 225 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 225 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 225 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 225 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 225 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":228
 *         return np.object
 * 
 *     object get_nptypecode():             # <<<<<<<<<<<<<<
 *         return np.NPY_OBJECT
 * 
 */

#line 228 "root_numpy/src/tree.pyx"


#line 228 "root_numpy/src/tree.pyx"
PyObject *__pyx_t_13_librootnumpy_ObjectConverterBase::get_nptypecode(void) {

#line 228 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 228 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "root_numpy/src/tree.pyx":229
 * 
 *     object get_nptypecode():
 *         return np.NPY_OBJECT             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 229 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 229 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 229 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 229 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_1;

#line 229 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

#line 229 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":228
 *         return np.object
 * 
 *     object get_nptypecode():             # <<<<<<<<<<<<<<
 *         return np.NPY_OBJECT
 * 
 */

#line 228 "root_numpy/src/tree.pyx"


#line 228 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 228 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 228 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 228 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("ObjectConverterBase.get_nptypecode", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 228 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 228 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 228 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 228 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 228 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 228 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":237
 *     int elesize
 * 
 *     __init__(BasicConverter* conv):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.typecode = conv.get_nptypecode()
 */

#line 237 "root_numpy/src/tree.pyx"


#line 237 "root_numpy/src/tree.pyx"
 __pyx_t_13_librootnumpy_VaryArrayConverter::__pyx_t_13_librootnumpy_VaryArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *__pyx_v_conv) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 237 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/tree.pyx":238
 * 
 *     __init__(BasicConverter* conv):
 *         this.conv = conv             # <<<<<<<<<<<<<<
 *         this.typecode = conv.get_nptypecode()
 *         this.elesize = conv.size
 */

#line 238 "root_numpy/src/tree.pyx"
  this->conv = __pyx_v_conv;

  /* "root_numpy/src/tree.pyx":239
 *     __init__(BasicConverter* conv):
 *         this.conv = conv
 *         this.typecode = conv.get_nptypecode()             # <<<<<<<<<<<<<<
 *         this.elesize = conv.size
 * 
 */

#line 239 "root_numpy/src/tree.pyx"
  this->typecode = __pyx_v_conv->get_nptypecode();

  /* "root_numpy/src/tree.pyx":240
 *         this.conv = conv
 *         this.typecode = conv.get_nptypecode()
 *         this.elesize = conv.size             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 240 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __pyx_v_conv->size;

#line 240 "root_numpy/src/tree.pyx"
  this->elesize = __pyx_t_1;

  /* "root_numpy/src/tree.pyx":237
 *     int elesize
 * 
 *     __init__(BasicConverter* conv):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.typecode = conv.get_nptypecode()
 */

#line 237 "root_numpy/src/tree.pyx"


#line 237 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 237 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 237 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":242
 *         this.elesize = conv.size
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef int numele = col.GetLen()
 *         cdef void* src = col.GetValuePointer()
 */

#line 242 "root_numpy/src/tree.pyx"


#line 242 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_VaryArrayConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  int __pyx_v_numele
#line 242 "root_numpy/src/tree.pyx"
;
  void *__pyx_v_src
#line 242 "root_numpy/src/tree.pyx"
;

#line 242 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 242 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":243
 * 
 *     int write(Column* col, void* buffer):
 *         cdef int numele = col.GetLen()             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         return create_numpyarray(buffer, src, this.typecode, numele, this.elesize)
 */

#line 243 "root_numpy/src/tree.pyx"
  __pyx_v_numele = __pyx_v_col->GetLen();

  /* "root_numpy/src/tree.pyx":244
 *     int write(Column* col, void* buffer):
 *         cdef int numele = col.GetLen()
 *         cdef void* src = col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         return create_numpyarray(buffer, src, this.typecode, numele, this.elesize)
 * 
 */

#line 244 "root_numpy/src/tree.pyx"
  __pyx_v_src = __pyx_v_col->GetValuePointer();

  /* "root_numpy/src/tree.pyx":245
 *         cdef int numele = col.GetLen()
 *         cdef void* src = col.GetValuePointer()
 *         return create_numpyarray(buffer, src, this.typecode, numele, this.elesize)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 245 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray(__pyx_v_buffer, __pyx_v_src, this->typecode, __pyx_v_numele, this->elesize);

#line 245 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":242
 *         this.elesize = conv.size
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef int numele = col.GetLen()
 *         cdef void* src = col.GetValuePointer()
 */

#line 242 "root_numpy/src/tree.pyx"


#line 242 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 242 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 242 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 242 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 242 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":252
 *     int L # numele
 * 
 *     __init__(BasicConverter* conv, int L):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.L = L
 */

#line 252 "root_numpy/src/tree.pyx"


#line 252 "root_numpy/src/tree.pyx"
 __pyx_t_13_librootnumpy_FixedArrayConverter::__pyx_t_13_librootnumpy_FixedArrayConverter(__pyx_t_13_librootnumpy_BasicConverter *__pyx_v_conv, int __pyx_v_L) {
  __Pyx_RefNannyDeclarations

#line 252 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/tree.pyx":253
 * 
 *     __init__(BasicConverter* conv, int L):
 *         this.conv = conv             # <<<<<<<<<<<<<<
 *         this.L = L
 * 
 */

#line 253 "root_numpy/src/tree.pyx"
  this->conv = __pyx_v_conv;

  /* "root_numpy/src/tree.pyx":254
 *     __init__(BasicConverter* conv, int L):
 *         this.conv = conv
 *         this.L = L             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 254 "root_numpy/src/tree.pyx"
  this->L = __pyx_v_L;

  /* "root_numpy/src/tree.pyx":252
 *     int L # numele
 * 
 *     __init__(BasicConverter* conv, int L):             # <<<<<<<<<<<<<<
 *         this.conv = conv
 *         this.L = L
 */

#line 252 "root_numpy/src/tree.pyx"


#line 252 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 252 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 252 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":256
 *         this.L = L
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         cdef int nbytes = col.GetSize()
 */

#line 256 "root_numpy/src/tree.pyx"


#line 256 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_FixedArrayConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  void *__pyx_v_src
#line 256 "root_numpy/src/tree.pyx"
;
  int __pyx_v_nbytes
#line 256 "root_numpy/src/tree.pyx"
;

#line 256 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 256 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":257
 * 
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, src, nbytes)
 */

#line 257 "root_numpy/src/tree.pyx"
  __pyx_v_src = __pyx_v_col->GetValuePointer();

  /* "root_numpy/src/tree.pyx":258
 *     int write(Column* col, void* buffer):
 *         cdef void* src = col.GetValuePointer()
 *         cdef int nbytes = col.GetSize()             # <<<<<<<<<<<<<<
 *         memcpy(buffer, src, nbytes)
 *         return nbytes
 */

#line 258 "root_numpy/src/tree.pyx"
  __pyx_v_nbytes = __pyx_v_col->GetSize();

  /* "root_numpy/src/tree.pyx":259
 *         cdef void* src = col.GetValuePointer()
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, src, nbytes)             # <<<<<<<<<<<<<<
 *         return nbytes
 * 
 */

#line 259 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_buffer, __pyx_v_src, __pyx_v_nbytes);

  /* "root_numpy/src/tree.pyx":260
 *         cdef int nbytes = col.GetSize()
 *         memcpy(buffer, src, nbytes)
 *         return nbytes             # <<<<<<<<<<<<<<
 * 
 *     object get_nptype():
 */

#line 260 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_nbytes;

#line 260 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":256
 *         this.L = L
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef void* src = col.GetValuePointer()
 *         cdef int nbytes = col.GetSize()
 */

#line 256 "root_numpy/src/tree.pyx"


#line 256 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 256 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 256 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 256 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 256 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":262
 *         return nbytes
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return (np.dtype(this.conv.nptype), this.L)
 * 
 */

#line 262 "root_numpy/src/tree.pyx"


#line 262 "root_numpy/src/tree.pyx"
PyObject *__pyx_t_13_librootnumpy_FixedArrayConverter::get_nptype(void) {

#line 262 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 262 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("get_nptype", 0);

  /* "root_numpy/src/tree.pyx":263
 * 
 *     object get_nptype():
 *         return (np.dtype(this.conv.nptype), this.L)             # <<<<<<<<<<<<<<
 * 
 *     int get_nptypecode():
 */

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 263 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__string(this->conv->nptype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 263 "root_numpy/src/tree.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 263 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 263 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

#line 263 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 263 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(this->L); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 263 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 263 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 263 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);

#line 263 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 263 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

#line 263 "root_numpy/src/tree.pyx"
  __pyx_t_2 = 0;

#line 263 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_3;

#line 263 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

#line 263 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":262
 *         return nbytes
 * 
 *     object get_nptype():             # <<<<<<<<<<<<<<
 *         return (np.dtype(this.conv.nptype), this.L)
 * 
 */

#line 262 "root_numpy/src/tree.pyx"


#line 262 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 262 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 262 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 262 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 262 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 262 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("FixedArrayConverter.get_nptype", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 262 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 262 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 262 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 262 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 262 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 262 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":265
 *         return (np.dtype(this.conv.nptype), this.L)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.conv.nptypecode
 * 
 */

#line 265 "root_numpy/src/tree.pyx"


#line 265 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_FixedArrayConverter::get_nptypecode(void) {

#line 265 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 265 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("get_nptypecode", 0);

  /* "root_numpy/src/tree.pyx":266
 * 
 *     int get_nptypecode():
 *         return this.conv.nptypecode             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 266 "root_numpy/src/tree.pyx"
  __pyx_r = this->conv->nptypecode;

#line 266 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":265
 *         return (np.dtype(this.conv.nptype), this.L)
 * 
 *     int get_nptypecode():             # <<<<<<<<<<<<<<
 *         return this.conv.nptypecode
 * 
 */

#line 265 "root_numpy/src/tree.pyx"


#line 265 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 265 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 265 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 265 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 265 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":274
 *     Vector2Array[T] v2a
 * 
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

#line 274 "root_numpy/src/tree.pyx"


#line 274 "root_numpy/src/tree.pyx"
template <typename T>

#line 274 "root_numpy/src/tree.pyx"
 __pyx_t_13_librootnumpy_VectorConverter<T> ::__pyx_t_13_librootnumpy_VectorConverter(void) {
  TypeName<T>  __pyx_v_ast
#line 274 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_info = NULL
#line 274 "root_numpy/src/tree.pyx"
;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 274 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/tree.pyx":275
 * 
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()             # <<<<<<<<<<<<<<
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 */

#line 275 "root_numpy/src/tree.pyx"
  __pyx_v_ast = TypeName<T> ();

  /* "root_numpy/src/tree.pyx":276
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]             # <<<<<<<<<<<<<<
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 */

#line 276 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 276 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_ast.name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 276 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 276 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 276 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 276 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 276 "root_numpy/src/tree.pyx"
  __pyx_v_info = __pyx_t_3;

#line 276 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/tree.pyx":277
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize             # <<<<<<<<<<<<<<
 *         this.nptypecode = info[2]
 * 
 */

#line 277 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_info, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 277 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 277 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 277 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 277 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 277 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 277 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 277 "root_numpy/src/tree.pyx"
  this->elesize = __pyx_t_4;

  /* "root_numpy/src/tree.pyx":278
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 278 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_info, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 278 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 278 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 278; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 278 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 278 "root_numpy/src/tree.pyx"
  this->nptypecode = __pyx_t_4;

  /* "root_numpy/src/tree.pyx":274
 *     Vector2Array[T] v2a
 * 
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

#line 274 "root_numpy/src/tree.pyx"


#line 274 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 274 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

#line 274 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 274 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 274 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 274 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 274 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("VectorConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 274 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 274 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_info);

#line 274 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 274 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":280
 *         this.nptypecode = info[2]
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 *         cdef unsigned long numele = tmp.size()
 */

#line 280 "root_numpy/src/tree.pyx"


#line 280 "root_numpy/src/tree.pyx"
template <typename T>

#line 280 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_VectorConverter<T> ::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<T>  *__pyx_v_tmp
#line 280 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_numele
#line 280 "root_numpy/src/tree.pyx"
;
  T *__pyx_v_fa
#line 280 "root_numpy/src/tree.pyx"
;

#line 280 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 280 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":281
 * 
 *     int write(Column* col, void* buffer):
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         cdef unsigned long numele = tmp.size()
 *         # check cython auto-generated code
 */

#line 281 "root_numpy/src/tree.pyx"
  __pyx_v_tmp = ((std::vector<T>  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/tree.pyx":282
 *     int write(Column* col, void* buffer):
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 *         cdef unsigned long numele = tmp.size()             # <<<<<<<<<<<<<<
 *         # check cython auto-generated code
 *         # if it really does &((*tmp)[0])
 */

#line 282 "root_numpy/src/tree.pyx"
  __pyx_v_numele = __pyx_v_tmp->size();

  /* "root_numpy/src/tree.pyx":285
 *         # check cython auto-generated code
 *         # if it really does &((*tmp)[0])
 *         cdef T* fa = this.v2a.convert(tmp)             # <<<<<<<<<<<<<<
 *         return create_numpyarray(buffer, fa, this.nptypecode, numele, this.elesize)
 * 
 */

#line 285 "root_numpy/src/tree.pyx"
  __pyx_v_fa = this->v2a.convert(__pyx_v_tmp);

  /* "root_numpy/src/tree.pyx":286
 *         # if it really does &((*tmp)[0])
 *         cdef T* fa = this.v2a.convert(tmp)
 *         return create_numpyarray(buffer, fa, this.nptypecode, numele, this.elesize)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 286 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray(__pyx_v_buffer, __pyx_v_fa, this->nptypecode, __pyx_v_numele, this->elesize);

#line 286 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":280
 *         this.nptypecode = info[2]
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[T]* tmp = <vector[T]*> col.GetValuePointer()
 *         cdef unsigned long numele = tmp.size()
 */

#line 280 "root_numpy/src/tree.pyx"


#line 280 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 280 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 280 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 280 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 280 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":294
 *     Vector2Array[T] v2a
 * 
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

#line 294 "root_numpy/src/tree.pyx"


#line 294 "root_numpy/src/tree.pyx"
template <typename T>

#line 294 "root_numpy/src/tree.pyx"
 __pyx_t_13_librootnumpy_VectorVectorConverter<T> ::__pyx_t_13_librootnumpy_VectorVectorConverter(void) {
  TypeName<T>  __pyx_v_ast
#line 294 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_info = NULL
#line 294 "root_numpy/src/tree.pyx"
;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 294 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/tree.pyx":295
 * 
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()             # <<<<<<<<<<<<<<
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 */

#line 295 "root_numpy/src/tree.pyx"
  __pyx_v_ast = TypeName<T> ();

  /* "root_numpy/src/tree.pyx":296
 *     __init__():
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]             # <<<<<<<<<<<<<<
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]
 */

#line 296 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 296 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 296 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_ast.name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 296 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 296 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 296 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 296 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 296 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 296 "root_numpy/src/tree.pyx"
  __pyx_v_info = __pyx_t_3;

#line 296 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/tree.pyx":297
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize             # <<<<<<<<<<<<<<
 *         this.nptypecode = info[2]
 * 
 */

#line 297 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_info, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 297 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 297 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 297 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 297 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 297 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 297 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 297 "root_numpy/src/tree.pyx"
  this->elesize = __pyx_t_4;

  /* "root_numpy/src/tree.pyx":298
 *         info = TYPES[ast.name]
 *         this.elesize = info[1].itemsize
 *         this.nptypecode = info[2]             # <<<<<<<<<<<<<<
 * 
 *     int write(Column* col, void* buffer):
 */

#line 298 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_info, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 298 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 298 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 298 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 298 "root_numpy/src/tree.pyx"
  this->nptypecode = __pyx_t_4;

  /* "root_numpy/src/tree.pyx":294
 *     Vector2Array[T] v2a
 * 
 *     __init__():             # <<<<<<<<<<<<<<
 *         cdef TypeName[T] ast = TypeName[T]()
 *         info = TYPES[ast.name]
 */

#line 294 "root_numpy/src/tree.pyx"


#line 294 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 294 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

#line 294 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 294 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 294 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 294 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 294 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("VectorVectorConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 294 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 294 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_info);

#line 294 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 294 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":300
 *         this.nptypecode = info[2]
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 300 "root_numpy/src/tree.pyx"


#line 300 "root_numpy/src/tree.pyx"
template <typename T>

#line 300 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_VectorVectorConverter<T> ::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<std::vector<T> >  *__pyx_v_tmp
#line 300 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_numele
#line 300 "root_numpy/src/tree.pyx"
;
  T *__pyx_v_fa
#line 300 "root_numpy/src/tree.pyx"
;
  int __pyx_v_objsize
#line 300 "root_numpy/src/tree.pyx"
;
  int __pyx_v_objtypecode
#line 300 "root_numpy/src/tree.pyx"
;
  npy_intp __pyx_v_dims[1]
#line 300 "root_numpy/src/tree.pyx"
;
  PyArrayObject *__pyx_v_outer = 0
#line 300 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_outerobj
#line 300 "root_numpy/src/tree.pyx"
;
  char *__pyx_v_dataptr
#line 300 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_i
#line 300 "root_numpy/src/tree.pyx"
;

#line 300 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  unsigned long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 300 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":301
 * 
 *     int write(Column* col, void* buffer):
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         # this will hold number of subvectors
 *         cdef unsigned long numele
 */

#line 301 "root_numpy/src/tree.pyx"
  __pyx_v_tmp = ((std::vector<std::vector<T> >  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/tree.pyx":306
 *         cdef T* fa
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 306 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 306 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 306 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((PyArray_Descr *)__pyx_t_1)->elsize;

#line 306 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 306 "root_numpy/src/tree.pyx"
  __pyx_v_objsize = __pyx_t_2;

  /* "root_numpy/src/tree.pyx":307
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT             # <<<<<<<<<<<<<<
 *         numele = tmp[0].size()
 *         # create an outer array container that dataptr points to,
 */

#line 307 "root_numpy/src/tree.pyx"
  __pyx_v_objtypecode = NPY_OBJECT;

  /* "root_numpy/src/tree.pyx":308
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()             # <<<<<<<<<<<<<<
 *         # create an outer array container that dataptr points to,
 *         # containing pointers from create_numpyarray().
 */

#line 308 "root_numpy/src/tree.pyx"
  __pyx_v_numele = (__pyx_v_tmp[0]).size();

  /* "root_numpy/src/tree.pyx":313
 *         # define an (numele)-dimensional outer array to hold our subvectors fa
 *         cdef np.npy_intp dims[1]
 *         dims[0] = numele             # <<<<<<<<<<<<<<
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 */

#line 313 "root_numpy/src/tree.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/tree.pyx":314
 *         cdef np.npy_intp dims[1]
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)             # <<<<<<<<<<<<<<
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 */

#line 314 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, __pyx_v_objtypecode, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 314 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 314 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 314 "root_numpy/src/tree.pyx"
  __pyx_v_outer = ((PyArrayObject *)__pyx_t_1);

#line 314 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":315
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref             # <<<<<<<<<<<<<<
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)
 */

#line 315 "root_numpy/src/tree.pyx"
  __pyx_v_outerobj = ((PyObject *)__pyx_v_outer);

  /* "root_numpy/src/tree.pyx":317
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)             # <<<<<<<<<<<<<<
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))
 */

#line 317 "root_numpy/src/tree.pyx"
  Py_INCREF(((PyObject *)__pyx_v_outer));

  /* "root_numpy/src/tree.pyx":319
 *         Py_INCREF(outer)
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 */

#line 319 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_outerobj), (sizeof(PyObject *)));

  /* "root_numpy/src/tree.pyx":322
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 *         cdef char* dataptr = <char*> outer.data             # <<<<<<<<<<<<<<
 *         # loop through all subvectors
 *         cdef unsigned long i
 */

#line 322 "root_numpy/src/tree.pyx"
  __pyx_v_dataptr = ((char *)__pyx_v_outer->data);

  /* "root_numpy/src/tree.pyx":325
 *         # loop through all subvectors
 *         cdef unsigned long i
 *         for i in range(numele):             # <<<<<<<<<<<<<<
 *             fa = this.v2a.convert(&tmp[0][i])
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode,
 */

#line 325 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __pyx_v_numele;

#line 325 "root_numpy/src/tree.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 325 "root_numpy/src/tree.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "root_numpy/src/tree.pyx":326
 *         cdef unsigned long i
 *         for i in range(numele):
 *             fa = this.v2a.convert(&tmp[0][i])             # <<<<<<<<<<<<<<
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode,
 *                               tmp[0][i].size(), this.elesize)
 */

#line 326 "root_numpy/src/tree.pyx"
    __pyx_v_fa = this->v2a.convert((&((__pyx_v_tmp[0])[__pyx_v_i])));

    /* "root_numpy/src/tree.pyx":327
 *         for i in range(numele):
 *             fa = this.v2a.convert(&tmp[0][i])
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode,             # <<<<<<<<<<<<<<
 *                               tmp[0][i].size(), this.elesize)
 *         return sizeof(outerobj)
 */

#line 327 "root_numpy/src/tree.pyx"
    __pyx_f_13_librootnumpy_create_numpyarray((&(__pyx_v_dataptr[(__pyx_v_i * __pyx_v_objsize)])), __pyx_v_fa, this->nptypecode, ((__pyx_v_tmp[0])[__pyx_v_i]).size(), this->elesize);

#line 327 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":329
 *             create_numpyarray(&dataptr[i*objsize], fa, this.nptypecode,
 *                               tmp[0][i].size(), this.elesize)
 *         return sizeof(outerobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 329 "root_numpy/src/tree.pyx"
  __pyx_r = (sizeof(__pyx_v_outerobj));

#line 329 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":300
 *         this.nptypecode = info[2]
 * 
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[T]]* tmp = <vector[vector[T]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 300 "root_numpy/src/tree.pyx"


#line 300 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 300 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 300 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 300 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("VectorVectorConverter.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 300 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 300 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 300 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_outer);

#line 300 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 300 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 300 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":334
 * cdef cppclass VectorBoolConverter(ObjectConverterBase):
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()
 *         return create_numpyarray_vectorbool(buffer, tmp)
 */

#line 334 "root_numpy/src/tree.pyx"


#line 334 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_VectorBoolConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<bool>  *__pyx_v_tmp
#line 334 "root_numpy/src/tree.pyx"
;

#line 334 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 334 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":335
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         return create_numpyarray_vectorbool(buffer, tmp)
 * 
 */

#line 335 "root_numpy/src/tree.pyx"
  __pyx_v_tmp = ((std::vector<bool>  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/tree.pyx":336
 *     int write(Column* col, void* buffer):
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()
 *         return create_numpyarray_vectorbool(buffer, tmp)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 336 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray_vectorbool(__pyx_v_buffer, __pyx_v_tmp);

#line 336 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":334
 * cdef cppclass VectorBoolConverter(ObjectConverterBase):
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[bool]* tmp = <vector[bool]*> col.GetValuePointer()
 *         return create_numpyarray_vectorbool(buffer, tmp)
 */

#line 334 "root_numpy/src/tree.pyx"


#line 334 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 334 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 334 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 334 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 334 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":341
 * cdef cppclass VectorVectorBoolConverter(ObjectConverterBase):
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[bool]]* tmp = <vector[vector[bool]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 341 "root_numpy/src/tree.pyx"


#line 341 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_VectorVectorBoolConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<std::vector<bool> >  *__pyx_v_tmp
#line 341 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_numele
#line 341 "root_numpy/src/tree.pyx"
;
  int __pyx_v_objsize
#line 341 "root_numpy/src/tree.pyx"
;
  int __pyx_v_objtypecode
#line 341 "root_numpy/src/tree.pyx"
;
  npy_intp __pyx_v_dims[1]
#line 341 "root_numpy/src/tree.pyx"
;
  PyArrayObject *__pyx_v_outer = 0
#line 341 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_outerobj
#line 341 "root_numpy/src/tree.pyx"
;
  char *__pyx_v_dataptr
#line 341 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_i
#line 341 "root_numpy/src/tree.pyx"
;

#line 341 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  unsigned long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 341 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":342
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):
 *         cdef vector[vector[bool]]* tmp = <vector[vector[bool]]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         # this will hold number of subvectors
 *         cdef unsigned long numele
 */

#line 342 "root_numpy/src/tree.pyx"
  __pyx_v_tmp = ((std::vector<std::vector<bool> >  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/tree.pyx":346
 *         cdef unsigned long numele
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 346 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 346 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 346 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((PyArray_Descr *)__pyx_t_1)->elsize;

#line 346 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 346 "root_numpy/src/tree.pyx"
  __pyx_v_objsize = __pyx_t_2;

  /* "root_numpy/src/tree.pyx":347
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT             # <<<<<<<<<<<<<<
 *         numele = tmp[0].size()
 *         # create an outer array container that dataptr points to,
 */

#line 347 "root_numpy/src/tree.pyx"
  __pyx_v_objtypecode = NPY_OBJECT;

  /* "root_numpy/src/tree.pyx":348
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()             # <<<<<<<<<<<<<<
 *         # create an outer array container that dataptr points to,
 *         # containing pointers from create_numpyarray().
 */

#line 348 "root_numpy/src/tree.pyx"
  __pyx_v_numele = (__pyx_v_tmp[0]).size();

  /* "root_numpy/src/tree.pyx":353
 *         # define an (numele)-dimensional outer array to hold our subvectors fa
 *         cdef np.npy_intp dims[1]
 *         dims[0] = numele             # <<<<<<<<<<<<<<
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 */

#line 353 "root_numpy/src/tree.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/tree.pyx":354
 *         cdef np.npy_intp dims[1]
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)             # <<<<<<<<<<<<<<
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 */

#line 354 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, __pyx_v_objtypecode, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 354 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 354 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 354 "root_numpy/src/tree.pyx"
  __pyx_v_outer = ((PyArrayObject *)__pyx_t_1);

#line 354 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":355
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref             # <<<<<<<<<<<<<<
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)
 */

#line 355 "root_numpy/src/tree.pyx"
  __pyx_v_outerobj = ((PyObject *)__pyx_v_outer);

  /* "root_numpy/src/tree.pyx":357
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)             # <<<<<<<<<<<<<<
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))
 */

#line 357 "root_numpy/src/tree.pyx"
  Py_INCREF(((PyObject *)__pyx_v_outer));

  /* "root_numpy/src/tree.pyx":359
 *         Py_INCREF(outer)
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 */

#line 359 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_outerobj), (sizeof(PyObject *)));

  /* "root_numpy/src/tree.pyx":362
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 *         cdef char* dataptr = <char*> outer.data             # <<<<<<<<<<<<<<
 *         # loop through all subvectors
 *         cdef unsigned long i
 */

#line 362 "root_numpy/src/tree.pyx"
  __pyx_v_dataptr = ((char *)__pyx_v_outer->data);

  /* "root_numpy/src/tree.pyx":365
 *         # loop through all subvectors
 *         cdef unsigned long i
 *         for i in range(numele):             # <<<<<<<<<<<<<<
 *             create_numpyarray_vectorbool(&dataptr[i*objsize], &tmp[0][i])
 *         return sizeof(outerobj)
 */

#line 365 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __pyx_v_numele;

#line 365 "root_numpy/src/tree.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 365 "root_numpy/src/tree.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "root_numpy/src/tree.pyx":366
 *         cdef unsigned long i
 *         for i in range(numele):
 *             create_numpyarray_vectorbool(&dataptr[i*objsize], &tmp[0][i])             # <<<<<<<<<<<<<<
 *         return sizeof(outerobj)
 * 
 */

#line 366 "root_numpy/src/tree.pyx"
    __pyx_f_13_librootnumpy_create_numpyarray_vectorbool((&(__pyx_v_dataptr[(__pyx_v_i * __pyx_v_objsize)])), (&((__pyx_v_tmp[0])[__pyx_v_i])));

#line 366 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":367
 *         for i in range(numele):
 *             create_numpyarray_vectorbool(&dataptr[i*objsize], &tmp[0][i])
 *         return sizeof(outerobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 367 "root_numpy/src/tree.pyx"
  __pyx_r = (sizeof(__pyx_v_outerobj));

#line 367 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":341
 * cdef cppclass VectorVectorBoolConverter(ObjectConverterBase):
 *     # Requires special treament since vector<bool> stores contents as bits...
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[bool]]* tmp = <vector[vector[bool]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 341 "root_numpy/src/tree.pyx"


#line 341 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 341 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 341 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 341 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("VectorVectorBoolConverter.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 341 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 341 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 341 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_outer);

#line 341 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 341 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 341 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":371
 * 
 * cdef cppclass StringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef string* s = <string*> col.GetValuePointer()
 *         py_bytes = str(s[0])
 */

#line 371 "root_numpy/src/tree.pyx"


#line 371 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_StringConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::string *__pyx_v_s
#line 371 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_py_bytes = NULL
#line 371 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tmpobj
#line 371 "root_numpy/src/tree.pyx"
;

#line 371 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 371 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":372
 * cdef cppclass StringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):
 *         cdef string* s = <string*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         py_bytes = str(s[0])
 *         cdef PyObject* tmpobj = <PyObject*> py_bytes # borrow ref
 */

#line 372 "root_numpy/src/tree.pyx"
  __pyx_v_s = ((std::string *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/tree.pyx":373
 *     int write(Column* col, void* buffer):
 *         cdef string* s = <string*> col.GetValuePointer()
 *         py_bytes = str(s[0])             # <<<<<<<<<<<<<<
 *         cdef PyObject* tmpobj = <PyObject*> py_bytes # borrow ref
 *         # increase one since we are putting in buffer directly
 */

#line 373 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__string((__pyx_v_s[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 373 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 373 "root_numpy/src/tree.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 373 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 373 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);

#line 373 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 373 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

#line 373 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 373 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 373 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 373 "root_numpy/src/tree.pyx"
  __pyx_v_py_bytes = __pyx_t_1;

#line 373 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":374
 *         cdef string* s = <string*> col.GetValuePointer()
 *         py_bytes = str(s[0])
 *         cdef PyObject* tmpobj = <PyObject*> py_bytes # borrow ref             # <<<<<<<<<<<<<<
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(py_bytes)
 */

#line 374 "root_numpy/src/tree.pyx"
  __pyx_v_tmpobj = ((PyObject *)__pyx_v_py_bytes);

  /* "root_numpy/src/tree.pyx":376
 *         cdef PyObject* tmpobj = <PyObject*> py_bytes # borrow ref
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(py_bytes)             # <<<<<<<<<<<<<<
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &tmpobj, sizeof(PyObject*))
 */

#line 376 "root_numpy/src/tree.pyx"
  Py_INCREF(__pyx_v_py_bytes);

  /* "root_numpy/src/tree.pyx":378
 *         Py_INCREF(py_bytes)
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &tmpobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *         return sizeof(tmpobj)
 * 
 */

#line 378 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_tmpobj), (sizeof(PyObject *)));

  /* "root_numpy/src/tree.pyx":379
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &tmpobj, sizeof(PyObject*))
 *         return sizeof(tmpobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 379 "root_numpy/src/tree.pyx"
  __pyx_r = (sizeof(__pyx_v_tmpobj));

#line 379 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":371
 * 
 * cdef cppclass StringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef string* s = <string*> col.GetValuePointer()
 *         py_bytes = str(s[0])
 */

#line 371 "root_numpy/src/tree.pyx"


#line 371 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 371 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 371 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 371 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 371 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("StringConverter.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 371 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 371 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 371 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_py_bytes);

#line 371 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 371 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 371 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":383
 * 
 * cdef cppclass VectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[string]* tmp = <vector[string]*> col.GetValuePointer()
 *         return create_numpyarray_vectorstring(buffer, tmp)
 */

#line 383 "root_numpy/src/tree.pyx"


#line 383 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_VectorStringConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<std::string>  *__pyx_v_tmp
#line 383 "root_numpy/src/tree.pyx"
;

#line 383 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations

#line 383 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":384
 * cdef cppclass VectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):
 *         cdef vector[string]* tmp = <vector[string]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         return create_numpyarray_vectorstring(buffer, tmp)
 * 
 */

#line 384 "root_numpy/src/tree.pyx"
  __pyx_v_tmp = ((std::vector<std::string>  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/tree.pyx":385
 *     int write(Column* col, void* buffer):
 *         cdef vector[string]* tmp = <vector[string]*> col.GetValuePointer()
 *         return create_numpyarray_vectorstring(buffer, tmp)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 385 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_f_13_librootnumpy_create_numpyarray_vectorstring(__pyx_v_buffer, __pyx_v_tmp);

#line 385 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":383
 * 
 * cdef cppclass VectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[string]* tmp = <vector[string]*> col.GetValuePointer()
 *         return create_numpyarray_vectorstring(buffer, tmp)
 */

#line 383 "root_numpy/src/tree.pyx"


#line 383 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 383 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 383 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 383 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 383 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":389
 * 
 * cdef cppclass VectorVectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[string]]* tmp = <vector[vector[string]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 389 "root_numpy/src/tree.pyx"


#line 389 "root_numpy/src/tree.pyx"
int __pyx_t_13_librootnumpy_VectorVectorStringConverter::write(Column *__pyx_v_col, void *__pyx_v_buffer) {
  std::vector<std::vector<std::string> >  *__pyx_v_tmp
#line 389 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_numele
#line 389 "root_numpy/src/tree.pyx"
;
  int __pyx_v_objsize
#line 389 "root_numpy/src/tree.pyx"
;
  int __pyx_v_objtypecode
#line 389 "root_numpy/src/tree.pyx"
;
  npy_intp __pyx_v_dims[1]
#line 389 "root_numpy/src/tree.pyx"
;
  PyArrayObject *__pyx_v_outer = 0
#line 389 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_outerobj
#line 389 "root_numpy/src/tree.pyx"
;
  char *__pyx_v_dataptr
#line 389 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_i
#line 389 "root_numpy/src/tree.pyx"
;

#line 389 "root_numpy/src/tree.pyx"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  unsigned long __pyx_t_3;
  unsigned long __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 389 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("write", 0);

  /* "root_numpy/src/tree.pyx":390
 * cdef cppclass VectorVectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):
 *         cdef vector[vector[string]]* tmp = <vector[vector[string]]*> col.GetValuePointer()             # <<<<<<<<<<<<<<
 *         # this will hold number of subvectors
 *         cdef unsigned long numele
 */

#line 390 "root_numpy/src/tree.pyx"
  __pyx_v_tmp = ((std::vector<std::vector<std::string> >  *)__pyx_v_col->GetValuePointer());

  /* "root_numpy/src/tree.pyx":394
 *         cdef unsigned long numele
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 394 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 394 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 394 "root_numpy/src/tree.pyx"
  __pyx_t_2 = ((PyArray_Descr *)__pyx_t_1)->elsize;

#line 394 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 394 "root_numpy/src/tree.pyx"
  __pyx_v_objsize = __pyx_t_2;

  /* "root_numpy/src/tree.pyx":395
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT             # <<<<<<<<<<<<<<
 *         numele = tmp[0].size()
 *         # create an outer array container that dataptr points to,
 */

#line 395 "root_numpy/src/tree.pyx"
  __pyx_v_objtypecode = NPY_OBJECT;

  /* "root_numpy/src/tree.pyx":396
 *         cdef int objsize = np.dtype('O').itemsize
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()             # <<<<<<<<<<<<<<
 *         # create an outer array container that dataptr points to,
 *         # containing pointers from create_numpyarray().
 */

#line 396 "root_numpy/src/tree.pyx"
  __pyx_v_numele = (__pyx_v_tmp[0]).size();

  /* "root_numpy/src/tree.pyx":401
 *         # define an (numele)-dimensional outer array to hold our subvectors fa
 *         cdef np.npy_intp dims[1]
 *         dims[0] = numele             # <<<<<<<<<<<<<<
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 */

#line 401 "root_numpy/src/tree.pyx"
  (__pyx_v_dims[0]) = __pyx_v_numele;

  /* "root_numpy/src/tree.pyx":402
 *         cdef np.npy_intp dims[1]
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)             # <<<<<<<<<<<<<<
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 */

#line 402 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyArray_EMPTY(1, __pyx_v_dims, __pyx_v_objtypecode, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 402 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 402 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 402; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 402 "root_numpy/src/tree.pyx"
  __pyx_v_outer = ((PyArrayObject *)__pyx_t_1);

#line 402 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":403
 *         dims[0] = numele
 *         cdef np.ndarray outer = np.PyArray_EMPTY(1, dims, objtypecode, 0)
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref             # <<<<<<<<<<<<<<
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)
 */

#line 403 "root_numpy/src/tree.pyx"
  __pyx_v_outerobj = ((PyObject *)__pyx_v_outer);

  /* "root_numpy/src/tree.pyx":405
 *         cdef PyObject* outerobj = <PyObject*> outer # borrow ref
 *         # increase one since we are putting in buffer directly
 *         Py_INCREF(outer)             # <<<<<<<<<<<<<<
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))
 */

#line 405 "root_numpy/src/tree.pyx"
  Py_INCREF(((PyObject *)__pyx_v_outer));

  /* "root_numpy/src/tree.pyx":407
 *         Py_INCREF(outer)
 *         # now write PyObject* to buffer
 *         memcpy(buffer, &outerobj, sizeof(PyObject*))             # <<<<<<<<<<<<<<
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 */

#line 407 "root_numpy/src/tree.pyx"
  memcpy(__pyx_v_buffer, (&__pyx_v_outerobj), (sizeof(PyObject *)));

  /* "root_numpy/src/tree.pyx":410
 *         # build a dataptr pointing to outer, so we can shift and write each
 *         # of the subvectors
 *         cdef char* dataptr = <char*> outer.data             # <<<<<<<<<<<<<<
 *         # loop through all subvectors
 *         cdef unsigned long i
 */

#line 410 "root_numpy/src/tree.pyx"
  __pyx_v_dataptr = ((char *)__pyx_v_outer->data);

  /* "root_numpy/src/tree.pyx":413
 *         # loop through all subvectors
 *         cdef unsigned long i
 *         for i in range(numele):             # <<<<<<<<<<<<<<
 *             create_numpyarray_vectorstring(&dataptr[i*objsize], &tmp[0][i])
 *         return sizeof(outerobj)
 */

#line 413 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __pyx_v_numele;

#line 413 "root_numpy/src/tree.pyx"
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {

#line 413 "root_numpy/src/tree.pyx"
    __pyx_v_i = __pyx_t_4;

    /* "root_numpy/src/tree.pyx":414
 *         cdef unsigned long i
 *         for i in range(numele):
 *             create_numpyarray_vectorstring(&dataptr[i*objsize], &tmp[0][i])             # <<<<<<<<<<<<<<
 *         return sizeof(outerobj)
 * 
 */

#line 414 "root_numpy/src/tree.pyx"
    __pyx_f_13_librootnumpy_create_numpyarray_vectorstring((&(__pyx_v_dataptr[(__pyx_v_i * __pyx_v_objsize)])), (&((__pyx_v_tmp[0])[__pyx_v_i])));

#line 414 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":415
 *         for i in range(numele):
 *             create_numpyarray_vectorstring(&dataptr[i*objsize], &tmp[0][i])
 *         return sizeof(outerobj)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 415 "root_numpy/src/tree.pyx"
  __pyx_r = (sizeof(__pyx_v_outerobj));

#line 415 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":389
 * 
 * cdef cppclass VectorVectorStringConverter(ObjectConverterBase):
 *     int write(Column* col, void* buffer):             # <<<<<<<<<<<<<<
 *         cdef vector[vector[string]]* tmp = <vector[vector[string]]*> col.GetValuePointer()
 *         # this will hold number of subvectors
 */

#line 389 "root_numpy/src/tree.pyx"


#line 389 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 389 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 389 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 389 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("VectorVectorStringConverter.write", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 389 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 389 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 389 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_outer);

#line 389 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 389 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 389 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":491
 * 
 * 
 * cdef Converter* find_converter(Column* col):             # <<<<<<<<<<<<<<
 *     cdef ColumnType ct = col.coltype
 *     cdef string typename = string(col.GetTypeName())
 */

#line 491 "root_numpy/src/tree.pyx"


#line 491 "root_numpy/src/tree.pyx"
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter(Column *__pyx_v_col) {
  enum ColumnType __pyx_v_ct
#line 491 "root_numpy/src/tree.pyx"
;
  std::string __pyx_v_typename
#line 491 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_conv
#line 491 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_basic_conv
#line 491 "root_numpy/src/tree.pyx"
;

#line 491 "root_numpy/src/tree.pyx"
  __pyx_t_13_librootnumpy_Converter *__pyx_r;
  __Pyx_RefNannyDeclarations
  enum ColumnType __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  __pyx_t_13_librootnumpy_CONVERTERS_ITEM __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 491 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("find_converter", 0);

  /* "root_numpy/src/tree.pyx":492
 * 
 * cdef Converter* find_converter(Column* col):
 *     cdef ColumnType ct = col.coltype             # <<<<<<<<<<<<<<
 *     cdef string typename = string(col.GetTypeName())
 *     cdef Converter* conv
 */

#line 492 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __pyx_v_col->coltype;

#line 492 "root_numpy/src/tree.pyx"
  __pyx_v_ct = __pyx_t_1;

  /* "root_numpy/src/tree.pyx":493
 * cdef Converter* find_converter(Column* col):
 *     cdef ColumnType ct = col.coltype
 *     cdef string typename = string(col.GetTypeName())             # <<<<<<<<<<<<<<
 *     cdef Converter* conv
 *     cdef Converter* basic_conv
 */

#line 493 "root_numpy/src/tree.pyx"
  try {

#line 493 "root_numpy/src/tree.pyx"
    __pyx_t_2 = std::string(__pyx_v_col->GetTypeName());

#line 493 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 493 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 493 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 493; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 493 "root_numpy/src/tree.pyx"
  }

#line 493 "root_numpy/src/tree.pyx"
  __pyx_v_typename = __pyx_t_2;

  /* "root_numpy/src/tree.pyx":510
 *                 typename + '[fixed]', conv))
 *         return conv
 *     elif ct == VARY:             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(typename + '[vary]')
 *         if conv == NULL:
 */

#line 510 "root_numpy/src/tree.pyx"
  switch (__pyx_v_ct) {

    /* "root_numpy/src/tree.pyx":496
 *     cdef Converter* conv
 *     cdef Converter* basic_conv
 *     if ct == SINGLE:             # <<<<<<<<<<<<<<
 *         return find_converter_by_typename(typename)
 *     elif ct == FIXED:
 */

#line 496 "root_numpy/src/tree.pyx"
    case SINGLE:

    /* "root_numpy/src/tree.pyx":497
 *     cdef Converter* basic_conv
 *     if ct == SINGLE:
 *         return find_converter_by_typename(typename)             # <<<<<<<<<<<<<<
 *     elif ct == FIXED:
 *         conv = find_converter_by_typename(typename + '[fixed]')
 */

#line 497 "root_numpy/src/tree.pyx"
    __pyx_r = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_v_typename);

#line 497 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

#line 497 "root_numpy/src/tree.pyx"
    break;

    /* "root_numpy/src/tree.pyx":498
 *     if ct == SINGLE:
 *         return find_converter_by_typename(typename)
 *     elif ct == FIXED:             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(typename + '[fixed]')
 *         if conv == NULL:
 */

#line 498 "root_numpy/src/tree.pyx"
    case FIXED:

    /* "root_numpy/src/tree.pyx":499
 *         return find_converter_by_typename(typename)
 *     elif ct == FIXED:
 *         conv = find_converter_by_typename(typename + '[fixed]')             # <<<<<<<<<<<<<<
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)
 */

#line 499 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__string(__pyx_v_typename); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 499 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 499 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_fixed); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 499 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 499 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 499 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_convert_string_from_py_std__string(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 499 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 499 "root_numpy/src/tree.pyx"
    __pyx_v_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_t_2);

    /* "root_numpy/src/tree.pyx":500
 *     elif ct == FIXED:
 *         conv = find_converter_by_typename(typename + '[fixed]')
 *         if conv == NULL:             # <<<<<<<<<<<<<<
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:
 */

#line 500 "root_numpy/src/tree.pyx"
    __pyx_t_5 = ((__pyx_v_conv == NULL) != 0);

#line 500 "root_numpy/src/tree.pyx"
    if (__pyx_t_5) {

      /* "root_numpy/src/tree.pyx":501
 *         conv = find_converter_by_typename(typename + '[fixed]')
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)             # <<<<<<<<<<<<<<
 *             if basic_conv == NULL:
 *                 return NULL
 */

#line 501 "root_numpy/src/tree.pyx"
      __pyx_v_basic_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_v_typename);

      /* "root_numpy/src/tree.pyx":502
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:             # <<<<<<<<<<<<<<
 *                 return NULL
 *             conv = new FixedArrayConverter(
 */

#line 502 "root_numpy/src/tree.pyx"
      __pyx_t_5 = ((__pyx_v_basic_conv == NULL) != 0);

#line 502 "root_numpy/src/tree.pyx"
      if (__pyx_t_5) {

        /* "root_numpy/src/tree.pyx":503
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:
 *                 return NULL             # <<<<<<<<<<<<<<
 *             conv = new FixedArrayConverter(
 *                     <BasicConverter*>basic_conv,
 */

#line 503 "root_numpy/src/tree.pyx"
        __pyx_r = NULL;

#line 503 "root_numpy/src/tree.pyx"
        goto __pyx_L0;

#line 503 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":504
 *             if basic_conv == NULL:
 *                 return NULL
 *             conv = new FixedArrayConverter(             # <<<<<<<<<<<<<<
 *                     <BasicConverter*>basic_conv,
 *                     col.countval)
 */

#line 504 "root_numpy/src/tree.pyx"
      __pyx_v_conv = new __pyx_t_13_librootnumpy_FixedArrayConverter(((__pyx_t_13_librootnumpy_BasicConverter *)__pyx_v_basic_conv), __pyx_v_col->countval);

      /* "root_numpy/src/tree.pyx":508
 *                     col.countval)
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 *                 typename + '[fixed]', conv))             # <<<<<<<<<<<<<<
 *         return conv
 *     elif ct == VARY:
 */

#line 508 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __pyx_convert_PyStr_string_to_py_std__string(__pyx_v_typename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 508 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 508 "root_numpy/src/tree.pyx"
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_fixed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 508 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 508 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 508 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __pyx_convert_string_from_py_std__string(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 508 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "root_numpy/src/tree.pyx":507
 *                     <BasicConverter*>basic_conv,
 *                     col.countval)
 *             CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *                 typename + '[fixed]', conv))
 *         return conv
 */

#line 507 "root_numpy/src/tree.pyx"
      try {

#line 507 "root_numpy/src/tree.pyx"
        __pyx_t_6 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_2, __pyx_v_conv);

#line 507 "root_numpy/src/tree.pyx"
      } catch(...) {

#line 507 "root_numpy/src/tree.pyx"
        __Pyx_CppExn2PyErr();

#line 507 "root_numpy/src/tree.pyx"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 507 "root_numpy/src/tree.pyx"
      }

#line 507 "root_numpy/src/tree.pyx"
      __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_6);

#line 507 "root_numpy/src/tree.pyx"
      goto __pyx_L3;

#line 507 "root_numpy/src/tree.pyx"
    }

#line 507 "root_numpy/src/tree.pyx"
    __pyx_L3:;

    /* "root_numpy/src/tree.pyx":509
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 *                 typename + '[fixed]', conv))
 *         return conv             # <<<<<<<<<<<<<<
 *     elif ct == VARY:
 *         conv = find_converter_by_typename(typename + '[vary]')
 */

#line 509 "root_numpy/src/tree.pyx"
    __pyx_r = __pyx_v_conv;

#line 509 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

#line 509 "root_numpy/src/tree.pyx"
    break;

    /* "root_numpy/src/tree.pyx":510
 *                 typename + '[fixed]', conv))
 *         return conv
 *     elif ct == VARY:             # <<<<<<<<<<<<<<
 *         conv = find_converter_by_typename(typename + '[vary]')
 *         if conv == NULL:
 */

#line 510 "root_numpy/src/tree.pyx"
    case VARY:

    /* "root_numpy/src/tree.pyx":511
 *         return conv
 *     elif ct == VARY:
 *         conv = find_converter_by_typename(typename + '[vary]')             # <<<<<<<<<<<<<<
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)
 */

#line 511 "root_numpy/src/tree.pyx"
    __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__string(__pyx_v_typename); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 511 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 511 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_kp_s_vary); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 511 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 511 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 511 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_convert_string_from_py_std__string(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 511 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 511 "root_numpy/src/tree.pyx"
    __pyx_v_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_t_2);

    /* "root_numpy/src/tree.pyx":512
 *     elif ct == VARY:
 *         conv = find_converter_by_typename(typename + '[vary]')
 *         if conv == NULL:             # <<<<<<<<<<<<<<
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:
 */

#line 512 "root_numpy/src/tree.pyx"
    __pyx_t_5 = ((__pyx_v_conv == NULL) != 0);

#line 512 "root_numpy/src/tree.pyx"
    if (__pyx_t_5) {

      /* "root_numpy/src/tree.pyx":513
 *         conv = find_converter_by_typename(typename + '[vary]')
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)             # <<<<<<<<<<<<<<
 *             if basic_conv == NULL:
 *                 return NULL
 */

#line 513 "root_numpy/src/tree.pyx"
      __pyx_v_basic_conv = __pyx_f_13_librootnumpy_find_converter_by_typename(__pyx_v_typename);

      /* "root_numpy/src/tree.pyx":514
 *         if conv == NULL:
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:             # <<<<<<<<<<<<<<
 *                 return NULL
 *             conv = new VaryArrayConverter(
 */

#line 514 "root_numpy/src/tree.pyx"
      __pyx_t_5 = ((__pyx_v_basic_conv == NULL) != 0);

#line 514 "root_numpy/src/tree.pyx"
      if (__pyx_t_5) {

        /* "root_numpy/src/tree.pyx":515
 *             basic_conv = find_converter_by_typename(typename)
 *             if basic_conv == NULL:
 *                 return NULL             # <<<<<<<<<<<<<<
 *             conv = new VaryArrayConverter(
 *                     <BasicConverter*>basic_conv)
 */

#line 515 "root_numpy/src/tree.pyx"
        __pyx_r = NULL;

#line 515 "root_numpy/src/tree.pyx"
        goto __pyx_L0;

#line 515 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":516
 *             if basic_conv == NULL:
 *                 return NULL
 *             conv = new VaryArrayConverter(             # <<<<<<<<<<<<<<
 *                     <BasicConverter*>basic_conv)
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 516 "root_numpy/src/tree.pyx"
      __pyx_v_conv = new __pyx_t_13_librootnumpy_VaryArrayConverter(((__pyx_t_13_librootnumpy_BasicConverter *)__pyx_v_basic_conv));

      /* "root_numpy/src/tree.pyx":519
 *                     <BasicConverter*>basic_conv)
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 *                 typename + '[vary]', conv))             # <<<<<<<<<<<<<<
 *         return conv
 *     return NULL
 */

#line 519 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __pyx_convert_PyStr_string_to_py_std__string(__pyx_v_typename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 519 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 519 "root_numpy/src/tree.pyx"
      __pyx_t_3 = PyNumber_Add(__pyx_t_4, __pyx_kp_s_vary); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 519 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 519 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 519 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __pyx_convert_string_from_py_std__string(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 519; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 519 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "root_numpy/src/tree.pyx":518
 *             conv = new VaryArrayConverter(
 *                     <BasicConverter*>basic_conv)
 *             CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *                 typename + '[vary]', conv))
 *         return conv
 */

#line 518 "root_numpy/src/tree.pyx"
      try {

#line 518 "root_numpy/src/tree.pyx"
        __pyx_t_6 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_2, __pyx_v_conv);

#line 518 "root_numpy/src/tree.pyx"
      } catch(...) {

#line 518 "root_numpy/src/tree.pyx"
        __Pyx_CppExn2PyErr();

#line 518 "root_numpy/src/tree.pyx"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 518; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 518 "root_numpy/src/tree.pyx"
      }

#line 518 "root_numpy/src/tree.pyx"
      __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_6);

#line 518 "root_numpy/src/tree.pyx"
      goto __pyx_L5;

#line 518 "root_numpy/src/tree.pyx"
    }

#line 518 "root_numpy/src/tree.pyx"
    __pyx_L5:;

    /* "root_numpy/src/tree.pyx":520
 *             CONVERTERS.insert(CONVERTERS_ITEM(
 *                 typename + '[vary]', conv))
 *         return conv             # <<<<<<<<<<<<<<
 *     return NULL
 * 
 */

#line 520 "root_numpy/src/tree.pyx"
    __pyx_r = __pyx_v_conv;

#line 520 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

#line 520 "root_numpy/src/tree.pyx"
    break;

#line 520 "root_numpy/src/tree.pyx"
    default: break;

#line 520 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":521
 *                 typename + '[vary]', conv))
 *         return conv
 *     return NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 521 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 521 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":491
 * 
 * 
 * cdef Converter* find_converter(Column* col):             # <<<<<<<<<<<<<<
 *     cdef ColumnType ct = col.coltype
 *     cdef string typename = string(col.GetTypeName())
 */

#line 491 "root_numpy/src/tree.pyx"


#line 491 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 491 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 491 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 491 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 491 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.find_converter", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 491 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 491 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 491 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 491 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 491 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":524
 * 
 * 
 * cdef Converter* find_converter_by_typename(string typename):             # <<<<<<<<<<<<<<
 *     it = CONVERTERS.find(resolve_type(typename.c_str()))
 *     if it == CONVERTERS.end():
 */

#line 524 "root_numpy/src/tree.pyx"


#line 524 "root_numpy/src/tree.pyx"
static __pyx_t_13_librootnumpy_Converter *__pyx_f_13_librootnumpy_find_converter_by_typename(std::string __pyx_v_typename) {
  std::map<std::string,__pyx_t_13_librootnumpy_Converter *> ::iterator __pyx_v_it
#line 524 "root_numpy/src/tree.pyx"
;

#line 524 "root_numpy/src/tree.pyx"
  __pyx_t_13_librootnumpy_Converter *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::string __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 524 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("find_converter_by_typename", 0);

  /* "root_numpy/src/tree.pyx":525
 * 
 * cdef Converter* find_converter_by_typename(string typename):
 *     it = CONVERTERS.find(resolve_type(typename.c_str()))             # <<<<<<<<<<<<<<
 *     if it == CONVERTERS.end():
 *         return NULL
 */

#line 525 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __pyx_f_13_librootnumpy_resolve_type(__pyx_v_typename.c_str()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 525 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 525 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __pyx_convert_string_from_py_std__string(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 525; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 525 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 525 "root_numpy/src/tree.pyx"
  __pyx_v_it = __pyx_v_13_librootnumpy_CONVERTERS.find(__pyx_t_2);

  /* "root_numpy/src/tree.pyx":526
 * cdef Converter* find_converter_by_typename(string typename):
 *     it = CONVERTERS.find(resolve_type(typename.c_str()))
 *     if it == CONVERTERS.end():             # <<<<<<<<<<<<<<
 *         return NULL
 *     return deref(it).second
 */

#line 526 "root_numpy/src/tree.pyx"
  __pyx_t_3 = ((__pyx_v_it == __pyx_v_13_librootnumpy_CONVERTERS.end()) != 0);

#line 526 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/tree.pyx":527
 *     it = CONVERTERS.find(resolve_type(typename.c_str()))
 *     if it == CONVERTERS.end():
 *         return NULL             # <<<<<<<<<<<<<<
 *     return deref(it).second
 * 
 */

#line 527 "root_numpy/src/tree.pyx"
    __pyx_r = NULL;

#line 527 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

#line 527 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":528
 *     if it == CONVERTERS.end():
 *         return NULL
 *     return deref(it).second             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 528 "root_numpy/src/tree.pyx"
  __pyx_r = (*__pyx_v_it).second;

#line 528 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":524
 * 
 * 
 * cdef Converter* find_converter_by_typename(string typename):             # <<<<<<<<<<<<<<
 *     it = CONVERTERS.find(resolve_type(typename.c_str()))
 *     if it == CONVERTERS.end():
 */

#line 524 "root_numpy/src/tree.pyx"


#line 524 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 524 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 524 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 524 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.find_converter_by_typename", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 524 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 524 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 524 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 524 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 524 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":531
 * 
 * 
 * cdef np.ndarray init_array(vector[Column*]& columns,             # <<<<<<<<<<<<<<
 *                            vector[Converter*]& cv,
 *                            unsigned long entries,
 */

#line 531 "root_numpy/src/tree.pyx"


#line 531 "root_numpy/src/tree.pyx"
static PyArrayObject *__pyx_f_13_librootnumpy_init_array(std::vector<Column *>  &__pyx_v_columns, std::vector<__pyx_t_13_librootnumpy_Converter *>  &__pyx_v_cv, unsigned long __pyx_v_entries, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name) {
  Column *__pyx_v_this_col
#line 531 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_this_conv
#line 531 "root_numpy/src/tree.pyx"
;
  unsigned int __pyx_v_i
#line 531 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_nst = NULL
#line 531 "root_numpy/src/tree.pyx"
;

#line 531 "root_numpy/src/tree.pyx"
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  unsigned int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("init_array", 0);

  /* "root_numpy/src/tree.pyx":539
 *     cdef Converter* this_conv
 *     cdef unsigned int i
 *     nst = []             # <<<<<<<<<<<<<<
 *     for i in range(columns.size()):
 *         this_col = columns[i]
 */

#line 539 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 539; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 539 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 539 "root_numpy/src/tree.pyx"
  __pyx_v_nst = ((PyObject*)__pyx_t_1);

#line 539 "root_numpy/src/tree.pyx"
  __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":540
 *     cdef unsigned int i
 *     nst = []
 *     for i in range(columns.size()):             # <<<<<<<<<<<<<<
 *         this_col = columns[i]
 *         this_conv = find_converter(this_col)
 */

#line 540 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __pyx_v_columns.size();

#line 540 "root_numpy/src/tree.pyx"
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {

#line 540 "root_numpy/src/tree.pyx"
    __pyx_v_i = __pyx_t_3;

    /* "root_numpy/src/tree.pyx":541
 *     nst = []
 *     for i in range(columns.size()):
 *         this_col = columns[i]             # <<<<<<<<<<<<<<
 *         this_conv = find_converter(this_col)
 *         if this_conv == NULL:
 */

#line 541 "root_numpy/src/tree.pyx"
    __pyx_v_this_col = (__pyx_v_columns[__pyx_v_i]);

    /* "root_numpy/src/tree.pyx":542
 *     for i in range(columns.size()):
 *         this_col = columns[i]
 *         this_conv = find_converter(this_col)             # <<<<<<<<<<<<<<
 *         if this_conv == NULL:
 *             raise ValueError("no converter for {0}".format(this_col.GetTypeName()))
 */

#line 542 "root_numpy/src/tree.pyx"
    __pyx_v_this_conv = __pyx_f_13_librootnumpy_find_converter(__pyx_v_this_col);

    /* "root_numpy/src/tree.pyx":543
 *         this_col = columns[i]
 *         this_conv = find_converter(this_col)
 *         if this_conv == NULL:             # <<<<<<<<<<<<<<
 *             raise ValueError("no converter for {0}".format(this_col.GetTypeName()))
 *         nst.append((this_col.colname, this_conv.get_nptype()))
 */

#line 543 "root_numpy/src/tree.pyx"
    __pyx_t_4 = ((__pyx_v_this_conv == NULL) != 0);

#line 543 "root_numpy/src/tree.pyx"
    if (__pyx_t_4) {

      /* "root_numpy/src/tree.pyx":544
 *         this_conv = find_converter(this_col)
 *         if this_conv == NULL:
 *             raise ValueError("no converter for {0}".format(this_col.GetTypeName()))             # <<<<<<<<<<<<<<
 *         nst.append((this_col.colname, this_conv.get_nptype()))
 *         cv.push_back(this_conv)
 */

#line 544 "root_numpy/src/tree.pyx"
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_no_converter_for_0, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 544 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 544 "root_numpy/src/tree.pyx"
      __pyx_t_6 = __Pyx_PyStr_FromString(__pyx_v_this_col->GetTypeName()); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 544 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 544 "root_numpy/src/tree.pyx"
      __pyx_t_7 = NULL;

#line 544 "root_numpy/src/tree.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {

#line 544 "root_numpy/src/tree.pyx"
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);

#line 544 "root_numpy/src/tree.pyx"
        if (likely(__pyx_t_7)) {

#line 544 "root_numpy/src/tree.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 544 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_t_7);

#line 544 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(function);

#line 544 "root_numpy/src/tree.pyx"
          __Pyx_DECREF_SET(__pyx_t_5, function);

#line 544 "root_numpy/src/tree.pyx"
        }

#line 544 "root_numpy/src/tree.pyx"
      }

#line 544 "root_numpy/src/tree.pyx"
      if (!__pyx_t_7) {

#line 544 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 544 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 544 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 544 "root_numpy/src/tree.pyx"
      } else {

#line 544 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 544 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 544 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;

#line 544 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);

#line 544 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_6);

#line 544 "root_numpy/src/tree.pyx"
        __pyx_t_6 = 0;

#line 544 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 544 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_1);

#line 544 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 544 "root_numpy/src/tree.pyx"
      }

#line 544 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 544 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 544 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 544 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);

#line 544 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 544 "root_numpy/src/tree.pyx"
      __pyx_t_1 = 0;

#line 544 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 544 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 544 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 544 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);

#line 544 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 544 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 544; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 544 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":545
 *         if this_conv == NULL:
 *             raise ValueError("no converter for {0}".format(this_col.GetTypeName()))
 *         nst.append((this_col.colname, this_conv.get_nptype()))             # <<<<<<<<<<<<<<
 *         cv.push_back(this_conv)
 *     if include_weight:
 */

#line 545 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __pyx_convert_PyStr_string_to_py_std__string(__pyx_v_this_col->colname); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 545 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 545 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __pyx_v_this_conv->get_nptype(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 545 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 545 "root_numpy/src/tree.pyx"
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 545 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 545 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);

#line 545 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 545 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);

#line 545 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 545 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

#line 545 "root_numpy/src/tree.pyx"
    __pyx_t_5 = 0;

#line 545 "root_numpy/src/tree.pyx"
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_nst, __pyx_t_8); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 545; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 545 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "root_numpy/src/tree.pyx":546
 *             raise ValueError("no converter for {0}".format(this_col.GetTypeName()))
 *         nst.append((this_col.colname, this_conv.get_nptype()))
 *         cv.push_back(this_conv)             # <<<<<<<<<<<<<<
 *     if include_weight:
 *         nst.append((weight_name, np.dtype('d')))
 */

#line 546 "root_numpy/src/tree.pyx"
    __pyx_v_cv.push_back(__pyx_v_this_conv);

#line 546 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":547
 *         nst.append((this_col.colname, this_conv.get_nptype()))
 *         cv.push_back(this_conv)
 *     if include_weight:             # <<<<<<<<<<<<<<
 *         nst.append((weight_name, np.dtype('d')))
 *     return np.empty(entries, dtype=nst)
 */

#line 547 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_include_weight); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 547; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 547 "root_numpy/src/tree.pyx"
  if (__pyx_t_4) {

    /* "root_numpy/src/tree.pyx":548
 *         cv.push_back(this_conv)
 *     if include_weight:
 *         nst.append((weight_name, np.dtype('d')))             # <<<<<<<<<<<<<<
 *     return np.empty(entries, dtype=nst)
 * 
 */

#line 548 "root_numpy/src/tree.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 548 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 548 "root_numpy/src/tree.pyx"
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 548 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 548 "root_numpy/src/tree.pyx"
    __Pyx_INCREF(__pyx_v_weight_name);

#line 548 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_weight_name);

#line 548 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_v_weight_name);

#line 548 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);

#line 548 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_8);

#line 548 "root_numpy/src/tree.pyx"
    __pyx_t_8 = 0;

#line 548 "root_numpy/src/tree.pyx"
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_nst, __pyx_t_5); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 548 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 548 "root_numpy/src/tree.pyx"
    goto __pyx_L6;

#line 548 "root_numpy/src/tree.pyx"
  }

#line 548 "root_numpy/src/tree.pyx"
  __pyx_L6:;

  /* "root_numpy/src/tree.pyx":549
 *     if include_weight:
 *         nst.append((weight_name, np.dtype('d')))
 *     return np.empty(entries, dtype=nst)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyInt_From_unsigned_long(__pyx_v_entries); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 549 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_5);

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 549 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_v_nst) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 549 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 549 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 549; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 549 "root_numpy/src/tree.pyx"
  __pyx_r = ((PyArrayObject *)__pyx_t_6);

#line 549 "root_numpy/src/tree.pyx"
  __pyx_t_6 = 0;

#line 549 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":531
 * 
 * 
 * cdef np.ndarray init_array(vector[Column*]& columns,             # <<<<<<<<<<<<<<
 *                            vector[Converter*]& cv,
 *                            unsigned long entries,
 */

#line 531 "root_numpy/src/tree.pyx"


#line 531 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 531 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.init_array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 531 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 531 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_nst);

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 531 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 531 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 531 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":552
 * 
 * 
 * cdef handle_load(int load, bool ignore_index=False):             # <<<<<<<<<<<<<<
 *     if load >= 0:
 *         return
 */

#line 552 "root_numpy/src/tree.pyx"


#line 552 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_handle_load(int __pyx_v_load, struct __pyx_opt_args_13_librootnumpy_handle_load *__pyx_optional_args) {

#line 552 "root_numpy/src/tree.pyx"
  bool __pyx_v_ignore_index = ((bool)0);

#line 552 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 552 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("handle_load", 0);

#line 552 "root_numpy/src/tree.pyx"
  if (__pyx_optional_args) {

#line 552 "root_numpy/src/tree.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 552 "root_numpy/src/tree.pyx"
      __pyx_v_ignore_index = __pyx_optional_args->ignore_index;

#line 552 "root_numpy/src/tree.pyx"
    }

#line 552 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":553
 * 
 * cdef handle_load(int load, bool ignore_index=False):
 *     if load >= 0:             # <<<<<<<<<<<<<<
 *         return
 *     if load == -1:
 */

#line 553 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_load >= 0) != 0);

#line 553 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":554
 * cdef handle_load(int load, bool ignore_index=False):
 *     if load >= 0:
 *         return             # <<<<<<<<<<<<<<
 *     if load == -1:
 *         raise ValueError("chain is empty")
 */

#line 554 "root_numpy/src/tree.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 554 "root_numpy/src/tree.pyx"
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 554 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

#line 554 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":563
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 *     elif load == -4:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")
 */

#line 563 "root_numpy/src/tree.pyx"
  switch (__pyx_v_load) {

    /* "root_numpy/src/tree.pyx":555
 *     if load >= 0:
 *         return
 *     if load == -1:             # <<<<<<<<<<<<<<
 *         raise ValueError("chain is empty")
 *     elif load == -2:
 */

#line 555 "root_numpy/src/tree.pyx"
    case -1:

    /* "root_numpy/src/tree.pyx":556
 *         return
 *     if load == -1:
 *         raise ValueError("chain is empty")             # <<<<<<<<<<<<<<
 *     elif load == -2:
 *         if ignore_index:
 */

#line 556 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 556 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 556 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 556 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 556 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 556 "root_numpy/src/tree.pyx"
    break;

    /* "root_numpy/src/tree.pyx":557
 *     if load == -1:
 *         raise ValueError("chain is empty")
 *     elif load == -2:             # <<<<<<<<<<<<<<
 *         if ignore_index:
 *             return
 */

#line 557 "root_numpy/src/tree.pyx"
    case -2:

    /* "root_numpy/src/tree.pyx":558
 *         raise ValueError("chain is empty")
 *     elif load == -2:
 *         if ignore_index:             # <<<<<<<<<<<<<<
 *             return
 *         raise IndexError("tree index in chain is out of bounds")
 */

#line 558 "root_numpy/src/tree.pyx"
    __pyx_t_1 = (__pyx_v_ignore_index != 0);

#line 558 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":559
 *     elif load == -2:
 *         if ignore_index:
 *             return             # <<<<<<<<<<<<<<
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:
 */

#line 559 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_r);

#line 559 "root_numpy/src/tree.pyx"
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 559 "root_numpy/src/tree.pyx"
      goto __pyx_L0;

#line 559 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":560
 *         if ignore_index:
 *             return
 *         raise IndexError("tree index in chain is out of bounds")             # <<<<<<<<<<<<<<
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 */

#line 560 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 560 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 560 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 560 "root_numpy/src/tree.pyx"
    break;

    /* "root_numpy/src/tree.pyx":561
 *             return
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 */

#line 561 "root_numpy/src/tree.pyx"
    case -3:

    /* "root_numpy/src/tree.pyx":562
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:
 *         raise IOError("cannot open current file")             # <<<<<<<<<<<<<<
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 */

#line 562 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 562 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 562 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 562 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 562 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 562 "root_numpy/src/tree.pyx"
    break;

    /* "root_numpy/src/tree.pyx":563
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 *     elif load == -4:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")
 */

#line 563 "root_numpy/src/tree.pyx"
    case -4:

    /* "root_numpy/src/tree.pyx":564
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")             # <<<<<<<<<<<<<<
 *     raise RuntimeError("the chain is not initialized")
 * 
 */

#line 564 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 564 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 564 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 564 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 564 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 564 "root_numpy/src/tree.pyx"
    break;

#line 564 "root_numpy/src/tree.pyx"
    default: break;

#line 564 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":565
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 565 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 565 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 565 "root_numpy/src/tree.pyx"
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 565 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 565 "root_numpy/src/tree.pyx"
  {__pyx_filename = __pyx_f[1]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":552
 * 
 * 
 * cdef handle_load(int load, bool ignore_index=False):             # <<<<<<<<<<<<<<
 *     if load >= 0:
 *         return
 */

#line 552 "root_numpy/src/tree.pyx"


#line 552 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 552 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 552 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 552 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.handle_load", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 552 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 552 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 552 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 552 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 552 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 552 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":568
 * 
 * 
 * cdef object tree2array(TTree* tree, branches, selection,             # <<<<<<<<<<<<<<
 *                        start, stop, step,
 *                        include_weight, weight_name):
 */

#line 568 "root_numpy/src/tree.pyx"


#line 568 "root_numpy/src/tree.pyx"
static PyObject *__pyx_f_13_librootnumpy_tree2array(TTree *__pyx_v_tree, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name) {
  std::vector<Column *>  __pyx_v_columns
#line 568 "root_numpy/src/tree.pyx"
;
  Column *__pyx_v_col
#line 568 "root_numpy/src/tree.pyx"
;
  BetterChain *__pyx_v_bc
#line 568 "root_numpy/src/tree.pyx"
;
  TTreeFormula *__pyx_v_selection_formula
#line 568 "root_numpy/src/tree.pyx"
;
  TTreeFormula *__pyx_v_formula
#line 568 "root_numpy/src/tree.pyx"
;
  int __pyx_v_num_entries
#line 568 "root_numpy/src/tree.pyx"
;
  int __pyx_v_num_entries_selected
#line 568 "root_numpy/src/tree.pyx"
;
  int __pyx_v_ientry
#line 568 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_Converter *__pyx_v_conv
#line 568 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_numcol
#line 568 "root_numpy/src/tree.pyx"
;
  void *__pyx_v_dataptr
#line 568 "root_numpy/src/tree.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 568 "root_numpy/src/tree.pyx"
;
  int __pyx_v_nb
#line 568 "root_numpy/src/tree.pyx"
;
  int __pyx_v_entry_size
#line 568 "root_numpy/src/tree.pyx"
;
  std::vector<__pyx_t_13_librootnumpy_Converter *>  __pyx_v_conv_array
#line 568 "root_numpy/src/tree.pyx"
;
  char *__pyx_v_c_string
#line 568 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_structure = NULL
#line 568 "root_numpy/src/tree.pyx"
;
  int __pyx_v_user_branches
#line 568 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_branch = NULL
#line 568 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_leaves = NULL
#line 568 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_shortname = NULL
#line 568 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_leaf = NULL
#line 568 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_ltype = NULL
#line 568 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_colname = NULL
#line 568 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_indices = NULL
#line 568 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_icol
#line 568 "root_numpy/src/tree.pyx"
;

#line 568 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_13_librootnumpy_handle_load __pyx_t_3;
  char *__pyx_t_4;
  int __pyx_t_5;
  struct __pyx_opt_args_13_librootnumpy_parse_tree_structure __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  std::string __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  std::string __pyx_t_20;
  std::string __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_t_23;
  unsigned long __pyx_t_24;
  unsigned long __pyx_t_25;
  int __pyx_t_26;
  char const *__pyx_t_27;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("tree2array", 0);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_branches);

  /* "root_numpy/src/tree.pyx":572
 *                        include_weight, weight_name):
 * 
 *     if tree.GetNbranches() == 0:             # <<<<<<<<<<<<<<
 *         raise ValueError("tree has no branches")
 * 
 */

#line 572 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_tree->GetNbranches() == 0) != 0);

#line 572 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":573
 * 
 *     if tree.GetNbranches() == 0:
 *         raise ValueError("tree has no branches")             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Column*] columns
 */

#line 573 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 573 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 573 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 573 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 573 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 573 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":579
 * 
 *     # Make a "better" chain so we can register all columns
 *     cdef BetterChain* bc = new BetterChain(tree)             # <<<<<<<<<<<<<<
 *     handle_load(bc.Prepare(), True)
 * 
 */

#line 579 "root_numpy/src/tree.pyx"
  __pyx_v_bc = new BetterChain(__pyx_v_tree);

  /* "root_numpy/src/tree.pyx":580
 *     # Make a "better" chain so we can register all columns
 *     cdef BetterChain* bc = new BetterChain(tree)
 *     handle_load(bc.Prepare(), True)             # <<<<<<<<<<<<<<
 * 
 *     cdef TTreeFormula* selection_formula = NULL
 */

#line 580 "root_numpy/src/tree.pyx"
  __pyx_t_3.__pyx_n = 1;

#line 580 "root_numpy/src/tree.pyx"
  __pyx_t_3.ignore_index = 1;

#line 580 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __pyx_f_13_librootnumpy_handle_load(__pyx_v_bc->Prepare(), &__pyx_t_3); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 580; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 580 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 580 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "root_numpy/src/tree.pyx":582
 *     handle_load(bc.Prepare(), True)
 * 
 *     cdef TTreeFormula* selection_formula = NULL             # <<<<<<<<<<<<<<
 *     cdef TTreeFormula* formula = NULL
 *     cdef int num_entries = bc.GetEntries()
 */

#line 582 "root_numpy/src/tree.pyx"
  __pyx_v_selection_formula = NULL;

  /* "root_numpy/src/tree.pyx":583
 * 
 *     cdef TTreeFormula* selection_formula = NULL
 *     cdef TTreeFormula* formula = NULL             # <<<<<<<<<<<<<<
 *     cdef int num_entries = bc.GetEntries()
 *     cdef int num_entries_selected = 0
 */

#line 583 "root_numpy/src/tree.pyx"
  __pyx_v_formula = NULL;

  /* "root_numpy/src/tree.pyx":584
 *     cdef TTreeFormula* selection_formula = NULL
 *     cdef TTreeFormula* formula = NULL
 *     cdef int num_entries = bc.GetEntries()             # <<<<<<<<<<<<<<
 *     cdef int num_entries_selected = 0
 *     cdef int ientry
 */

#line 584 "root_numpy/src/tree.pyx"
  __pyx_v_num_entries = __pyx_v_bc->GetEntries();

  /* "root_numpy/src/tree.pyx":585
 *     cdef TTreeFormula* formula = NULL
 *     cdef int num_entries = bc.GetEntries()
 *     cdef int num_entries_selected = 0             # <<<<<<<<<<<<<<
 *     cdef int ientry
 * 
 */

#line 585 "root_numpy/src/tree.pyx"
  __pyx_v_num_entries_selected = 0;

  /* "root_numpy/src/tree.pyx":597
 *     cdef char* c_string
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         # Set up the selection if we have one
 *         if selection:
 */

#line 597 "root_numpy/src/tree.pyx"
  /*try:*/ {

    /* "root_numpy/src/tree.pyx":599
 *     try:
 *         # Set up the selection if we have one
 *         if selection:             # <<<<<<<<<<<<<<
 *             c_string = selection
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)
 */

#line 599 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_selection); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 599; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 599 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":600
 *         # Set up the selection if we have one
 *         if selection:
 *             c_string = selection             # <<<<<<<<<<<<<<
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 */

#line 600 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_selection); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 600; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 600 "root_numpy/src/tree.pyx"
      __pyx_v_c_string = __pyx_t_4;

      /* "root_numpy/src/tree.pyx":601
 *         if selection:
 *             c_string = selection
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)             # <<<<<<<<<<<<<<
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula
 */

#line 601 "root_numpy/src/tree.pyx"
      __pyx_v_selection_formula = new TTreeFormula(__pyx_k_selection, __pyx_v_c_string, __pyx_v_bc->fChain);

      /* "root_numpy/src/tree.pyx":602
 *             c_string = selection
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:             # <<<<<<<<<<<<<<
 *                 del selection_formula
 *                 raise ValueError("could not compile selection formula")
 */

#line 602 "root_numpy/src/tree.pyx"
      __pyx_t_5 = ((__pyx_v_selection_formula == NULL) != 0);

#line 602 "root_numpy/src/tree.pyx"
      if (!__pyx_t_5) {

#line 602 "root_numpy/src/tree.pyx"
      } else {

#line 602 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __pyx_t_5;

#line 602 "root_numpy/src/tree.pyx"
        goto __pyx_L9_bool_binop_done;

#line 602 "root_numpy/src/tree.pyx"
      }

#line 602 "root_numpy/src/tree.pyx"
      __pyx_t_5 = ((__pyx_v_selection_formula->GetNdim() == 0) != 0);

#line 602 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __pyx_t_5;

#line 602 "root_numpy/src/tree.pyx"
      __pyx_L9_bool_binop_done:;

#line 602 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":603
 *             selection_formula = new TTreeFormula("selection", c_string, bc.fChain)
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula             # <<<<<<<<<<<<<<
 *                 raise ValueError("could not compile selection formula")
 *             # The chain will take care of updating the formula leaves when
 */

#line 603 "root_numpy/src/tree.pyx"
        delete __pyx_v_selection_formula;

        /* "root_numpy/src/tree.pyx":604
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula
 *                 raise ValueError("could not compile selection formula")             # <<<<<<<<<<<<<<
 *             # The chain will take care of updating the formula leaves when
 *             # rolling over to the next tree.
 */

#line 604 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 604 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_2);

#line 604 "root_numpy/src/tree.pyx"
        __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 604 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 604 "root_numpy/src/tree.pyx"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 604 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":607
 *             # The chain will take care of updating the formula leaves when
 *             # rolling over to the next tree.
 *             bc.AddFormula(selection_formula)             # <<<<<<<<<<<<<<
 * 
 *         # Parse the tree structure to determine branches and leaves
 */

#line 607 "root_numpy/src/tree.pyx"
      __pyx_v_bc->AddFormula(__pyx_v_selection_formula);

#line 607 "root_numpy/src/tree.pyx"
      goto __pyx_L7;

#line 607 "root_numpy/src/tree.pyx"
    }

#line 607 "root_numpy/src/tree.pyx"
    __pyx_L7:;

    /* "root_numpy/src/tree.pyx":610
 * 
 *         # Parse the tree structure to determine branches and leaves
 *         structure = parse_tree_structure(tree, branches=branches)             # <<<<<<<<<<<<<<
 *         user_branches = False
 *         if branches is None:
 */

#line 610 "root_numpy/src/tree.pyx"
    __pyx_t_6.__pyx_n = 1;

#line 610 "root_numpy/src/tree.pyx"
    __pyx_t_6.branches = __pyx_v_branches;

#line 610 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_f_13_librootnumpy_parse_tree_structure(__pyx_v_tree, &__pyx_t_6); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 610; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 610 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 610 "root_numpy/src/tree.pyx"
    __pyx_v_structure = __pyx_t_2;

#line 610 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":611
 *         # Parse the tree structure to determine branches and leaves
 *         structure = parse_tree_structure(tree, branches=branches)
 *         user_branches = False             # <<<<<<<<<<<<<<
 *         if branches is None:
 *             branches = structure.keys()
 */

#line 611 "root_numpy/src/tree.pyx"
    __pyx_v_user_branches = 0;

    /* "root_numpy/src/tree.pyx":612
 *         structure = parse_tree_structure(tree, branches=branches)
 *         user_branches = False
 *         if branches is None:             # <<<<<<<<<<<<<<
 *             branches = structure.keys()
 *         elif len(branches) == 0:
 */

#line 612 "root_numpy/src/tree.pyx"
    __pyx_t_1 = (__pyx_v_branches == Py_None);

#line 612 "root_numpy/src/tree.pyx"
    __pyx_t_5 = (__pyx_t_1 != 0);

#line 612 "root_numpy/src/tree.pyx"
    if (__pyx_t_5) {

      /* "root_numpy/src/tree.pyx":613
 *         user_branches = False
 *         if branches is None:
 *             branches = structure.keys()             # <<<<<<<<<<<<<<
 *         elif len(branches) == 0:
 *             raise ValueError("branches is an empty list")
 */

#line 613 "root_numpy/src/tree.pyx"
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_structure, __pyx_n_s_keys); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 613 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 613 "root_numpy/src/tree.pyx"
      __pyx_t_8 = NULL;

#line 613 "root_numpy/src/tree.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {

#line 613 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);

#line 613 "root_numpy/src/tree.pyx"
        if (likely(__pyx_t_8)) {

#line 613 "root_numpy/src/tree.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 613 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_t_8);

#line 613 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(function);

#line 613 "root_numpy/src/tree.pyx"
          __Pyx_DECREF_SET(__pyx_t_7, function);

#line 613 "root_numpy/src/tree.pyx"
        }

#line 613 "root_numpy/src/tree.pyx"
      }

#line 613 "root_numpy/src/tree.pyx"
      if (__pyx_t_8) {

#line 613 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 613 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 613 "root_numpy/src/tree.pyx"
      } else {

#line 613 "root_numpy/src/tree.pyx"
        __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 613; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 613 "root_numpy/src/tree.pyx"
      }

#line 613 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 613 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 613 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_v_branches, __pyx_t_2);

#line 613 "root_numpy/src/tree.pyx"
      __pyx_t_2 = 0;

#line 613 "root_numpy/src/tree.pyx"
      goto __pyx_L11;

#line 613 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":614
 *         if branches is None:
 *             branches = structure.keys()
 *         elif len(branches) == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("branches is an empty list")
 *         elif len(branches) != len(set(branches)):
 */

#line 614 "root_numpy/src/tree.pyx"
    __pyx_t_9 = PyObject_Length(__pyx_v_branches); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 614; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 614 "root_numpy/src/tree.pyx"
    __pyx_t_5 = ((__pyx_t_9 == 0) != 0);

#line 614 "root_numpy/src/tree.pyx"
    if (__pyx_t_5) {

      /* "root_numpy/src/tree.pyx":615
 *             branches = structure.keys()
 *         elif len(branches) == 0:
 *             raise ValueError("branches is an empty list")             # <<<<<<<<<<<<<<
 *         elif len(branches) != len(set(branches)):
 *             raise ValueError("duplicate branches requested")
 */

#line 615 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 615 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 615 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 615 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 615 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 615 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":616
 *         elif len(branches) == 0:
 *             raise ValueError("branches is an empty list")
 *         elif len(branches) != len(set(branches)):             # <<<<<<<<<<<<<<
 *             raise ValueError("duplicate branches requested")
 *         else:
 */

#line 616 "root_numpy/src/tree.pyx"
    __pyx_t_9 = PyObject_Length(__pyx_v_branches); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 616 "root_numpy/src/tree.pyx"
    __pyx_t_2 = PySet_New(__pyx_v_branches); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 616 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 616 "root_numpy/src/tree.pyx"
    __pyx_t_10 = PySet_Size(__pyx_t_2); if (unlikely(__pyx_t_10 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 616; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 616 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 616 "root_numpy/src/tree.pyx"
    __pyx_t_5 = ((__pyx_t_9 != __pyx_t_10) != 0);

#line 616 "root_numpy/src/tree.pyx"
    if (__pyx_t_5) {

      /* "root_numpy/src/tree.pyx":617
 *             raise ValueError("branches is an empty list")
 *         elif len(branches) != len(set(branches)):
 *             raise ValueError("duplicate branches requested")             # <<<<<<<<<<<<<<
 *         else:
 *             user_branches = True
 */

#line 617 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 617 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 617 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 617 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 617 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 617 "root_numpy/src/tree.pyx"
    }

#line 617 "root_numpy/src/tree.pyx"
    /*else*/ {

      /* "root_numpy/src/tree.pyx":619
 *             raise ValueError("duplicate branches requested")
 *         else:
 *             user_branches = True             # <<<<<<<<<<<<<<
 * 
 *         for branch in branches:
 */

#line 619 "root_numpy/src/tree.pyx"
      __pyx_v_user_branches = 1;

#line 619 "root_numpy/src/tree.pyx"
    }

#line 619 "root_numpy/src/tree.pyx"
    __pyx_L11:;

    /* "root_numpy/src/tree.pyx":621
 *             user_branches = True
 * 
 *         for branch in branches:             # <<<<<<<<<<<<<<
 *             if branch in structure:
 *                 leaves = structure[branch]
 */

#line 621 "root_numpy/src/tree.pyx"
    if (likely(PyList_CheckExact(__pyx_v_branches)) || PyTuple_CheckExact(__pyx_v_branches)) {

#line 621 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __pyx_v_branches; __Pyx_INCREF(__pyx_t_2); __pyx_t_10 = 0;

#line 621 "root_numpy/src/tree.pyx"
      __pyx_t_11 = NULL;

#line 621 "root_numpy/src/tree.pyx"
    } else {
      __pyx_t_10 = -1; 
#line 621 "root_numpy/src/tree.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_branches); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 621 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 621 "root_numpy/src/tree.pyx"
      __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 621 "root_numpy/src/tree.pyx"
    }

#line 621 "root_numpy/src/tree.pyx"
    for (;;) {

#line 621 "root_numpy/src/tree.pyx"
      if (likely(!__pyx_t_11)) {

#line 621 "root_numpy/src/tree.pyx"
        if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 621 "root_numpy/src/tree.pyx"
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 621 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 621 "root_numpy/src/tree.pyx"
          __pyx_t_7 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 621 "root_numpy/src/tree.pyx"
          #else

#line 621 "root_numpy/src/tree.pyx"
          __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 621 "root_numpy/src/tree.pyx"
          #endif

#line 621 "root_numpy/src/tree.pyx"
        } else {

#line 621 "root_numpy/src/tree.pyx"
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 621 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 621 "root_numpy/src/tree.pyx"
          __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 621 "root_numpy/src/tree.pyx"
          #else

#line 621 "root_numpy/src/tree.pyx"
          __pyx_t_7 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 621 "root_numpy/src/tree.pyx"
          #endif

#line 621 "root_numpy/src/tree.pyx"
        }
      } else 
#line 621 "root_numpy/src/tree.pyx"
{

#line 621 "root_numpy/src/tree.pyx"
        __pyx_t_7 = __pyx_t_11(__pyx_t_2);

#line 621 "root_numpy/src/tree.pyx"
        if (unlikely(!__pyx_t_7)) {

#line 621 "root_numpy/src/tree.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 621 "root_numpy/src/tree.pyx"
          if (exc_type) {

#line 621 "root_numpy/src/tree.pyx"
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 621 "root_numpy/src/tree.pyx"
            else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 621; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 621 "root_numpy/src/tree.pyx"
          }

#line 621 "root_numpy/src/tree.pyx"
          break;

#line 621 "root_numpy/src/tree.pyx"
        }

#line 621 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 621 "root_numpy/src/tree.pyx"
      }

#line 621 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF_SET(__pyx_v_branch, __pyx_t_7);

#line 621 "root_numpy/src/tree.pyx"
      __pyx_t_7 = 0;

      /* "root_numpy/src/tree.pyx":622
 * 
 *         for branch in branches:
 *             if branch in structure:             # <<<<<<<<<<<<<<
 *                 leaves = structure[branch]
 *                 shortname = len(leaves) == 1
 */

#line 622 "root_numpy/src/tree.pyx"
      __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_v_branch, __pyx_v_structure, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 622; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 622 "root_numpy/src/tree.pyx"
      __pyx_t_1 = (__pyx_t_5 != 0);

#line 622 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":623
 *         for branch in branches:
 *             if branch in structure:
 *                 leaves = structure[branch]             # <<<<<<<<<<<<<<
 *                 shortname = len(leaves) == 1
 *                 for leaf, ltype in leaves:
 */

#line 623 "root_numpy/src/tree.pyx"
        __pyx_t_7 = PyObject_GetItem(__pyx_v_structure, __pyx_v_branch); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 623; __pyx_clineno = __LINE__; goto __pyx_L5_error;};

#line 623 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 623 "root_numpy/src/tree.pyx"
        __Pyx_XDECREF_SET(__pyx_v_leaves, __pyx_t_7);

#line 623 "root_numpy/src/tree.pyx"
        __pyx_t_7 = 0;

        /* "root_numpy/src/tree.pyx":624
 *             if branch in structure:
 *                 leaves = structure[branch]
 *                 shortname = len(leaves) == 1             # <<<<<<<<<<<<<<
 *                 for leaf, ltype in leaves:
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():
 */

#line 624 "root_numpy/src/tree.pyx"
        __pyx_t_9 = PyObject_Length(__pyx_v_leaves); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 624 "root_numpy/src/tree.pyx"
        __pyx_t_7 = __Pyx_PyBool_FromLong((__pyx_t_9 == 1)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 624; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 624 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 624 "root_numpy/src/tree.pyx"
        __Pyx_XDECREF_SET(__pyx_v_shortname, __pyx_t_7);

#line 624 "root_numpy/src/tree.pyx"
        __pyx_t_7 = 0;

        /* "root_numpy/src/tree.pyx":625
 *                 leaves = structure[branch]
 *                 shortname = len(leaves) == 1
 *                 for leaf, ltype in leaves:             # <<<<<<<<<<<<<<
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():
 *                         colname = branch if shortname else '{0}_{1}'.format(branch, leaf)
 */

#line 625 "root_numpy/src/tree.pyx"
        if (likely(PyList_CheckExact(__pyx_v_leaves)) || PyTuple_CheckExact(__pyx_v_leaves)) {

#line 625 "root_numpy/src/tree.pyx"
          __pyx_t_7 = __pyx_v_leaves; __Pyx_INCREF(__pyx_t_7); __pyx_t_9 = 0;

#line 625 "root_numpy/src/tree.pyx"
          __pyx_t_12 = NULL;

#line 625 "root_numpy/src/tree.pyx"
        } else {
          __pyx_t_9 = -1; 
#line 625 "root_numpy/src/tree.pyx"
__pyx_t_7 = PyObject_GetIter(__pyx_v_leaves); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 625 "root_numpy/src/tree.pyx"
          __pyx_t_12 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
        }

#line 625 "root_numpy/src/tree.pyx"
        for (;;) {

#line 625 "root_numpy/src/tree.pyx"
          if (likely(!__pyx_t_12)) {

#line 625 "root_numpy/src/tree.pyx"
            if (likely(PyList_CheckExact(__pyx_t_7))) {

#line 625 "root_numpy/src/tree.pyx"
              if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_7)) break;

#line 625 "root_numpy/src/tree.pyx"
              #if CYTHON_COMPILING_IN_CPYTHON

#line 625 "root_numpy/src/tree.pyx"
              __pyx_t_8 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
              #else

#line 625 "root_numpy/src/tree.pyx"
              __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
              #endif

#line 625 "root_numpy/src/tree.pyx"
            } else {

#line 625 "root_numpy/src/tree.pyx"
              if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_7)) break;

#line 625 "root_numpy/src/tree.pyx"
              #if CYTHON_COMPILING_IN_CPYTHON

#line 625 "root_numpy/src/tree.pyx"
              __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_9); __Pyx_INCREF(__pyx_t_8); __pyx_t_9++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
              #else

#line 625 "root_numpy/src/tree.pyx"
              __pyx_t_8 = PySequence_ITEM(__pyx_t_7, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
              #endif

#line 625 "root_numpy/src/tree.pyx"
            }
          } else 
#line 625 "root_numpy/src/tree.pyx"
{

#line 625 "root_numpy/src/tree.pyx"
            __pyx_t_8 = __pyx_t_12(__pyx_t_7);

#line 625 "root_numpy/src/tree.pyx"
            if (unlikely(!__pyx_t_8)) {

#line 625 "root_numpy/src/tree.pyx"
              PyObject* exc_type = PyErr_Occurred();

#line 625 "root_numpy/src/tree.pyx"
              if (exc_type) {

#line 625 "root_numpy/src/tree.pyx"
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 625 "root_numpy/src/tree.pyx"
                else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
              }

#line 625 "root_numpy/src/tree.pyx"
              break;

#line 625 "root_numpy/src/tree.pyx"
            }

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_8);

#line 625 "root_numpy/src/tree.pyx"
          }

#line 625 "root_numpy/src/tree.pyx"
          if ((likely(PyTuple_CheckExact(__pyx_t_8))) || (PyList_CheckExact(__pyx_t_8))) {

#line 625 "root_numpy/src/tree.pyx"
            PyObject* sequence = __pyx_t_8;

#line 625 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 625 "root_numpy/src/tree.pyx"
            Py_ssize_t size = Py_SIZE(sequence);

#line 625 "root_numpy/src/tree.pyx"
            #else

#line 625 "root_numpy/src/tree.pyx"
            Py_ssize_t size = PySequence_Size(sequence);

#line 625 "root_numpy/src/tree.pyx"
            #endif

#line 625 "root_numpy/src/tree.pyx"
            if (unlikely(size != 2)) {

#line 625 "root_numpy/src/tree.pyx"
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 625 "root_numpy/src/tree.pyx"
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 625 "root_numpy/src/tree.pyx"
              {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
            }

#line 625 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 625 "root_numpy/src/tree.pyx"
            if (likely(PyTuple_CheckExact(sequence))) {

#line 625 "root_numpy/src/tree.pyx"
              __pyx_t_13 = PyTuple_GET_ITEM(sequence, 0); 

#line 625 "root_numpy/src/tree.pyx"
              __pyx_t_14 = PyTuple_GET_ITEM(sequence, 1); 

#line 625 "root_numpy/src/tree.pyx"
            } else {

#line 625 "root_numpy/src/tree.pyx"
              __pyx_t_13 = PyList_GET_ITEM(sequence, 0); 

#line 625 "root_numpy/src/tree.pyx"
              __pyx_t_14 = PyList_GET_ITEM(sequence, 1); 

#line 625 "root_numpy/src/tree.pyx"
            }

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_13);

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_14);

#line 625 "root_numpy/src/tree.pyx"
            #else

#line 625 "root_numpy/src/tree.pyx"
            __pyx_t_13 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_13);

#line 625 "root_numpy/src/tree.pyx"
            __pyx_t_14 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_14);

#line 625 "root_numpy/src/tree.pyx"
            #endif

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 625 "root_numpy/src/tree.pyx"
          } else {

#line 625 "root_numpy/src/tree.pyx"
            Py_ssize_t index = -1;

#line 625 "root_numpy/src/tree.pyx"
            __pyx_t_15 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_15);

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 625 "root_numpy/src/tree.pyx"
            __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext;
            index = 0; __pyx_t_13 = __pyx_t_16(__pyx_t_15); if (unlikely(!__pyx_t_13)) 
#line 625 "root_numpy/src/tree.pyx"
goto __pyx_L17_unpacking_failed;

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_13);
            index = 1; __pyx_t_14 = __pyx_t_16(__pyx_t_15); if (unlikely(!__pyx_t_14)) 
#line 625 "root_numpy/src/tree.pyx"
goto __pyx_L17_unpacking_failed;

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_14);

#line 625 "root_numpy/src/tree.pyx"
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_16(__pyx_t_15), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
            __pyx_t_16 = NULL;

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 625 "root_numpy/src/tree.pyx"
            goto __pyx_L18_unpacking_done;

#line 625 "root_numpy/src/tree.pyx"
            __pyx_L17_unpacking_failed:;

#line 625 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 625 "root_numpy/src/tree.pyx"
            __pyx_t_16 = NULL;

#line 625 "root_numpy/src/tree.pyx"
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 625 "root_numpy/src/tree.pyx"
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 625; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 625 "root_numpy/src/tree.pyx"
            __pyx_L18_unpacking_done:;

#line 625 "root_numpy/src/tree.pyx"
          }

#line 625 "root_numpy/src/tree.pyx"
          __Pyx_XDECREF_SET(__pyx_v_leaf, __pyx_t_13);

#line 625 "root_numpy/src/tree.pyx"
          __pyx_t_13 = 0;

#line 625 "root_numpy/src/tree.pyx"
          __Pyx_XDECREF_SET(__pyx_v_ltype, __pyx_t_14);

#line 625 "root_numpy/src/tree.pyx"
          __pyx_t_14 = 0;

          /* "root_numpy/src/tree.pyx":626
 *                 shortname = len(leaves) == 1
 *                 for leaf, ltype in leaves:
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():             # <<<<<<<<<<<<<<
 *                         colname = branch if shortname else '{0}_{1}'.format(branch, leaf)
 *                         col = bc.MakeColumn(branch, leaf, colname)
 */

#line 626 "root_numpy/src/tree.pyx"
          __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_v_ltype); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 626; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 626 "root_numpy/src/tree.pyx"
          __pyx_t_1 = ((__pyx_v_13_librootnumpy_CONVERTERS.find(__pyx_t_17) != __pyx_v_13_librootnumpy_CONVERTERS.end()) != 0);

#line 626 "root_numpy/src/tree.pyx"
          if (__pyx_t_1) {

            /* "root_numpy/src/tree.pyx":627
 *                 for leaf, ltype in leaves:
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():
 *                         colname = branch if shortname else '{0}_{1}'.format(branch, leaf)             # <<<<<<<<<<<<<<
 *                         col = bc.MakeColumn(branch, leaf, colname)
 *                         columns.push_back(col)
 */

#line 627 "root_numpy/src/tree.pyx"
            __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_shortname); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 627 "root_numpy/src/tree.pyx"
            if (__pyx_t_1) {

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_v_branch);

#line 627 "root_numpy/src/tree.pyx"
              __pyx_t_8 = __pyx_v_branch;

#line 627 "root_numpy/src/tree.pyx"
            } else {

#line 627 "root_numpy/src/tree.pyx"
              __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_0___1, __pyx_n_s_format); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_GOTREF(__pyx_t_13);

#line 627 "root_numpy/src/tree.pyx"
              __pyx_t_15 = NULL;

#line 627 "root_numpy/src/tree.pyx"
              __pyx_t_18 = 0;

#line 627 "root_numpy/src/tree.pyx"
              if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_13))) {

#line 627 "root_numpy/src/tree.pyx"
                __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);

#line 627 "root_numpy/src/tree.pyx"
                if (likely(__pyx_t_15)) {

#line 627 "root_numpy/src/tree.pyx"
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);

#line 627 "root_numpy/src/tree.pyx"
                  __Pyx_INCREF(__pyx_t_15);

#line 627 "root_numpy/src/tree.pyx"
                  __Pyx_INCREF(function);

#line 627 "root_numpy/src/tree.pyx"
                  __Pyx_DECREF_SET(__pyx_t_13, function);

#line 627 "root_numpy/src/tree.pyx"
                  __pyx_t_18 = 1;

#line 627 "root_numpy/src/tree.pyx"
                }

#line 627 "root_numpy/src/tree.pyx"
              }

#line 627 "root_numpy/src/tree.pyx"
              __pyx_t_19 = PyTuple_New(2+__pyx_t_18); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_GOTREF(__pyx_t_19);

#line 627 "root_numpy/src/tree.pyx"
              if (__pyx_t_15) {

#line 627 "root_numpy/src/tree.pyx"
                PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_15); __Pyx_GIVEREF(__pyx_t_15); __pyx_t_15 = NULL;

#line 627 "root_numpy/src/tree.pyx"
              }

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_v_branch);

#line 627 "root_numpy/src/tree.pyx"
              PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_18, __pyx_v_branch);

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_GIVEREF(__pyx_v_branch);

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_v_leaf);

#line 627 "root_numpy/src/tree.pyx"
              PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_18, __pyx_v_leaf);

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_GIVEREF(__pyx_v_leaf);

#line 627 "root_numpy/src/tree.pyx"
              __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_19, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 627; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_GOTREF(__pyx_t_14);

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

#line 627 "root_numpy/src/tree.pyx"
              __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 627 "root_numpy/src/tree.pyx"
              __pyx_t_8 = __pyx_t_14;

#line 627 "root_numpy/src/tree.pyx"
              __pyx_t_14 = 0;

#line 627 "root_numpy/src/tree.pyx"
            }

#line 627 "root_numpy/src/tree.pyx"
            __Pyx_XDECREF_SET(__pyx_v_colname, __pyx_t_8);

#line 627 "root_numpy/src/tree.pyx"
            __pyx_t_8 = 0;

            /* "root_numpy/src/tree.pyx":628
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():
 *                         colname = branch if shortname else '{0}_{1}'.format(branch, leaf)
 *                         col = bc.MakeColumn(branch, leaf, colname)             # <<<<<<<<<<<<<<
 *                         columns.push_back(col)
 *                     elif user_branches:
 */

#line 628 "root_numpy/src/tree.pyx"
            __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_v_branch); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 628 "root_numpy/src/tree.pyx"
            __pyx_t_20 = __pyx_convert_string_from_py_std__string(__pyx_v_leaf); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 628 "root_numpy/src/tree.pyx"
            __pyx_t_21 = __pyx_convert_string_from_py_std__string(__pyx_v_colname); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 628; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 628 "root_numpy/src/tree.pyx"
            __pyx_v_col = __pyx_v_bc->MakeColumn(__pyx_t_17, __pyx_t_20, __pyx_t_21);

            /* "root_numpy/src/tree.pyx":629
 *                         colname = branch if shortname else '{0}_{1}'.format(branch, leaf)
 *                         col = bc.MakeColumn(branch, leaf, colname)
 *                         columns.push_back(col)             # <<<<<<<<<<<<<<
 *                     elif user_branches:
 *                         raise TypeError(
 */

#line 629 "root_numpy/src/tree.pyx"
            __pyx_v_columns.push_back(__pyx_v_col);

#line 629 "root_numpy/src/tree.pyx"
            goto __pyx_L19;

#line 629 "root_numpy/src/tree.pyx"
          }

          /* "root_numpy/src/tree.pyx":630
 *                         col = bc.MakeColumn(branch, leaf, colname)
 *                         columns.push_back(col)
 *                     elif user_branches:             # <<<<<<<<<<<<<<
 *                         raise TypeError(
 *                             "cannot convert leaf {0} of branch {1} "
 */

#line 630 "root_numpy/src/tree.pyx"
          __pyx_t_1 = (__pyx_v_user_branches != 0);

#line 630 "root_numpy/src/tree.pyx"
          if (__pyx_t_1) {

            /* "root_numpy/src/tree.pyx":633
 *                         raise TypeError(
 *                             "cannot convert leaf {0} of branch {1} "
 *                             "with type {2} (skipping)".format(branch, leaf, ltype))             # <<<<<<<<<<<<<<
 *                     else:
 *                         warnings.warn(
 */

#line 633 "root_numpy/src/tree.pyx"
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_convert_leaf_0_of_branch, __pyx_n_s_format); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_14);

#line 633 "root_numpy/src/tree.pyx"
            __pyx_t_13 = NULL;

#line 633 "root_numpy/src/tree.pyx"
            __pyx_t_18 = 0;

#line 633 "root_numpy/src/tree.pyx"
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_14))) {

#line 633 "root_numpy/src/tree.pyx"
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_14);

#line 633 "root_numpy/src/tree.pyx"
              if (likely(__pyx_t_13)) {

#line 633 "root_numpy/src/tree.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);

#line 633 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(__pyx_t_13);

#line 633 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(function);

#line 633 "root_numpy/src/tree.pyx"
                __Pyx_DECREF_SET(__pyx_t_14, function);

#line 633 "root_numpy/src/tree.pyx"
                __pyx_t_18 = 1;

#line 633 "root_numpy/src/tree.pyx"
              }

#line 633 "root_numpy/src/tree.pyx"
            }

#line 633 "root_numpy/src/tree.pyx"
            __pyx_t_19 = PyTuple_New(3+__pyx_t_18); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_19);

#line 633 "root_numpy/src/tree.pyx"
            if (__pyx_t_13) {

#line 633 "root_numpy/src/tree.pyx"
              PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_13); __Pyx_GIVEREF(__pyx_t_13); __pyx_t_13 = NULL;

#line 633 "root_numpy/src/tree.pyx"
            }

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_v_branch);

#line 633 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_19, 0+__pyx_t_18, __pyx_v_branch);

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_v_branch);

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_v_leaf);

#line 633 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_19, 1+__pyx_t_18, __pyx_v_leaf);

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_v_leaf);

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_v_ltype);

#line 633 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_19, 2+__pyx_t_18, __pyx_v_ltype);

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_v_ltype);

#line 633 "root_numpy/src/tree.pyx"
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_19, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 633; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_8);

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

#line 633 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

            /* "root_numpy/src/tree.pyx":631
 *                         columns.push_back(col)
 *                     elif user_branches:
 *                         raise TypeError(             # <<<<<<<<<<<<<<
 *                             "cannot convert leaf {0} of branch {1} "
 *                             "with type {2} (skipping)".format(branch, leaf, ltype))
 */

#line 631 "root_numpy/src/tree.pyx"
            __pyx_t_14 = PyTuple_New(1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 631 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_14);

#line 631 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_8);

#line 631 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_8);

#line 631 "root_numpy/src/tree.pyx"
            __pyx_t_8 = 0;

#line 631 "root_numpy/src/tree.pyx"
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_14, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 631 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_8);

#line 631 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 631 "root_numpy/src/tree.pyx"
            __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 631 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 631 "root_numpy/src/tree.pyx"
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 631 "root_numpy/src/tree.pyx"
          }

#line 631 "root_numpy/src/tree.pyx"
          /*else*/ {

            /* "root_numpy/src/tree.pyx":635
 *                             "with type {2} (skipping)".format(branch, leaf, ltype))
 *                     else:
 *                         warnings.warn(             # <<<<<<<<<<<<<<
 *                             "cannot convert leaf {0} of branch {1} "
 *                             "with type {2} (skipping)".format(branch, leaf, ltype),
 */

#line 635 "root_numpy/src/tree.pyx"
            __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 635 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_14);

#line 635 "root_numpy/src/tree.pyx"
            __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_warn); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 635 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_19);

#line 635 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

            /* "root_numpy/src/tree.pyx":637
 *                         warnings.warn(
 *                             "cannot convert leaf {0} of branch {1} "
 *                             "with type {2} (skipping)".format(branch, leaf, ltype),             # <<<<<<<<<<<<<<
 *                             RootNumpyUnconvertibleWarning)
 *             else:
 */

#line 637 "root_numpy/src/tree.pyx"
            __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_convert_leaf_0_of_branch, __pyx_n_s_format); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_13);

#line 637 "root_numpy/src/tree.pyx"
            __pyx_t_15 = NULL;

#line 637 "root_numpy/src/tree.pyx"
            __pyx_t_18 = 0;

#line 637 "root_numpy/src/tree.pyx"
            if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_13))) {

#line 637 "root_numpy/src/tree.pyx"
              __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);

#line 637 "root_numpy/src/tree.pyx"
              if (likely(__pyx_t_15)) {

#line 637 "root_numpy/src/tree.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);

#line 637 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(__pyx_t_15);

#line 637 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(function);

#line 637 "root_numpy/src/tree.pyx"
                __Pyx_DECREF_SET(__pyx_t_13, function);

#line 637 "root_numpy/src/tree.pyx"
                __pyx_t_18 = 1;

#line 637 "root_numpy/src/tree.pyx"
              }

#line 637 "root_numpy/src/tree.pyx"
            }

#line 637 "root_numpy/src/tree.pyx"
            __pyx_t_22 = PyTuple_New(3+__pyx_t_18); if (unlikely(!__pyx_t_22)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_22);

#line 637 "root_numpy/src/tree.pyx"
            if (__pyx_t_15) {

#line 637 "root_numpy/src/tree.pyx"
              PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_15); __Pyx_GIVEREF(__pyx_t_15); __pyx_t_15 = NULL;

#line 637 "root_numpy/src/tree.pyx"
            }

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_v_branch);

#line 637 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_18, __pyx_v_branch);

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_v_branch);

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_v_leaf);

#line 637 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_18, __pyx_v_leaf);

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_v_leaf);

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_v_ltype);

#line 637 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_22, 2+__pyx_t_18, __pyx_v_ltype);

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_v_ltype);

#line 637 "root_numpy/src/tree.pyx"
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_22, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 637; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_14);

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;

#line 637 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "root_numpy/src/tree.pyx":638
 *                             "cannot convert leaf {0} of branch {1} "
 *                             "with type {2} (skipping)".format(branch, leaf, ltype),
 *                             RootNumpyUnconvertibleWarning)             # <<<<<<<<<<<<<<
 *             else:
 *                 # Attempt to interpret as an expression
 */

#line 638 "root_numpy/src/tree.pyx"
            __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_RootNumpyUnconvertibleWarning); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 638; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 638 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_13);

#line 638 "root_numpy/src/tree.pyx"
            __pyx_t_22 = NULL;

#line 638 "root_numpy/src/tree.pyx"
            __pyx_t_18 = 0;

#line 638 "root_numpy/src/tree.pyx"
            if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_19))) {

#line 638 "root_numpy/src/tree.pyx"
              __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_19);

#line 638 "root_numpy/src/tree.pyx"
              if (likely(__pyx_t_22)) {

#line 638 "root_numpy/src/tree.pyx"
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);

#line 638 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(__pyx_t_22);

#line 638 "root_numpy/src/tree.pyx"
                __Pyx_INCREF(function);

#line 638 "root_numpy/src/tree.pyx"
                __Pyx_DECREF_SET(__pyx_t_19, function);

#line 638 "root_numpy/src/tree.pyx"
                __pyx_t_18 = 1;

#line 638 "root_numpy/src/tree.pyx"
              }

#line 638 "root_numpy/src/tree.pyx"
            }

#line 638 "root_numpy/src/tree.pyx"
            __pyx_t_15 = PyTuple_New(2+__pyx_t_18); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 638 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_15);

#line 638 "root_numpy/src/tree.pyx"
            if (__pyx_t_22) {

#line 638 "root_numpy/src/tree.pyx"
              PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_22); __Pyx_GIVEREF(__pyx_t_22); __pyx_t_22 = NULL;

#line 638 "root_numpy/src/tree.pyx"
            }

#line 638 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_15, 0+__pyx_t_18, __pyx_t_14);

#line 638 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_14);

#line 638 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_15, 1+__pyx_t_18, __pyx_t_13);

#line 638 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_t_13);

#line 638 "root_numpy/src/tree.pyx"
            __pyx_t_14 = 0;

#line 638 "root_numpy/src/tree.pyx"
            __pyx_t_13 = 0;

#line 638 "root_numpy/src/tree.pyx"
            __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_15, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 635; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 638 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_8);

#line 638 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 638 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

#line 638 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 638 "root_numpy/src/tree.pyx"
          }

#line 638 "root_numpy/src/tree.pyx"
          __pyx_L19:;

          /* "root_numpy/src/tree.pyx":625
 *                 leaves = structure[branch]
 *                 shortname = len(leaves) == 1
 *                 for leaf, ltype in leaves:             # <<<<<<<<<<<<<<
 *                     if CONVERTERS.find(ltype) != CONVERTERS.end():
 *                         colname = branch if shortname else '{0}_{1}'.format(branch, leaf)
 */

#line 625 "root_numpy/src/tree.pyx"
        }

#line 625 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 625 "root_numpy/src/tree.pyx"
        goto __pyx_L14;

#line 625 "root_numpy/src/tree.pyx"
      }

#line 625 "root_numpy/src/tree.pyx"
      /*else*/ {

        /* "root_numpy/src/tree.pyx":641
 *             else:
 *                 # Attempt to interpret as an expression
 *                 c_string = branch             # <<<<<<<<<<<<<<
 *                 formula = new TTreeFormula(c_string, c_string, bc.fChain)
 *                 if formula == NULL or formula.GetNdim() == 0:
 */

#line 641 "root_numpy/src/tree.pyx"
        __pyx_t_4 = __Pyx_PyObject_AsString(__pyx_v_branch); if (unlikely((!__pyx_t_4) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 641; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 641 "root_numpy/src/tree.pyx"
        __pyx_v_c_string = __pyx_t_4;

        /* "root_numpy/src/tree.pyx":642
 *                 # Attempt to interpret as an expression
 *                 c_string = branch
 *                 formula = new TTreeFormula(c_string, c_string, bc.fChain)             # <<<<<<<<<<<<<<
 *                 if formula == NULL or formula.GetNdim() == 0:
 *                     del formula
 */

#line 642 "root_numpy/src/tree.pyx"
        __pyx_v_formula = new TTreeFormula(__pyx_v_c_string, __pyx_v_c_string, __pyx_v_bc->fChain);

        /* "root_numpy/src/tree.pyx":643
 *                 c_string = branch
 *                 formula = new TTreeFormula(c_string, c_string, bc.fChain)
 *                 if formula == NULL or formula.GetNdim() == 0:             # <<<<<<<<<<<<<<
 *                     del formula
 *                     raise ValueError(
 */

#line 643 "root_numpy/src/tree.pyx"
        __pyx_t_5 = ((__pyx_v_formula == NULL) != 0);

#line 643 "root_numpy/src/tree.pyx"
        if (!__pyx_t_5) {

#line 643 "root_numpy/src/tree.pyx"
        } else {

#line 643 "root_numpy/src/tree.pyx"
          __pyx_t_1 = __pyx_t_5;

#line 643 "root_numpy/src/tree.pyx"
          goto __pyx_L21_bool_binop_done;

#line 643 "root_numpy/src/tree.pyx"
        }

#line 643 "root_numpy/src/tree.pyx"
        __pyx_t_5 = ((__pyx_v_formula->GetNdim() == 0) != 0);

#line 643 "root_numpy/src/tree.pyx"
        __pyx_t_1 = __pyx_t_5;

#line 643 "root_numpy/src/tree.pyx"
        __pyx_L21_bool_binop_done:;

#line 643 "root_numpy/src/tree.pyx"
        if (__pyx_t_1) {

          /* "root_numpy/src/tree.pyx":644
 *                 formula = new TTreeFormula(c_string, c_string, bc.fChain)
 *                 if formula == NULL or formula.GetNdim() == 0:
 *                     del formula             # <<<<<<<<<<<<<<
 *                     raise ValueError(
 *                         "the branch or expression {0} "
 */

#line 644 "root_numpy/src/tree.pyx"
          delete __pyx_v_formula;

          /* "root_numpy/src/tree.pyx":647
 *                     raise ValueError(
 *                         "the branch or expression {0} "
 *                         "is not present or valid".format(branch))             # <<<<<<<<<<<<<<
 *                 # The chain will take care of updating the formula leaves when
 *                 # rolling over to the next tree.
 */

#line 647 "root_numpy/src/tree.pyx"
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_the_branch_or_expression_0_is_no, __pyx_n_s_format); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 647 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 647 "root_numpy/src/tree.pyx"
          __pyx_t_19 = NULL;

#line 647 "root_numpy/src/tree.pyx"
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {

#line 647 "root_numpy/src/tree.pyx"
            __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_8);

#line 647 "root_numpy/src/tree.pyx"
            if (likely(__pyx_t_19)) {

#line 647 "root_numpy/src/tree.pyx"
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 647 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(__pyx_t_19);

#line 647 "root_numpy/src/tree.pyx"
              __Pyx_INCREF(function);

#line 647 "root_numpy/src/tree.pyx"
              __Pyx_DECREF_SET(__pyx_t_8, function);

#line 647 "root_numpy/src/tree.pyx"
            }

#line 647 "root_numpy/src/tree.pyx"
          }

#line 647 "root_numpy/src/tree.pyx"
          if (!__pyx_t_19) {

#line 647 "root_numpy/src/tree.pyx"
            __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_branch); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 647 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_7);

#line 647 "root_numpy/src/tree.pyx"
          } else {

#line 647 "root_numpy/src/tree.pyx"
            __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 647 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_15);

#line 647 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_19); __Pyx_GIVEREF(__pyx_t_19); __pyx_t_19 = NULL;

#line 647 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_v_branch);

#line 647 "root_numpy/src/tree.pyx"
            PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_v_branch);

#line 647 "root_numpy/src/tree.pyx"
            __Pyx_GIVEREF(__pyx_v_branch);

#line 647 "root_numpy/src/tree.pyx"
            __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 647; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 647 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_7);

#line 647 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 647 "root_numpy/src/tree.pyx"
          }

#line 647 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

          /* "root_numpy/src/tree.pyx":645
 *                 if formula == NULL or formula.GetNdim() == 0:
 *                     del formula
 *                     raise ValueError(             # <<<<<<<<<<<<<<
 *                         "the branch or expression {0} "
 *                         "is not present or valid".format(branch))
 */

#line 645 "root_numpy/src/tree.pyx"
          __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 645 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_8);

#line 645 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 645 "root_numpy/src/tree.pyx"
          __Pyx_GIVEREF(__pyx_t_7);

#line 645 "root_numpy/src/tree.pyx"
          __pyx_t_7 = 0;

#line 645 "root_numpy/src/tree.pyx"
          __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 645 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 645 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 645 "root_numpy/src/tree.pyx"
          __Pyx_Raise(__pyx_t_7, 0, 0, 0);

#line 645 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 645 "root_numpy/src/tree.pyx"
          {__pyx_filename = __pyx_f[1]; __pyx_lineno = 645; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 645 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":650
 *                 # The chain will take care of updating the formula leaves when
 *                 # rolling over to the next tree.
 *                 bc.AddFormula(formula)             # <<<<<<<<<<<<<<
 *                 col = new FormulaColumn(branch, formula)
 *                 columns.push_back(col)
 */

#line 650 "root_numpy/src/tree.pyx"
        __pyx_v_bc->AddFormula(__pyx_v_formula);

        /* "root_numpy/src/tree.pyx":651
 *                 # rolling over to the next tree.
 *                 bc.AddFormula(formula)
 *                 col = new FormulaColumn(branch, formula)             # <<<<<<<<<<<<<<
 *                 columns.push_back(col)
 * 
 */

#line 651 "root_numpy/src/tree.pyx"
        __pyx_t_21 = __pyx_convert_string_from_py_std__string(__pyx_v_branch); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 651; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 651 "root_numpy/src/tree.pyx"
        __pyx_v_col = new FormulaColumn(__pyx_t_21, __pyx_v_formula);

        /* "root_numpy/src/tree.pyx":652
 *                 bc.AddFormula(formula)
 *                 col = new FormulaColumn(branch, formula)
 *                 columns.push_back(col)             # <<<<<<<<<<<<<<
 * 
 *         if columns.size() == 0:
 */

#line 652 "root_numpy/src/tree.pyx"
        __pyx_v_columns.push_back(__pyx_v_col);

#line 652 "root_numpy/src/tree.pyx"
      }

#line 652 "root_numpy/src/tree.pyx"
      __pyx_L14:;

      /* "root_numpy/src/tree.pyx":621
 *             user_branches = True
 * 
 *         for branch in branches:             # <<<<<<<<<<<<<<
 *             if branch in structure:
 *                 leaves = structure[branch]
 */

#line 621 "root_numpy/src/tree.pyx"
    }

#line 621 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":654
 *                 columns.push_back(col)
 * 
 *         if columns.size() == 0:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("unable to convert any branches in this tree")
 * 
 */

#line 654 "root_numpy/src/tree.pyx"
    __pyx_t_1 = ((__pyx_v_columns.size() == 0) != 0);

#line 654 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":655
 * 
 *         if columns.size() == 0:
 *             raise RuntimeError("unable to convert any branches in this tree")             # <<<<<<<<<<<<<<
 * 
 *         # Activate branches used by formulae and columns
 */

#line 655 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 655 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 655 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 655 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 655 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 655 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":659
 *         # Activate branches used by formulae and columns
 *         # and deactivate all others
 *         bc.InitBranches()             # <<<<<<<<<<<<<<
 * 
 *         # Now that we have all the columns we can
 */

#line 659 "root_numpy/src/tree.pyx"
    __pyx_v_bc->InitBranches();

    /* "root_numpy/src/tree.pyx":663
 *         # Now that we have all the columns we can
 *         # make an appropriate array structure
 *         arr = init_array(columns, conv_array, num_entries,             # <<<<<<<<<<<<<<
 *                          include_weight, weight_name)
 *         # Exclude weight column
 */

#line 663 "root_numpy/src/tree.pyx"
    __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_init_array(__pyx_v_columns, __pyx_v_conv_array, __pyx_v_num_entries, __pyx_v_include_weight, __pyx_v_weight_name)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 663; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 663 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 663 "root_numpy/src/tree.pyx"
    __pyx_v_arr = ((PyArrayObject *)__pyx_t_2);

#line 663 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":666
 *                          include_weight, weight_name)
 *         # Exclude weight column
 *         numcol = columns.size()             # <<<<<<<<<<<<<<
 * 
 *         indices = slice(start, stop, step).indices(num_entries)
 */

#line 666 "root_numpy/src/tree.pyx"
    __pyx_v_numcol = __pyx_v_columns.size();

    /* "root_numpy/src/tree.pyx":668
 *         numcol = columns.size()
 * 
 *         indices = slice(start, stop, step).indices(num_entries)             # <<<<<<<<<<<<<<
 *         for ientry in xrange(*indices):
 *             entry_size = bc.GetEntry(ientry)
 */

#line 668 "root_numpy/src/tree.pyx"
    __pyx_t_7 = PySlice_New(__pyx_v_start, __pyx_v_stop, __pyx_v_step); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 668 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 668 "root_numpy/src/tree.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_indices); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 668 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 668 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 668 "root_numpy/src/tree.pyx"
    __pyx_t_7 = __Pyx_PyInt_From_int(__pyx_v_num_entries); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 668 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 668 "root_numpy/src/tree.pyx"
    __pyx_t_15 = NULL;

#line 668 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {

#line 668 "root_numpy/src/tree.pyx"
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_8);

#line 668 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_15)) {

#line 668 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 668 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_15);

#line 668 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 668 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_8, function);

#line 668 "root_numpy/src/tree.pyx"
      }

#line 668 "root_numpy/src/tree.pyx"
    }

#line 668 "root_numpy/src/tree.pyx"
    if (!__pyx_t_15) {

#line 668 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_7); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 668 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 668 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 668 "root_numpy/src/tree.pyx"
    } else {

#line 668 "root_numpy/src/tree.pyx"
      __pyx_t_19 = PyTuple_New(1+1); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 668 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_19);

#line 668 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_15); __Pyx_GIVEREF(__pyx_t_15); __pyx_t_15 = NULL;

#line 668 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_19, 0+1, __pyx_t_7);

#line 668 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_7);

#line 668 "root_numpy/src/tree.pyx"
      __pyx_t_7 = 0;

#line 668 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_19, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 668; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 668 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 668 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

#line 668 "root_numpy/src/tree.pyx"
    }

#line 668 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 668 "root_numpy/src/tree.pyx"
    __pyx_v_indices = __pyx_t_2;

#line 668 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":669
 * 
 *         indices = slice(start, stop, step).indices(num_entries)
 *         for ientry in xrange(*indices):             # <<<<<<<<<<<<<<
 *             entry_size = bc.GetEntry(ientry)
 *             handle_load(entry_size)
 */

#line 669 "root_numpy/src/tree.pyx"
    __pyx_t_2 = PySequence_Tuple(__pyx_v_indices); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 669 "root_numpy/src/tree.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 669 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 669 "root_numpy/src/tree.pyx"
    if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {

#line 669 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __pyx_t_8; __Pyx_INCREF(__pyx_t_2); __pyx_t_10 = 0;

#line 669 "root_numpy/src/tree.pyx"
      __pyx_t_11 = NULL;

#line 669 "root_numpy/src/tree.pyx"
    } else {
      __pyx_t_10 = -1; 
#line 669 "root_numpy/src/tree.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 669 "root_numpy/src/tree.pyx"
      __pyx_t_11 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
    }

#line 669 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 669 "root_numpy/src/tree.pyx"
    for (;;) {

#line 669 "root_numpy/src/tree.pyx"
      if (likely(!__pyx_t_11)) {

#line 669 "root_numpy/src/tree.pyx"
        if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 669 "root_numpy/src/tree.pyx"
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 669 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 669 "root_numpy/src/tree.pyx"
          __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
          #else

#line 669 "root_numpy/src/tree.pyx"
          __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
          #endif

#line 669 "root_numpy/src/tree.pyx"
        } else {

#line 669 "root_numpy/src/tree.pyx"
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 669 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 669 "root_numpy/src/tree.pyx"
          __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
          #else

#line 669 "root_numpy/src/tree.pyx"
          __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
          #endif

#line 669 "root_numpy/src/tree.pyx"
        }
      } else 
#line 669 "root_numpy/src/tree.pyx"
{

#line 669 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __pyx_t_11(__pyx_t_2);

#line 669 "root_numpy/src/tree.pyx"
        if (unlikely(!__pyx_t_8)) {

#line 669 "root_numpy/src/tree.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 669 "root_numpy/src/tree.pyx"
          if (exc_type) {

#line 669 "root_numpy/src/tree.pyx"
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 669 "root_numpy/src/tree.pyx"
            else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
          }

#line 669 "root_numpy/src/tree.pyx"
          break;

#line 669 "root_numpy/src/tree.pyx"
        }

#line 669 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 669 "root_numpy/src/tree.pyx"
      }

#line 669 "root_numpy/src/tree.pyx"
      __pyx_t_23 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_23 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 669 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 669 "root_numpy/src/tree.pyx"
      __pyx_v_ientry = __pyx_t_23;

      /* "root_numpy/src/tree.pyx":670
 *         indices = slice(start, stop, step).indices(num_entries)
 *         for ientry in xrange(*indices):
 *             entry_size = bc.GetEntry(ientry)             # <<<<<<<<<<<<<<
 *             handle_load(entry_size)
 *             if entry_size == 0:
 */

#line 670 "root_numpy/src/tree.pyx"
      __pyx_v_entry_size = __pyx_v_bc->GetEntry(__pyx_v_ientry);

      /* "root_numpy/src/tree.pyx":671
 *         for ientry in xrange(*indices):
 *             entry_size = bc.GetEntry(ientry)
 *             handle_load(entry_size)             # <<<<<<<<<<<<<<
 *             if entry_size == 0:
 *                 raise IOError("read failure in current tree")
 */

#line 671 "root_numpy/src/tree.pyx"
      __pyx_t_8 = __pyx_f_13_librootnumpy_handle_load(__pyx_v_entry_size, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 671; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 671 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 671 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "root_numpy/src/tree.pyx":672
 *             entry_size = bc.GetEntry(ientry)
 *             handle_load(entry_size)
 *             if entry_size == 0:             # <<<<<<<<<<<<<<
 *                 raise IOError("read failure in current tree")
 * 
 */

#line 672 "root_numpy/src/tree.pyx"
      __pyx_t_1 = ((__pyx_v_entry_size == 0) != 0);

#line 672 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":673
 *             handle_load(entry_size)
 *             if entry_size == 0:
 *                 raise IOError("read failure in current tree")             # <<<<<<<<<<<<<<
 * 
 *             # Determine if this entry passes the selection,
 */

#line 673 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 673 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 673 "root_numpy/src/tree.pyx"
        __Pyx_Raise(__pyx_t_8, 0, 0, 0);

#line 673 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 673 "root_numpy/src/tree.pyx"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 673 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":677
 *             # Determine if this entry passes the selection,
 *             # similar to the code in ROOT's tree/treeplayer/src/TTreePlayer.cxx
 *             if selection_formula != NULL:             # <<<<<<<<<<<<<<
 *                 selection_formula.GetNdata() # required, as in TTreePlayer
 *                 if selection_formula.EvalInstance(0) == 0:
 */

#line 677 "root_numpy/src/tree.pyx"
      __pyx_t_1 = ((__pyx_v_selection_formula != NULL) != 0);

#line 677 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":678
 *             # similar to the code in ROOT's tree/treeplayer/src/TTreePlayer.cxx
 *             if selection_formula != NULL:
 *                 selection_formula.GetNdata() # required, as in TTreePlayer             # <<<<<<<<<<<<<<
 *                 if selection_formula.EvalInstance(0) == 0:
 *                     continue
 */

#line 678 "root_numpy/src/tree.pyx"
        __pyx_v_selection_formula->GetNdata();

        /* "root_numpy/src/tree.pyx":679
 *             if selection_formula != NULL:
 *                 selection_formula.GetNdata() # required, as in TTreePlayer
 *                 if selection_formula.EvalInstance(0) == 0:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */

#line 679 "root_numpy/src/tree.pyx"
        __pyx_t_1 = ((__pyx_v_selection_formula->EvalInstance(0) == 0.0) != 0);

#line 679 "root_numpy/src/tree.pyx"
        if (__pyx_t_1) {

          /* "root_numpy/src/tree.pyx":680
 *                 selection_formula.GetNdata() # required, as in TTreePlayer
 *                 if selection_formula.EvalInstance(0) == 0:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             # Copy the values into the array
 */

#line 680 "root_numpy/src/tree.pyx"
          goto __pyx_L24_continue;

#line 680 "root_numpy/src/tree.pyx"
        }

#line 680 "root_numpy/src/tree.pyx"
        goto __pyx_L27;

#line 680 "root_numpy/src/tree.pyx"
      }

#line 680 "root_numpy/src/tree.pyx"
      __pyx_L27:;

      /* "root_numpy/src/tree.pyx":683
 * 
 *             # Copy the values into the array
 *             dataptr = np.PyArray_GETPTR1(arr, num_entries_selected)             # <<<<<<<<<<<<<<
 *             for icol in xrange(numcol):
 *                 col = columns[icol]
 */

#line 683 "root_numpy/src/tree.pyx"
      __pyx_v_dataptr = PyArray_GETPTR1(__pyx_v_arr, __pyx_v_num_entries_selected);

      /* "root_numpy/src/tree.pyx":684
 *             # Copy the values into the array
 *             dataptr = np.PyArray_GETPTR1(arr, num_entries_selected)
 *             for icol in xrange(numcol):             # <<<<<<<<<<<<<<
 *                 col = columns[icol]
 *                 conv = conv_array[icol]
 */

#line 684 "root_numpy/src/tree.pyx"
      __pyx_t_24 = __pyx_v_numcol;

#line 684 "root_numpy/src/tree.pyx"
      for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_24; __pyx_t_25+=1) {

#line 684 "root_numpy/src/tree.pyx"
        __pyx_v_icol = __pyx_t_25;

        /* "root_numpy/src/tree.pyx":685
 *             dataptr = np.PyArray_GETPTR1(arr, num_entries_selected)
 *             for icol in xrange(numcol):
 *                 col = columns[icol]             # <<<<<<<<<<<<<<
 *                 conv = conv_array[icol]
 *                 nb = conv.write(col, dataptr)
 */

#line 685 "root_numpy/src/tree.pyx"
        __pyx_v_col = (__pyx_v_columns[__pyx_v_icol]);

        /* "root_numpy/src/tree.pyx":686
 *             for icol in xrange(numcol):
 *                 col = columns[icol]
 *                 conv = conv_array[icol]             # <<<<<<<<<<<<<<
 *                 nb = conv.write(col, dataptr)
 *                 # poorman pointer magic
 */

#line 686 "root_numpy/src/tree.pyx"
        __pyx_v_conv = (__pyx_v_conv_array[__pyx_v_icol]);

        /* "root_numpy/src/tree.pyx":687
 *                 col = columns[icol]
 *                 conv = conv_array[icol]
 *                 nb = conv.write(col, dataptr)             # <<<<<<<<<<<<<<
 *                 # poorman pointer magic
 *                 dataptr = shift(dataptr, nb)
 */

#line 687 "root_numpy/src/tree.pyx"
        __pyx_v_nb = __pyx_v_conv->write(__pyx_v_col, __pyx_v_dataptr);

        /* "root_numpy/src/tree.pyx":689
 *                 nb = conv.write(col, dataptr)
 *                 # poorman pointer magic
 *                 dataptr = shift(dataptr, nb)             # <<<<<<<<<<<<<<
 *             if include_weight:
 *                 (<double*> dataptr)[0] = bc.GetWeight()
 */

#line 689 "root_numpy/src/tree.pyx"
        __pyx_v_dataptr = shift(__pyx_v_dataptr, __pyx_v_nb);

#line 689 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":690
 *                 # poorman pointer magic
 *                 dataptr = shift(dataptr, nb)
 *             if include_weight:             # <<<<<<<<<<<<<<
 *                 (<double*> dataptr)[0] = bc.GetWeight()
 * 
 */

#line 690 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_include_weight); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 690; __pyx_clineno = __LINE__; goto __pyx_L5_error;}

#line 690 "root_numpy/src/tree.pyx"
      if (__pyx_t_1) {

        /* "root_numpy/src/tree.pyx":691
 *                 dataptr = shift(dataptr, nb)
 *             if include_weight:
 *                 (<double*> dataptr)[0] = bc.GetWeight()             # <<<<<<<<<<<<<<
 * 
 *             # Increment number of selected entries last
 */

#line 691 "root_numpy/src/tree.pyx"
        (((double *)__pyx_v_dataptr)[0]) = __pyx_v_bc->GetWeight();

#line 691 "root_numpy/src/tree.pyx"
        goto __pyx_L31;

#line 691 "root_numpy/src/tree.pyx"
      }

#line 691 "root_numpy/src/tree.pyx"
      __pyx_L31:;

      /* "root_numpy/src/tree.pyx":694
 * 
 *             # Increment number of selected entries last
 *             num_entries_selected += 1             # <<<<<<<<<<<<<<
 *     finally:
 *         del bc
 */

#line 694 "root_numpy/src/tree.pyx"
      __pyx_v_num_entries_selected = (__pyx_v_num_entries_selected + 1);

      /* "root_numpy/src/tree.pyx":669
 * 
 *         indices = slice(start, stop, step).indices(num_entries)
 *         for ientry in xrange(*indices):             # <<<<<<<<<<<<<<
 *             entry_size = bc.GetEntry(ientry)
 *             handle_load(entry_size)
 */

#line 669 "root_numpy/src/tree.pyx"
      __pyx_L24_continue:;

#line 669 "root_numpy/src/tree.pyx"
    }

#line 669 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 669 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":696
 *             num_entries_selected += 1
 *     finally:
 *         del bc             # <<<<<<<<<<<<<<
 * 
 *     # If we selected fewer than num_entries entries then shrink the array
 */

#line 696 "root_numpy/src/tree.pyx"
  /*finally:*/ {

#line 696 "root_numpy/src/tree.pyx"
    /*normal exit:*/{

#line 696 "root_numpy/src/tree.pyx"
      delete __pyx_v_bc;

#line 696 "root_numpy/src/tree.pyx"
      goto __pyx_L6;

#line 696 "root_numpy/src/tree.pyx"
    }

#line 696 "root_numpy/src/tree.pyx"
    /*exception exit:*/{

#line 696 "root_numpy/src/tree.pyx"
      __pyx_L5_error:;

#line 696 "root_numpy/src/tree.pyx"
      __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0; __pyx_t_32 = 0; __pyx_t_33 = 0;

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 696 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_31, &__pyx_t_32, &__pyx_t_33);

#line 696 "root_numpy/src/tree.pyx"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_28, &__pyx_t_29, &__pyx_t_30) < 0)) __Pyx_ErrFetch(&__pyx_t_28, &__pyx_t_29, &__pyx_t_30);

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_28);

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_29);

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_30);

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_31);

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_32);

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_33);

#line 696 "root_numpy/src/tree.pyx"
      __pyx_t_23 = __pyx_lineno; __pyx_t_26 = __pyx_clineno; __pyx_t_27 = __pyx_filename;

#line 696 "root_numpy/src/tree.pyx"
      {

#line 696 "root_numpy/src/tree.pyx"
        delete __pyx_v_bc;

#line 696 "root_numpy/src/tree.pyx"
      }

#line 696 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) {

#line 696 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_31);

#line 696 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_32);

#line 696 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_33);

#line 696 "root_numpy/src/tree.pyx"
        __Pyx_ExceptionReset(__pyx_t_31, __pyx_t_32, __pyx_t_33);

#line 696 "root_numpy/src/tree.pyx"
      }

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_28);

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_29);

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_30);

#line 696 "root_numpy/src/tree.pyx"
      __Pyx_ErrRestore(__pyx_t_28, __pyx_t_29, __pyx_t_30);

#line 696 "root_numpy/src/tree.pyx"
      __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0; __pyx_t_32 = 0; __pyx_t_33 = 0;

#line 696 "root_numpy/src/tree.pyx"
      __pyx_lineno = __pyx_t_23; __pyx_clineno = __pyx_t_26; __pyx_filename = __pyx_t_27;

#line 696 "root_numpy/src/tree.pyx"
      goto __pyx_L1_error;

#line 696 "root_numpy/src/tree.pyx"
    }

#line 696 "root_numpy/src/tree.pyx"
    __pyx_L6:;

#line 696 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":699
 * 
 *     # If we selected fewer than num_entries entries then shrink the array
 *     if num_entries_selected < num_entries:             # <<<<<<<<<<<<<<
 *         arr.resize(num_entries_selected)
 * 
 */

#line 699 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((__pyx_v_num_entries_selected < __pyx_v_num_entries) != 0);

#line 699 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":700
 *     # If we selected fewer than num_entries entries then shrink the array
 *     if num_entries_selected < num_entries:
 *         arr.resize(num_entries_selected)             # <<<<<<<<<<<<<<
 * 
 *     return arr
 */

#line 700 "root_numpy/src/tree.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_arr), __pyx_n_s_resize); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 700 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 700 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __Pyx_PyInt_From_int(__pyx_v_num_entries_selected); if (unlikely(!__pyx_t_19)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 700 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_19);

#line 700 "root_numpy/src/tree.pyx"
    __pyx_t_7 = NULL;

#line 700 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {

#line 700 "root_numpy/src/tree.pyx"
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);

#line 700 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_7)) {

#line 700 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 700 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_7);

#line 700 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 700 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_8, function);

#line 700 "root_numpy/src/tree.pyx"
      }

#line 700 "root_numpy/src/tree.pyx"
    }

#line 700 "root_numpy/src/tree.pyx"
    if (!__pyx_t_7) {

#line 700 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_19); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 700 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

#line 700 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 700 "root_numpy/src/tree.pyx"
    } else {

#line 700 "root_numpy/src/tree.pyx"
      __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 700 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 700 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;

#line 700 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_19);

#line 700 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_19);

#line 700 "root_numpy/src/tree.pyx"
      __pyx_t_19 = 0;

#line 700 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_15, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 700; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 700 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 700 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 700 "root_numpy/src/tree.pyx"
    }

#line 700 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 700 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 700 "root_numpy/src/tree.pyx"
    goto __pyx_L34;

#line 700 "root_numpy/src/tree.pyx"
  }

#line 700 "root_numpy/src/tree.pyx"
  __pyx_L34:;

  /* "root_numpy/src/tree.pyx":702
 *         arr.resize(num_entries_selected)
 * 
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 702 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 702 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 702 "root_numpy/src/tree.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 702 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":568
 * 
 * 
 * cdef object tree2array(TTree* tree, branches, selection,             # <<<<<<<<<<<<<<
 *                        start, stop, step,
 *                        include_weight, weight_name):
 */

#line 568 "root_numpy/src/tree.pyx"


#line 568 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 568 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_14);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_15);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_19);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_22);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.tree2array", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 568 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 568 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_structure);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_branch);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_leaves);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_shortname);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_leaf);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_ltype);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_colname);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_indices);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_branches);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 568 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 568 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 568 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":705
 * 
 * 
 * def root2array_fromFname(fnames, treename, branches,             # <<<<<<<<<<<<<<
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 */

#line 705 "root_numpy/src/tree.pyx"


#line 705 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 705 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_7root2array_fromFname(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_7root2array_fromFname = 
#line 705 "root_numpy/src/tree.pyx"
{"root2array_fromFname", (PyCFunction)__pyx_pw_13_librootnumpy_7root2array_fromFname, METH_VARARGS|METH_KEYWORDS, 0};

#line 705 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_7root2array_fromFname(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_fnames = 0
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_treename = 0
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_branches = 0
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_selection = 0
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_start = 0
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_stop = 0
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_step = 0
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_include_weight = 0
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_weight_name = 0
#line 705 "root_numpy/src/tree.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 705 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("root2array_fromFname (wrapper)", 0);

#line 705 "root_numpy/src/tree.pyx"
  {

#line 705 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_fnames,&__pyx_n_s_treename,&__pyx_n_s_branches,&__pyx_n_s_selection,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_step,&__pyx_n_s_include_weight,&__pyx_n_s_weight_name,0};

#line 705 "root_numpy/src/tree.pyx"
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};

#line 705 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 705 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 705 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 705 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  9: 
#line 705 "root_numpy/src/tree.pyx"
values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        case  8: 
#line 705 "root_numpy/src/tree.pyx"
values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: 
#line 705 "root_numpy/src/tree.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: 
#line 705 "root_numpy/src/tree.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 705 "root_numpy/src/tree.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 705 "root_numpy/src/tree.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 705 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 705 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 705 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 705 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 705 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 705 "root_numpy/src/tree.pyx"
      }

#line 705 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 705 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 705 "root_numpy/src/tree.pyx"
        case  0:

#line 705 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fnames)) != 0)) kw_args--;
        else 
#line 705 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 705 "root_numpy/src/tree.pyx"
        case  1:

#line 705 "root_numpy/src/tree.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_treename)) != 0)) kw_args--;

#line 705 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 1); 
#line 705 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
        }

#line 705 "root_numpy/src/tree.pyx"
        case  2:

#line 705 "root_numpy/src/tree.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_branches)) != 0)) kw_args--;

#line 705 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 2); 
#line 705 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
        }

#line 705 "root_numpy/src/tree.pyx"
        case  3:

#line 705 "root_numpy/src/tree.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_selection)) != 0)) kw_args--;

#line 705 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 3); 
#line 705 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
        }

#line 705 "root_numpy/src/tree.pyx"
        case  4:

#line 705 "root_numpy/src/tree.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;

#line 705 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 4); 
#line 705 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
        }

#line 705 "root_numpy/src/tree.pyx"
        case  5:

#line 705 "root_numpy/src/tree.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stop)) != 0)) kw_args--;

#line 705 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 5); 
#line 705 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
        }

#line 705 "root_numpy/src/tree.pyx"
        case  6:

#line 705 "root_numpy/src/tree.pyx"
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;

#line 705 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 6); 
#line 705 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
        }

#line 705 "root_numpy/src/tree.pyx"
        case  7:

#line 705 "root_numpy/src/tree.pyx"
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_include_weight)) != 0)) kw_args--;

#line 705 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 7); 
#line 705 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
        }

#line 705 "root_numpy/src/tree.pyx"
        case  8:

#line 705 "root_numpy/src/tree.pyx"
        if (likely((values[8] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weight_name)) != 0)) kw_args--;

#line 705 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, 8); 
#line 705 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
        }

#line 705 "root_numpy/src/tree.pyx"
      }

#line 705 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 705 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "root2array_fromFname") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
      }

#line 705 "root_numpy/src/tree.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {

#line 705 "root_numpy/src/tree.pyx"
      goto __pyx_L5_argtuple_error;

#line 705 "root_numpy/src/tree.pyx"
    } else {

#line 705 "root_numpy/src/tree.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 705 "root_numpy/src/tree.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 705 "root_numpy/src/tree.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 705 "root_numpy/src/tree.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 705 "root_numpy/src/tree.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 705 "root_numpy/src/tree.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 705 "root_numpy/src/tree.pyx"
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 705 "root_numpy/src/tree.pyx"
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

#line 705 "root_numpy/src/tree.pyx"
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);

#line 705 "root_numpy/src/tree.pyx"
    }

#line 705 "root_numpy/src/tree.pyx"
    __pyx_v_fnames = values[0];

#line 705 "root_numpy/src/tree.pyx"
    __pyx_v_treename = values[1];

#line 705 "root_numpy/src/tree.pyx"
    __pyx_v_branches = values[2];

#line 705 "root_numpy/src/tree.pyx"
    __pyx_v_selection = values[3];

#line 705 "root_numpy/src/tree.pyx"
    __pyx_v_start = values[4];

#line 705 "root_numpy/src/tree.pyx"
    __pyx_v_stop = values[5];

#line 705 "root_numpy/src/tree.pyx"
    __pyx_v_step = values[6];

#line 705 "root_numpy/src/tree.pyx"
    __pyx_v_include_weight = values[7];

#line 705 "root_numpy/src/tree.pyx"
    __pyx_v_weight_name = values[8];

#line 705 "root_numpy/src/tree.pyx"
  }

#line 705 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 705 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("root2array_fromFname", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); 
#line 705 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 705 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.root2array_fromFname", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 705 "root_numpy/src/tree.pyx"
  return NULL;

#line 705 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 705 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_6root2array_fromFname(__pyx_self, __pyx_v_fnames, __pyx_v_treename, __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name);

#line 705 "root_numpy/src/tree.pyx"


#line 705 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 705 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 705 "root_numpy/src/tree.pyx"
}

#line 705 "root_numpy/src/tree.pyx"


#line 705 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_6root2array_fromFname(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_fnames, PyObject *__pyx_v_treename, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name) {
  TChain *__pyx_v_ttree
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_fn = NULL
#line 705 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_ret = NULL
#line 705 "root_numpy/src/tree.pyx"
;

#line 705 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("root2array_fromFname", 0);

  /* "root_numpy/src/tree.pyx":708
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 *     cdef TChain* ttree = NULL             # <<<<<<<<<<<<<<
 *     try:
 *         ttree = new TChain(treename)
 */

#line 708 "root_numpy/src/tree.pyx"
  __pyx_v_ttree = NULL;

  /* "root_numpy/src/tree.pyx":709
 *                          include_weight, weight_name):
 *     cdef TChain* ttree = NULL
 *     try:             # <<<<<<<<<<<<<<
 *         ttree = new TChain(treename)
 *         for fn in fnames:
 */

#line 709 "root_numpy/src/tree.pyx"
  /*try:*/ {

    /* "root_numpy/src/tree.pyx":710
 *     cdef TChain* ttree = NULL
 *     try:
 *         ttree = new TChain(treename)             # <<<<<<<<<<<<<<
 *         for fn in fnames:
 *             if ttree.Add(fn, -1) == 0:
 */

#line 710 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_treename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 710; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 710 "root_numpy/src/tree.pyx"
    __pyx_v_ttree = new TChain(__pyx_t_1);

    /* "root_numpy/src/tree.pyx":711
 *     try:
 *         ttree = new TChain(treename)
 *         for fn in fnames:             # <<<<<<<<<<<<<<
 *             if ttree.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 */

#line 711 "root_numpy/src/tree.pyx"
    if (likely(PyList_CheckExact(__pyx_v_fnames)) || PyTuple_CheckExact(__pyx_v_fnames)) {

#line 711 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __pyx_v_fnames; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;

#line 711 "root_numpy/src/tree.pyx"
      __pyx_t_4 = NULL;

#line 711 "root_numpy/src/tree.pyx"
    } else {
      __pyx_t_3 = -1; 
#line 711 "root_numpy/src/tree.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_fnames); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 711 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 711 "root_numpy/src/tree.pyx"
      __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 711 "root_numpy/src/tree.pyx"
    }

#line 711 "root_numpy/src/tree.pyx"
    for (;;) {

#line 711 "root_numpy/src/tree.pyx"
      if (likely(!__pyx_t_4)) {

#line 711 "root_numpy/src/tree.pyx"
        if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 711 "root_numpy/src/tree.pyx"
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 711 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 711 "root_numpy/src/tree.pyx"
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 711 "root_numpy/src/tree.pyx"
          #else

#line 711 "root_numpy/src/tree.pyx"
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 711 "root_numpy/src/tree.pyx"
          #endif

#line 711 "root_numpy/src/tree.pyx"
        } else {

#line 711 "root_numpy/src/tree.pyx"
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 711 "root_numpy/src/tree.pyx"
          #if CYTHON_COMPILING_IN_CPYTHON

#line 711 "root_numpy/src/tree.pyx"
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 711 "root_numpy/src/tree.pyx"
          #else

#line 711 "root_numpy/src/tree.pyx"
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 711 "root_numpy/src/tree.pyx"
          #endif

#line 711 "root_numpy/src/tree.pyx"
        }
      } else 
#line 711 "root_numpy/src/tree.pyx"
{

#line 711 "root_numpy/src/tree.pyx"
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);

#line 711 "root_numpy/src/tree.pyx"
        if (unlikely(!__pyx_t_5)) {

#line 711 "root_numpy/src/tree.pyx"
          PyObject* exc_type = PyErr_Occurred();

#line 711 "root_numpy/src/tree.pyx"
          if (exc_type) {

#line 711 "root_numpy/src/tree.pyx"
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 711 "root_numpy/src/tree.pyx"
            else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 711; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 711 "root_numpy/src/tree.pyx"
          }

#line 711 "root_numpy/src/tree.pyx"
          break;

#line 711 "root_numpy/src/tree.pyx"
        }

#line 711 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 711 "root_numpy/src/tree.pyx"
      }

#line 711 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF_SET(__pyx_v_fn, __pyx_t_5);

#line 711 "root_numpy/src/tree.pyx"
      __pyx_t_5 = 0;

      /* "root_numpy/src/tree.pyx":712
 *         ttree = new TChain(treename)
 *         for fn in fnames:
 *             if ttree.Add(fn, -1) == 0:             # <<<<<<<<<<<<<<
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))
 */

#line 712 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_fn); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 712; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 712 "root_numpy/src/tree.pyx"
      __pyx_t_6 = ((__pyx_v_ttree->Add(__pyx_t_1, -1) == 0) != 0);

#line 712 "root_numpy/src/tree.pyx"
      if (__pyx_t_6) {

        /* "root_numpy/src/tree.pyx":713
 *         for fn in fnames:
 *             if ttree.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(             # <<<<<<<<<<<<<<
 *                     treename, fn))
 *         ret = tree2array(
 */

#line 713 "root_numpy/src/tree.pyx"
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_unable_to_access_tree_0_in_1, __pyx_n_s_format); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 713 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_7);

        /* "root_numpy/src/tree.pyx":714
 *             if ttree.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))             # <<<<<<<<<<<<<<
 *         ret = tree2array(
 *             <TTree*> ttree, branches,
 */

#line 714 "root_numpy/src/tree.pyx"
        __pyx_t_8 = NULL;

#line 714 "root_numpy/src/tree.pyx"
        __pyx_t_9 = 0;

#line 714 "root_numpy/src/tree.pyx"
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {

#line 714 "root_numpy/src/tree.pyx"
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);

#line 714 "root_numpy/src/tree.pyx"
          if (likely(__pyx_t_8)) {

#line 714 "root_numpy/src/tree.pyx"
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 714 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_8);

#line 714 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(function);

#line 714 "root_numpy/src/tree.pyx"
            __Pyx_DECREF_SET(__pyx_t_7, function);

#line 714 "root_numpy/src/tree.pyx"
            __pyx_t_9 = 1;

#line 714 "root_numpy/src/tree.pyx"
          }

#line 714 "root_numpy/src/tree.pyx"
        }

#line 714 "root_numpy/src/tree.pyx"
        __pyx_t_10 = PyTuple_New(2+__pyx_t_9); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 714 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_10);

#line 714 "root_numpy/src/tree.pyx"
        if (__pyx_t_8) {

#line 714 "root_numpy/src/tree.pyx"
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;

#line 714 "root_numpy/src/tree.pyx"
        }

#line 714 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_v_treename);

#line 714 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_v_treename);

#line 714 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_v_treename);

#line 714 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_v_fn);

#line 714 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_fn);

#line 714 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_v_fn);

#line 714 "root_numpy/src/tree.pyx"
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 714 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 714 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 714 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "root_numpy/src/tree.pyx":713
 *         for fn in fnames:
 *             if ttree.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(             # <<<<<<<<<<<<<<
 *                     treename, fn))
 *         ret = tree2array(
 */

#line 713 "root_numpy/src/tree.pyx"
        __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 713 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 713 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);

#line 713 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_5);

#line 713 "root_numpy/src/tree.pyx"
        __pyx_t_5 = 0;

#line 713 "root_numpy/src/tree.pyx"
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 713 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_5);

#line 713 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 713 "root_numpy/src/tree.pyx"
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);

#line 713 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 713 "root_numpy/src/tree.pyx"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 713; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 713 "root_numpy/src/tree.pyx"
      }

      /* "root_numpy/src/tree.pyx":711
 *     try:
 *         ttree = new TChain(treename)
 *         for fn in fnames:             # <<<<<<<<<<<<<<
 *             if ttree.Add(fn, -1) == 0:
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 */

#line 711 "root_numpy/src/tree.pyx"
    }

#line 711 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":715
 *                 raise IOError("unable to access tree '{0}' in {1}".format(
 *                     treename, fn))
 *         ret = tree2array(             # <<<<<<<<<<<<<<
 *             <TTree*> ttree, branches,
 *             selection, start, stop, step,
 */

#line 715 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_f_13_librootnumpy_tree2array(((TTree *)__pyx_v_ttree), __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 715; __pyx_clineno = __LINE__; goto __pyx_L4_error;}

#line 715 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 715 "root_numpy/src/tree.pyx"
    __pyx_v_ret = __pyx_t_2;

#line 715 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

#line 715 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":720
 *             include_weight, weight_name)
 *     finally:
 *         del ttree             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */

#line 720 "root_numpy/src/tree.pyx"
  /*finally:*/ {

#line 720 "root_numpy/src/tree.pyx"
    /*normal exit:*/{

#line 720 "root_numpy/src/tree.pyx"
      delete __pyx_v_ttree;

#line 720 "root_numpy/src/tree.pyx"
      goto __pyx_L5;

#line 720 "root_numpy/src/tree.pyx"
    }

#line 720 "root_numpy/src/tree.pyx"
    /*exception exit:*/{

#line 720 "root_numpy/src/tree.pyx"
      __pyx_L4_error:;

#line 720 "root_numpy/src/tree.pyx"
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 720 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);

#line 720 "root_numpy/src/tree.pyx"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_14);

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_15);

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_16);

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_17);

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_18);

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_19);

#line 720 "root_numpy/src/tree.pyx"
      __pyx_t_11 = __pyx_lineno; __pyx_t_12 = __pyx_clineno; __pyx_t_13 = __pyx_filename;

#line 720 "root_numpy/src/tree.pyx"
      {

#line 720 "root_numpy/src/tree.pyx"
        delete __pyx_v_ttree;

#line 720 "root_numpy/src/tree.pyx"
      }

#line 720 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) {

#line 720 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_17);

#line 720 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_18);

#line 720 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_19);

#line 720 "root_numpy/src/tree.pyx"
        __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);

#line 720 "root_numpy/src/tree.pyx"
      }

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_14);

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_15);

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_16);

#line 720 "root_numpy/src/tree.pyx"
      __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);

#line 720 "root_numpy/src/tree.pyx"
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;

#line 720 "root_numpy/src/tree.pyx"
      __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_12; __pyx_filename = __pyx_t_13;

#line 720 "root_numpy/src/tree.pyx"
      goto __pyx_L1_error;

#line 720 "root_numpy/src/tree.pyx"
    }

#line 720 "root_numpy/src/tree.pyx"
    __pyx_L5:;

#line 720 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":721
 *     finally:
 *         del ttree
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 721 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 721 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_v_ret);

#line 721 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_ret;

#line 721 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":705
 * 
 * 
 * def root2array_fromFname(fnames, treename, branches,             # <<<<<<<<<<<<<<
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 */

#line 705 "root_numpy/src/tree.pyx"


#line 705 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 705 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.root2array_fromFname", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 705 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 705 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_fn);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_ret);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 705 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 705 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":724
 * 
 * 
 * def root2array_fromCObj(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         include_weight, weight_name):
 */

#line 724 "root_numpy/src/tree.pyx"


#line 724 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 724 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_9root2array_fromCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_9root2array_fromCObj = 
#line 724 "root_numpy/src/tree.pyx"
{"root2array_fromCObj", (PyCFunction)__pyx_pw_13_librootnumpy_9root2array_fromCObj, METH_VARARGS|METH_KEYWORDS, 0};

#line 724 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_9root2array_fromCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tree = 0
#line 724 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_branches = 0
#line 724 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_selection = 0
#line 724 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_start = 0
#line 724 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_stop = 0
#line 724 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_step = 0
#line 724 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_include_weight = 0
#line 724 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_weight_name = 0
#line 724 "root_numpy/src/tree.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 724 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("root2array_fromCObj (wrapper)", 0);

#line 724 "root_numpy/src/tree.pyx"
  {

#line 724 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_tree,&__pyx_n_s_branches,&__pyx_n_s_selection,&__pyx_n_s_start,&__pyx_n_s_stop,&__pyx_n_s_step,&__pyx_n_s_include_weight,&__pyx_n_s_weight_name,0};

#line 724 "root_numpy/src/tree.pyx"
    PyObject* values[8] = {0,0,0,0,0,0,0,0};

#line 724 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 724 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 724 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 724 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  8: 
#line 724 "root_numpy/src/tree.pyx"
values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        case  7: 
#line 724 "root_numpy/src/tree.pyx"
values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        case  6: 
#line 724 "root_numpy/src/tree.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 724 "root_numpy/src/tree.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 724 "root_numpy/src/tree.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 724 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 724 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 724 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 724 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 724 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 724 "root_numpy/src/tree.pyx"
      }

#line 724 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 724 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 724 "root_numpy/src/tree.pyx"
        case  0:

#line 724 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree)) != 0)) kw_args--;
        else 
#line 724 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 724 "root_numpy/src/tree.pyx"
        case  1:

#line 724 "root_numpy/src/tree.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_branches)) != 0)) kw_args--;

#line 724 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 1); 
#line 724 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 724 "root_numpy/src/tree.pyx"
        }

#line 724 "root_numpy/src/tree.pyx"
        case  2:

#line 724 "root_numpy/src/tree.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_selection)) != 0)) kw_args--;

#line 724 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 2); 
#line 724 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 724 "root_numpy/src/tree.pyx"
        }

#line 724 "root_numpy/src/tree.pyx"
        case  3:

#line 724 "root_numpy/src/tree.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_start)) != 0)) kw_args--;

#line 724 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 3); 
#line 724 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 724 "root_numpy/src/tree.pyx"
        }

#line 724 "root_numpy/src/tree.pyx"
        case  4:

#line 724 "root_numpy/src/tree.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stop)) != 0)) kw_args--;

#line 724 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 4); 
#line 724 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 724 "root_numpy/src/tree.pyx"
        }

#line 724 "root_numpy/src/tree.pyx"
        case  5:

#line 724 "root_numpy/src/tree.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_step)) != 0)) kw_args--;

#line 724 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 5); 
#line 724 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 724 "root_numpy/src/tree.pyx"
        }

#line 724 "root_numpy/src/tree.pyx"
        case  6:

#line 724 "root_numpy/src/tree.pyx"
        if (likely((values[6] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_include_weight)) != 0)) kw_args--;

#line 724 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 6); 
#line 724 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 724 "root_numpy/src/tree.pyx"
        }

#line 724 "root_numpy/src/tree.pyx"
        case  7:

#line 724 "root_numpy/src/tree.pyx"
        if (likely((values[7] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weight_name)) != 0)) kw_args--;

#line 724 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, 7); 
#line 724 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 724 "root_numpy/src/tree.pyx"
        }

#line 724 "root_numpy/src/tree.pyx"
      }

#line 724 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 724 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "root2array_fromCObj") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 724 "root_numpy/src/tree.pyx"
      }

#line 724 "root_numpy/src/tree.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 8) {

#line 724 "root_numpy/src/tree.pyx"
      goto __pyx_L5_argtuple_error;

#line 724 "root_numpy/src/tree.pyx"
    } else {

#line 724 "root_numpy/src/tree.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 724 "root_numpy/src/tree.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 724 "root_numpy/src/tree.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 724 "root_numpy/src/tree.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 724 "root_numpy/src/tree.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 724 "root_numpy/src/tree.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 724 "root_numpy/src/tree.pyx"
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);

#line 724 "root_numpy/src/tree.pyx"
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);

#line 724 "root_numpy/src/tree.pyx"
    }

#line 724 "root_numpy/src/tree.pyx"
    __pyx_v_tree = values[0];

#line 724 "root_numpy/src/tree.pyx"
    __pyx_v_branches = values[1];

#line 724 "root_numpy/src/tree.pyx"
    __pyx_v_selection = values[2];

#line 724 "root_numpy/src/tree.pyx"
    __pyx_v_start = values[3];

#line 724 "root_numpy/src/tree.pyx"
    __pyx_v_stop = values[4];

#line 724 "root_numpy/src/tree.pyx"
    __pyx_v_step = values[5];

#line 724 "root_numpy/src/tree.pyx"
    __pyx_v_include_weight = values[6];

#line 724 "root_numpy/src/tree.pyx"
    __pyx_v_weight_name = values[7];

#line 724 "root_numpy/src/tree.pyx"
  }

#line 724 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 724 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("root2array_fromCObj", 1, 8, 8, PyTuple_GET_SIZE(__pyx_args)); 
#line 724 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 724 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.root2array_fromCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 724 "root_numpy/src/tree.pyx"
  return NULL;

#line 724 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 724 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_8root2array_fromCObj(__pyx_self, __pyx_v_tree, __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name);

#line 724 "root_numpy/src/tree.pyx"


#line 724 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 724 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 724 "root_numpy/src/tree.pyx"
}

#line 724 "root_numpy/src/tree.pyx"


#line 724 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_8root2array_fromCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_tree, PyObject *__pyx_v_branches, PyObject *__pyx_v_selection, PyObject *__pyx_v_start, PyObject *__pyx_v_stop, PyObject *__pyx_v_step, PyObject *__pyx_v_include_weight, PyObject *__pyx_v_weight_name) {
  TTree *__pyx_v_chain
#line 724 "root_numpy/src/tree.pyx"
;

#line 724 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  void *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("root2array_fromCObj", 0);

  /* "root_numpy/src/tree.pyx":730
 *     # provided here for convenience only
 *     # typecheck should be implemented by the wrapper
 *     if not PyCObject_Check(tree):             # <<<<<<<<<<<<<<
 *         raise ValueError("tree must be PyCObject")
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)
 */

#line 730 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((!(PyCObject_Check(__pyx_v_tree) != 0)) != 0);

#line 730 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":731
 *     # typecheck should be implemented by the wrapper
 *     if not PyCObject_Check(tree):
 *         raise ValueError("tree must be PyCObject")             # <<<<<<<<<<<<<<
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)
 *     return tree2array(
 */

#line 731 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 731 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 731 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);

#line 731 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 731 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 731 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":732
 *     if not PyCObject_Check(tree):
 *         raise ValueError("tree must be PyCObject")
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)             # <<<<<<<<<<<<<<
 *     return tree2array(
 *             chain, branches, selection,
 */

#line 732 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyCObject_AsVoidPtr(__pyx_v_tree); if (unlikely(__pyx_t_3 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 732; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 732 "root_numpy/src/tree.pyx"
  __pyx_v_chain = ((TTree *)__pyx_t_3);

  /* "root_numpy/src/tree.pyx":733
 *         raise ValueError("tree must be PyCObject")
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)
 *     return tree2array(             # <<<<<<<<<<<<<<
 *             chain, branches, selection,
 *             start, stop, step,
 */

#line 733 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

  /* "root_numpy/src/tree.pyx":736
 *             chain, branches, selection,
 *             start, stop, step,
 *             include_weight, weight_name)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 736 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __pyx_f_13_librootnumpy_tree2array(__pyx_v_chain, __pyx_v_branches, __pyx_v_selection, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_include_weight, __pyx_v_weight_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 733; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 736 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 736 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_2;

#line 736 "root_numpy/src/tree.pyx"
  __pyx_t_2 = 0;

#line 736 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":724
 * 
 * 
 * def root2array_fromCObj(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         include_weight, weight_name):
 */

#line 724 "root_numpy/src/tree.pyx"


#line 724 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 724 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.root2array_fromCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 724 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 724 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 724 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 724 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":744
 * 
 * cdef cppclass NP2CConverter:
 *     void fill_from(void* source):             # <<<<<<<<<<<<<<
 *         pass
 *     __dealloc__():
 */

#line 744 "root_numpy/src/tree.pyx"


#line 744 "root_numpy/src/tree.pyx"
void __pyx_t_13_librootnumpy_NP2CConverter::fill_from(CYTHON_UNUSED void *__pyx_v_source) {
  __Pyx_RefNannyDeclarations

#line 744 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("fill_from", 0);

#line 744 "root_numpy/src/tree.pyx"


#line 744 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 744 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 744 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":746
 *     void fill_from(void* source):
 *         pass
 *     __dealloc__():             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

#line 746 "root_numpy/src/tree.pyx"


#line 746 "root_numpy/src/tree.pyx"
 __pyx_t_13_librootnumpy_NP2CConverter::~__pyx_t_13_librootnumpy_NP2CConverter(void) {
  __Pyx_RefNannyDeclarations

#line 746 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("<del>", 0);

#line 746 "root_numpy/src/tree.pyx"


#line 746 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 746 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 746 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":758
 *     # don't use copy constructor of this one since it will screw up
 *     # tree binding and/or ownership of value
 *     __init__(TTree* tree, string name, string roottype, int nbytes):             # <<<<<<<<<<<<<<
 *         cdef string leaflist
 *         this.nbytes = nbytes
 */

#line 758 "root_numpy/src/tree.pyx"


#line 758 "root_numpy/src/tree.pyx"
 __pyx_t_13_librootnumpy_ScalarNP2CConverter::__pyx_t_13_librootnumpy_ScalarNP2CConverter(TTree *__pyx_v_tree, std::string __pyx_v_name, std::string __pyx_v_roottype, int __pyx_v_nbytes) {
  std::string __pyx_v_leaflist
#line 758 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_existing_type = NULL
#line 758 "root_numpy/src/tree.pyx"
;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("<init>", 0);

  /* "root_numpy/src/tree.pyx":760
 *     __init__(TTree* tree, string name, string roottype, int nbytes):
 *         cdef string leaflist
 *         this.nbytes = nbytes             # <<<<<<<<<<<<<<
 *         this.roottype = roottype
 *         this.name = name
 */

#line 760 "root_numpy/src/tree.pyx"
  this->nbytes = __pyx_v_nbytes;

  /* "root_numpy/src/tree.pyx":761
 *         cdef string leaflist
 *         this.nbytes = nbytes
 *         this.roottype = roottype             # <<<<<<<<<<<<<<
 *         this.name = name
 *         this.value = malloc(nbytes)
 */

#line 761 "root_numpy/src/tree.pyx"
  this->roottype = __pyx_v_roottype;

  /* "root_numpy/src/tree.pyx":762
 *         this.nbytes = nbytes
 *         this.roottype = roottype
 *         this.name = name             # <<<<<<<<<<<<<<
 *         this.value = malloc(nbytes)
 *         this.branch = tree.GetBranch(this.name.c_str())
 */

#line 762 "root_numpy/src/tree.pyx"
  this->name = __pyx_v_name;

  /* "root_numpy/src/tree.pyx":763
 *         this.roottype = roottype
 *         this.name = name
 *         this.value = malloc(nbytes)             # <<<<<<<<<<<<<<
 *         this.branch = tree.GetBranch(this.name.c_str())
 *         if this.branch == NULL:
 */

#line 763 "root_numpy/src/tree.pyx"
  this->value = malloc(__pyx_v_nbytes);

  /* "root_numpy/src/tree.pyx":764
 *         this.name = name
 *         this.value = malloc(nbytes)
 *         this.branch = tree.GetBranch(this.name.c_str())             # <<<<<<<<<<<<<<
 *         if this.branch == NULL:
 *             leaflist = this.name + '/' + this.roottype
 */

#line 764 "root_numpy/src/tree.pyx"
  this->branch = __pyx_v_tree->GetBranch(this->name.c_str());

  /* "root_numpy/src/tree.pyx":765
 *         this.value = malloc(nbytes)
 *         this.branch = tree.GetBranch(this.name.c_str())
 *         if this.branch == NULL:             # <<<<<<<<<<<<<<
 *             leaflist = this.name + '/' + this.roottype
 *             this.branch = tree.Branch(this.name.c_str(), this.value, leaflist.c_str())
 */

#line 765 "root_numpy/src/tree.pyx"
  __pyx_t_1 = ((this->branch == NULL) != 0);

#line 765 "root_numpy/src/tree.pyx"
  if (__pyx_t_1) {

    /* "root_numpy/src/tree.pyx":766
 *         this.branch = tree.GetBranch(this.name.c_str())
 *         if this.branch == NULL:
 *             leaflist = this.name + '/' + this.roottype             # <<<<<<<<<<<<<<
 *             this.branch = tree.Branch(this.name.c_str(), this.value, leaflist.c_str())
 *         else:
 */

#line 766 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__string(this->name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 766 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 766 "root_numpy/src/tree.pyx"
    __pyx_t_3 = PyNumber_Add(__pyx_t_2, __pyx_kp_s__19); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 766 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 766 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 766 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__string(this->roottype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 766 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 766 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyNumber_Add(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 766 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 766 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 766 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 766 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __pyx_convert_string_from_py_std__string(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 766; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 766 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 766 "root_numpy/src/tree.pyx"
    __pyx_v_leaflist = __pyx_t_5;

    /* "root_numpy/src/tree.pyx":767
 *         if this.branch == NULL:
 *             leaflist = this.name + '/' + this.roottype
 *             this.branch = tree.Branch(this.name.c_str(), this.value, leaflist.c_str())             # <<<<<<<<<<<<<<
 *         else:
 *             # check type compatibility of existing branch
 */

#line 767 "root_numpy/src/tree.pyx"
    this->branch = __pyx_v_tree->Branch(this->name.c_str(), this->value, __pyx_v_leaflist.c_str());

#line 767 "root_numpy/src/tree.pyx"
    goto __pyx_L3;

#line 767 "root_numpy/src/tree.pyx"
  }

#line 767 "root_numpy/src/tree.pyx"
  /*else*/ {

    /* "root_numpy/src/tree.pyx":770
 *         else:
 *             # check type compatibility of existing branch
 *             existing_type = this.branch.GetTitle().rpartition('/')[-1]             # <<<<<<<<<<<<<<
 *             if str(roottype) != existing_type:
 *                 raise TypeError(
 */

#line 770 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyStr_FromString(this->branch->GetTitle()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 770 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 770 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_rpartition); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 770 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 770 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 770 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 770 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 770 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 770 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_4, -1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 770 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 770 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 770 "root_numpy/src/tree.pyx"
    __pyx_v_existing_type = __pyx_t_2;

#line 770 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

    /* "root_numpy/src/tree.pyx":771
 *             # check type compatibility of existing branch
 *             existing_type = this.branch.GetTitle().rpartition('/')[-1]
 *             if str(roottype) != existing_type:             # <<<<<<<<<<<<<<
 *                 raise TypeError(
 *                     "field `{0}` of type `{1}` is not compatible "
 */

#line 771 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__string(__pyx_v_roottype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 771 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 771 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 771 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 771 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 771 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_2);

#line 771 "root_numpy/src/tree.pyx"
    __pyx_t_2 = 0;

#line 771 "root_numpy/src/tree.pyx"
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 771 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 771 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 771 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_v_existing_type, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 771 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 771 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 771; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 771 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 771 "root_numpy/src/tree.pyx"
    if (__pyx_t_1) {

      /* "root_numpy/src/tree.pyx":774
 *                 raise TypeError(
 *                     "field `{0}` of type `{1}` is not compatible "
 *                     "with existing branch of type `{2}`".format(             # <<<<<<<<<<<<<<
 *                         name, roottype, existing_type))
 *             this.branch.SetAddress(this.value)
 */

#line 774 "root_numpy/src/tree.pyx"
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_field_0_of_type_1_is_not_compati, __pyx_n_s_format); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 774 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

      /* "root_numpy/src/tree.pyx":775
 *                     "field `{0}` of type `{1}` is not compatible "
 *                     "with existing branch of type `{2}`".format(
 *                         name, roottype, existing_type))             # <<<<<<<<<<<<<<
 *             this.branch.SetAddress(this.value)
 *         this.branch.SetStatus(1)
 */

#line 775 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__string(__pyx_v_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 775 "root_numpy/src/tree.pyx"
      __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__string(__pyx_v_roottype); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 775 "root_numpy/src/tree.pyx"
      __pyx_t_7 = NULL;

#line 775 "root_numpy/src/tree.pyx"
      __pyx_t_8 = 0;

#line 775 "root_numpy/src/tree.pyx"
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {

#line 775 "root_numpy/src/tree.pyx"
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);

#line 775 "root_numpy/src/tree.pyx"
        if (likely(__pyx_t_7)) {

#line 775 "root_numpy/src/tree.pyx"
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 775 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(__pyx_t_7);

#line 775 "root_numpy/src/tree.pyx"
          __Pyx_INCREF(function);

#line 775 "root_numpy/src/tree.pyx"
          __Pyx_DECREF_SET(__pyx_t_2, function);

#line 775 "root_numpy/src/tree.pyx"
          __pyx_t_8 = 1;

#line 775 "root_numpy/src/tree.pyx"
        }

#line 775 "root_numpy/src/tree.pyx"
      }

#line 775 "root_numpy/src/tree.pyx"
      __pyx_t_9 = PyTuple_New(3+__pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 775 "root_numpy/src/tree.pyx"
      if (__pyx_t_7) {

#line 775 "root_numpy/src/tree.pyx"
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;

#line 775 "root_numpy/src/tree.pyx"
      }

#line 775 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_8, __pyx_t_3);

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_3);

#line 775 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_8, __pyx_t_6);

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_6);

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_existing_type);

#line 775 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_9, 2+__pyx_t_8, __pyx_v_existing_type);

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_existing_type);

#line 775 "root_numpy/src/tree.pyx"
      __pyx_t_3 = 0;

#line 775 "root_numpy/src/tree.pyx"
      __pyx_t_6 = 0;

#line 775 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 774; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 775 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "root_numpy/src/tree.pyx":772
 *             existing_type = this.branch.GetTitle().rpartition('/')[-1]
 *             if str(roottype) != existing_type:
 *                 raise TypeError(             # <<<<<<<<<<<<<<
 *                     "field `{0}` of type `{1}` is not compatible "
 *                     "with existing branch of type `{2}`".format(
 */

#line 772 "root_numpy/src/tree.pyx"
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 772 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 772 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 772 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_4);

#line 772 "root_numpy/src/tree.pyx"
      __pyx_t_4 = 0;

#line 772 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_2, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 772 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 772 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 772 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 772 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 772 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 772 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":776
 *                     "with existing branch of type `{2}`".format(
 *                         name, roottype, existing_type))
 *             this.branch.SetAddress(this.value)             # <<<<<<<<<<<<<<
 *         this.branch.SetStatus(1)
 * 
 */

#line 776 "root_numpy/src/tree.pyx"
    this->branch->SetAddress(this->value);

#line 776 "root_numpy/src/tree.pyx"
  }

#line 776 "root_numpy/src/tree.pyx"
  __pyx_L3:;

  /* "root_numpy/src/tree.pyx":777
 *                         name, roottype, existing_type))
 *             this.branch.SetAddress(this.value)
 *         this.branch.SetStatus(1)             # <<<<<<<<<<<<<<
 * 
 *     __del__(self): # does this do what I want?
 */

#line 777 "root_numpy/src/tree.pyx"
  this->branch->SetStatus(1);

  /* "root_numpy/src/tree.pyx":758
 *     # don't use copy constructor of this one since it will screw up
 *     # tree binding and/or ownership of value
 *     __init__(TTree* tree, string name, string roottype, int nbytes):             # <<<<<<<<<<<<<<
 *         cdef string leaflist
 *         this.nbytes = nbytes
 */

#line 758 "root_numpy/src/tree.pyx"


#line 758 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 758 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

#line 758 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("ScalarNP2CConverter.<init>", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 758 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_existing_type);

#line 758 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 758 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":779
 *         this.branch.SetStatus(1)
 * 
 *     __del__(self): # does this do what I want?             # <<<<<<<<<<<<<<
 *         free(this.value)
 * 
 */

#line 779 "root_numpy/src/tree.pyx"


#line 779 "root_numpy/src/tree.pyx"
PyObject *__pyx_t_13_librootnumpy_ScalarNP2CConverter::__del__(CYTHON_UNUSED PyObject *__pyx_v_self) {

#line 779 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations

#line 779 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "root_numpy/src/tree.pyx":780
 * 
 *     __del__(self): # does this do what I want?
 *         free(this.value)             # <<<<<<<<<<<<<<
 * 
 *     void fill_from(void* source):
 */

#line 780 "root_numpy/src/tree.pyx"
  free(this->value);

  /* "root_numpy/src/tree.pyx":779
 *         this.branch.SetStatus(1)
 * 
 *     __del__(self): # does this do what I want?             # <<<<<<<<<<<<<<
 *         free(this.value)
 * 
 */

#line 779 "root_numpy/src/tree.pyx"


#line 779 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 779 "root_numpy/src/tree.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 779 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 779 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 779 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 779 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":782
 *         free(this.value)
 * 
 *     void fill_from(void* source):             # <<<<<<<<<<<<<<
 *         memcpy(this.value, source, this.nbytes)
 *         this.branch.Fill()
 */

#line 782 "root_numpy/src/tree.pyx"


#line 782 "root_numpy/src/tree.pyx"
void __pyx_t_13_librootnumpy_ScalarNP2CConverter::fill_from(void *__pyx_v_source) {
  __Pyx_RefNannyDeclarations

#line 782 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("fill_from", 0);

  /* "root_numpy/src/tree.pyx":783
 * 
 *     void fill_from(void* source):
 *         memcpy(this.value, source, this.nbytes)             # <<<<<<<<<<<<<<
 *         this.branch.Fill()
 * 
 */

#line 783 "root_numpy/src/tree.pyx"
  memcpy(this->value, __pyx_v_source, this->nbytes);

  /* "root_numpy/src/tree.pyx":784
 *     void fill_from(void* source):
 *         memcpy(this.value, source, this.nbytes)
 *         this.branch.Fill()             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 784 "root_numpy/src/tree.pyx"
  this->branch->Fill();

  /* "root_numpy/src/tree.pyx":782
 *         free(this.value)
 * 
 *     void fill_from(void* source):             # <<<<<<<<<<<<<<
 *         memcpy(this.value, source, this.nbytes)
 *         this.branch.Fill()
 */

#line 782 "root_numpy/src/tree.pyx"


#line 782 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 782 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 782 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":787
 * 
 * 
 * cdef NP2CConverter* find_np2c_converter(TTree* tree, name, dtype, peekvalue=None):             # <<<<<<<<<<<<<<
 *     # TODO:
 *     # np.float16: #this needs special treatment root doesn't have 16 bit float?
 */

#line 787 "root_numpy/src/tree.pyx"


#line 787 "root_numpy/src/tree.pyx"
static __pyx_t_13_librootnumpy_NP2CConverter *__pyx_f_13_librootnumpy_find_np2c_converter(TTree *__pyx_v_tree, PyObject *__pyx_v_name, PyObject *__pyx_v_dtype, struct __pyx_opt_args_13_librootnumpy_find_np2c_converter *__pyx_optional_args) {
  PyObject *__pyx_v_nbytes = NULL
#line 787 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_roottype = NULL
#line 787 "root_numpy/src/tree.pyx"
;

#line 787 "root_numpy/src/tree.pyx"
  __pyx_t_13_librootnumpy_NP2CConverter *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  std::string __pyx_t_8;
  std::string __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("find_np2c_converter", 0);

#line 787 "root_numpy/src/tree.pyx"
  if (__pyx_optional_args) {

#line 787 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":792
 *     # np.object #this too should detect basic numpy array
 *     # How to detect fixed length array?
 *     if dtype in TYPES_NUMPY2ROOT:             # <<<<<<<<<<<<<<
 *         nbytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)
 */

#line 792 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES_NUMPY2ROOT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 792 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 792 "root_numpy/src/tree.pyx"
  __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_v_dtype, __pyx_t_1, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 792; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 792 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 792 "root_numpy/src/tree.pyx"
  __pyx_t_3 = (__pyx_t_2 != 0);

#line 792 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/tree.pyx":793
 *     # How to detect fixed length array?
 *     if dtype in TYPES_NUMPY2ROOT:
 *         nbytes, roottype = TYPES_NUMPY2ROOT[dtype]             # <<<<<<<<<<<<<<
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)
 *     elif dtype == np.dtype(np.object):
 */

#line 793 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES_NUMPY2ROOT); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 793 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 793 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyObject_GetItem(__pyx_t_1, __pyx_v_dtype); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 793 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 793 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 793 "root_numpy/src/tree.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {

#line 793 "root_numpy/src/tree.pyx"
      PyObject* sequence = __pyx_t_4;

#line 793 "root_numpy/src/tree.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 793 "root_numpy/src/tree.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 793 "root_numpy/src/tree.pyx"
      #else

#line 793 "root_numpy/src/tree.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 793 "root_numpy/src/tree.pyx"
      #endif

#line 793 "root_numpy/src/tree.pyx"
      if (unlikely(size != 2)) {

#line 793 "root_numpy/src/tree.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 793 "root_numpy/src/tree.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 793 "root_numpy/src/tree.pyx"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 793 "root_numpy/src/tree.pyx"
      }

#line 793 "root_numpy/src/tree.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 793 "root_numpy/src/tree.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 793 "root_numpy/src/tree.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 

#line 793 "root_numpy/src/tree.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 

#line 793 "root_numpy/src/tree.pyx"
      } else {

#line 793 "root_numpy/src/tree.pyx"
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 

#line 793 "root_numpy/src/tree.pyx"
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 

#line 793 "root_numpy/src/tree.pyx"
      }

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_1);

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 793 "root_numpy/src/tree.pyx"
      #else

#line 793 "root_numpy/src/tree.pyx"
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 793 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 793 "root_numpy/src/tree.pyx"
      #endif

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 793 "root_numpy/src/tree.pyx"
    } else {

#line 793 "root_numpy/src/tree.pyx"
      Py_ssize_t index = -1;

#line 793 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 793 "root_numpy/src/tree.pyx"
      __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
      index = 0; __pyx_t_1 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_1)) 
#line 793 "root_numpy/src/tree.pyx"
goto __pyx_L4_unpacking_failed;

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) 
#line 793 "root_numpy/src/tree.pyx"
goto __pyx_L4_unpacking_failed;

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 793 "root_numpy/src/tree.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 793 "root_numpy/src/tree.pyx"
      __pyx_t_7 = NULL;

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 793 "root_numpy/src/tree.pyx"
      goto __pyx_L5_unpacking_done;

#line 793 "root_numpy/src/tree.pyx"
      __pyx_L4_unpacking_failed:;

#line 793 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 793 "root_numpy/src/tree.pyx"
      __pyx_t_7 = NULL;

#line 793 "root_numpy/src/tree.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 793 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 793; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 793 "root_numpy/src/tree.pyx"
      __pyx_L5_unpacking_done:;

#line 793 "root_numpy/src/tree.pyx"
    }

#line 793 "root_numpy/src/tree.pyx"
    __pyx_v_nbytes = __pyx_t_1;

#line 793 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

#line 793 "root_numpy/src/tree.pyx"
    __pyx_v_roottype = __pyx_t_5;

#line 793 "root_numpy/src/tree.pyx"
    __pyx_t_5 = 0;

    /* "root_numpy/src/tree.pyx":794
 *     if dtype in TYPES_NUMPY2ROOT:
 *         nbytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)             # <<<<<<<<<<<<<<
 *     elif dtype == np.dtype(np.object):
 *         warnings.warn("converter for %r not implemented yet (skipping)" % dtype)
 */

#line 794 "root_numpy/src/tree.pyx"
    __pyx_t_8 = __pyx_convert_string_from_py_std__string(__pyx_v_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "root_numpy/src/tree.pyx"
    __pyx_t_9 = __pyx_convert_string_from_py_std__string(__pyx_v_roottype); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "root_numpy/src/tree.pyx"
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_nbytes); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "root_numpy/src/tree.pyx"
    __pyx_r = new __pyx_t_13_librootnumpy_ScalarNP2CConverter(__pyx_v_tree, __pyx_t_8, __pyx_t_9, __pyx_t_10);

#line 794 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

#line 794 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":795
 *         nbytes, roottype = TYPES_NUMPY2ROOT[dtype]
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)
 *     elif dtype == np.dtype(np.object):             # <<<<<<<<<<<<<<
 *         warnings.warn("converter for %r not implemented yet (skipping)" % dtype)
 *         return NULL
 */

#line 795 "root_numpy/src/tree.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 795 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_object); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 795 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 795 "root_numpy/src/tree.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 795 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);

#line 795 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 795 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 795 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 795 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 795 "root_numpy/src/tree.pyx"
  __pyx_t_4 = PyObject_RichCompare(__pyx_v_dtype, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 795 "root_numpy/src/tree.pyx"
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 795 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/tree.pyx":796
 *         return new ScalarNP2CConverter(tree, name, roottype, nbytes)
 *     elif dtype == np.dtype(np.object):
 *         warnings.warn("converter for %r not implemented yet (skipping)" % dtype)             # <<<<<<<<<<<<<<
 *         return NULL
 *         # let's peek
 */

#line 796 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 796 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 796 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 796 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_converter_for_r_not_implemented, __pyx_v_dtype); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 796 "root_numpy/src/tree.pyx"
    __pyx_t_6 = NULL;

#line 796 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {

#line 796 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);

#line 796 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_6)) {

#line 796 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);

#line 796 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 796 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 796 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_1, function);

#line 796 "root_numpy/src/tree.pyx"
      }

#line 796 "root_numpy/src/tree.pyx"
    }

#line 796 "root_numpy/src/tree.pyx"
    if (!__pyx_t_6) {

#line 796 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 796 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 796 "root_numpy/src/tree.pyx"
    } else {

#line 796 "root_numpy/src/tree.pyx"
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_11);

#line 796 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;

#line 796 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_5);

#line 796 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_5);

#line 796 "root_numpy/src/tree.pyx"
      __pyx_t_5 = 0;

#line 796 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_11, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 796 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 796 "root_numpy/src/tree.pyx"
    }

#line 796 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 796 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "root_numpy/src/tree.pyx":797
 *     elif dtype == np.dtype(np.object):
 *         warnings.warn("converter for %r not implemented yet (skipping)" % dtype)
 *         return NULL             # <<<<<<<<<<<<<<
 *         # let's peek
 *         """
 */

#line 797 "root_numpy/src/tree.pyx"
    __pyx_r = NULL;

#line 797 "root_numpy/src/tree.pyx"
    goto __pyx_L0;

#line 797 "root_numpy/src/tree.pyx"
  }

#line 797 "root_numpy/src/tree.pyx"
  /*else*/ {

    /* "root_numpy/src/tree.pyx":806
 *         """
 *     else:
 *         warnings.warn("converter for %r not implemented yet (skipping)" % dtype)             # <<<<<<<<<<<<<<
 *     return NULL
 * 
 */

#line 806 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 806 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 806 "root_numpy/src/tree.pyx"
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_warn); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 806 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 806 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 806 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_converter_for_r_not_implemented, __pyx_v_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 806 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 806 "root_numpy/src/tree.pyx"
    __pyx_t_5 = NULL;

#line 806 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {

#line 806 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);

#line 806 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_5)) {

#line 806 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);

#line 806 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 806 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 806 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_11, function);

#line 806 "root_numpy/src/tree.pyx"
      }

#line 806 "root_numpy/src/tree.pyx"
    }

#line 806 "root_numpy/src/tree.pyx"
    if (!__pyx_t_5) {

#line 806 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 806 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 806 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 806 "root_numpy/src/tree.pyx"
    } else {

#line 806 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 806 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 806 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 806 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_1);

#line 806 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_t_1);

#line 806 "root_numpy/src/tree.pyx"
      __pyx_t_1 = 0;

#line 806 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 806; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 806 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 806 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 806 "root_numpy/src/tree.pyx"
    }

#line 806 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 806 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 806 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":807
 *     else:
 *         warnings.warn("converter for %r not implemented yet (skipping)" % dtype)
 *     return NULL             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 807 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 807 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":787
 * 
 * 
 * cdef NP2CConverter* find_np2c_converter(TTree* tree, name, dtype, peekvalue=None):             # <<<<<<<<<<<<<<
 *     # TODO:
 *     # np.float16: #this needs special treatment root doesn't have 16 bit float?
 */

#line 787 "root_numpy/src/tree.pyx"


#line 787 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 787 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_WriteUnraisable("_librootnumpy.find_np2c_converter", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);

#line 787 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 787 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_nbytes);

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_roottype);

#line 787 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 787 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 787 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":810
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     # hmm how do I catch all python exception
 *     # and clean up before throwing ?
 */

#line 810 "root_numpy/src/tree.pyx"


#line 810 "root_numpy/src/tree.pyx"
static TTree *__pyx_f_13_librootnumpy_array2tree(PyArrayObject *__pyx_v_arr, struct __pyx_opt_args_13_librootnumpy_array2tree *__pyx_optional_args) {

#line 810 "root_numpy/src/tree.pyx"
  PyObject *__pyx_v_name = ((PyObject *)__pyx_n_s_tree);

#line 810 "root_numpy/src/tree.pyx"
  TTree *__pyx_v_tree = ((TTree *)NULL);
  std::vector<__pyx_t_13_librootnumpy_NP2CConverter *>  __pyx_v_conv_array
#line 810 "root_numpy/src/tree.pyx"
;
  std::vector<int>  __pyx_v_posarray
#line 810 "root_numpy/src/tree.pyx"
;
  std::vector<int>  __pyx_v_roffsetarray
#line 810 "root_numpy/src/tree.pyx"
;
  unsigned int __pyx_v_icv
#line 810 "root_numpy/src/tree.pyx"
;
  int __pyx_v_icol
#line 810 "root_numpy/src/tree.pyx"
;
  long __pyx_v_arr_len
#line 810 "root_numpy/src/tree.pyx"
;
  long __pyx_v_idata
#line 810 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_pos_len
#line 810 "root_numpy/src/tree.pyx"
;
  unsigned long __pyx_v_ipos
#line 810 "root_numpy/src/tree.pyx"
;
  void *__pyx_v_source
#line 810 "root_numpy/src/tree.pyx"
;
  void *__pyx_v_thisrow
#line 810 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_NP2CConverter *__pyx_v_tmpcv
#line 810 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_fieldnames = NULL
#line 810 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_fields = NULL
#line 810 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_fieldname = NULL
#line 810 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_dtype = NULL
#line 810 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_roffset = NULL
#line 810 "root_numpy/src/tree.pyx"
;
  __pyx_t_13_librootnumpy_NP2CConverter *__pyx_v_cvt
#line 810 "root_numpy/src/tree.pyx"
;

#line 810 "root_numpy/src/tree.pyx"
  TTree *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  const char *__pyx_t_5;
  const char *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  __pyx_t_13_librootnumpy_NP2CConverter *__pyx_t_14;
  struct __pyx_opt_args_13_librootnumpy_find_np2c_converter __pyx_t_15;
  int __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  unsigned long __pyx_t_19;
  unsigned long __pyx_t_20;
  size_t __pyx_t_21;
  unsigned int __pyx_t_22;
  char const *__pyx_t_23;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2tree", 0);

#line 810 "root_numpy/src/tree.pyx"
  if (__pyx_optional_args) {

#line 810 "root_numpy/src/tree.pyx"
    if (__pyx_optional_args->__pyx_n > 0) {

#line 810 "root_numpy/src/tree.pyx"
      __pyx_v_name = __pyx_optional_args->name;

#line 810 "root_numpy/src/tree.pyx"
      if (__pyx_optional_args->__pyx_n > 1) {

#line 810 "root_numpy/src/tree.pyx"
        __pyx_v_tree = __pyx_optional_args->tree;

#line 810 "root_numpy/src/tree.pyx"
      }

#line 810 "root_numpy/src/tree.pyx"
    }

#line 810 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":819
 *     cdef unsigned int icv
 *     cdef int icol
 *     cdef long arr_len = arr.shape[0]             # <<<<<<<<<<<<<<
 *     cdef long idata
 *     cdef unsigned long pos_len
 */

#line 819 "root_numpy/src/tree.pyx"
  __pyx_v_arr_len = (__pyx_v_arr->dimensions[0]);

  /* "root_numpy/src/tree.pyx":823
 *     cdef unsigned long pos_len
 *     cdef unsigned long ipos
 *     cdef void* source = NULL             # <<<<<<<<<<<<<<
 *     cdef void* thisrow = NULL
 *     cdef NP2CConverter* tmpcv
 */

#line 823 "root_numpy/src/tree.pyx"
  __pyx_v_source = NULL;

  /* "root_numpy/src/tree.pyx":824
 *     cdef unsigned long ipos
 *     cdef void* source = NULL
 *     cdef void* thisrow = NULL             # <<<<<<<<<<<<<<
 *     cdef NP2CConverter* tmpcv
 * 
 */

#line 824 "root_numpy/src/tree.pyx"
  __pyx_v_thisrow = NULL;

  /* "root_numpy/src/tree.pyx":827
 *     cdef NP2CConverter* tmpcv
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         if tree == NULL:
 *             tree = new TTree(name, name)
 */

#line 827 "root_numpy/src/tree.pyx"
  /*try:*/ {

#line 827 "root_numpy/src/tree.pyx"
    {
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);

#line 827 "root_numpy/src/tree.pyx"
      /*try:*/ {

        /* "root_numpy/src/tree.pyx":828
 * 
 *     try:
 *         if tree == NULL:             # <<<<<<<<<<<<<<
 *             tree = new TTree(name, name)
 * 
 */

#line 828 "root_numpy/src/tree.pyx"
        __pyx_t_4 = ((__pyx_v_tree == NULL) != 0);

#line 828 "root_numpy/src/tree.pyx"
        if (__pyx_t_4) {

          /* "root_numpy/src/tree.pyx":829
 *     try:
 *         if tree == NULL:
 *             tree = new TTree(name, name)             # <<<<<<<<<<<<<<
 * 
 *         fieldnames = arr.dtype.names
 */

#line 829 "root_numpy/src/tree.pyx"
          __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 829 "root_numpy/src/tree.pyx"
          __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_name); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 829 "root_numpy/src/tree.pyx"
          __pyx_v_tree = new TTree(__pyx_t_5, __pyx_t_6);

#line 829 "root_numpy/src/tree.pyx"
          goto __pyx_L14;

#line 829 "root_numpy/src/tree.pyx"
        }

#line 829 "root_numpy/src/tree.pyx"
        __pyx_L14:;

        /* "root_numpy/src/tree.pyx":831
 *             tree = new TTree(name, name)
 * 
 *         fieldnames = arr.dtype.names             # <<<<<<<<<<<<<<
 *         fields = arr.dtype.fields
 * 
 */

#line 831 "root_numpy/src/tree.pyx"
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_arr), __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 831 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 831 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_names); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 831 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 831 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 831 "root_numpy/src/tree.pyx"
        __pyx_v_fieldnames = __pyx_t_8;

#line 831 "root_numpy/src/tree.pyx"
        __pyx_t_8 = 0;

        /* "root_numpy/src/tree.pyx":832
 * 
 *         fieldnames = arr.dtype.names
 *         fields = arr.dtype.fields             # <<<<<<<<<<<<<<
 * 
 *         # figure out the structure
 */

#line 832 "root_numpy/src/tree.pyx"
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_arr), __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 832 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

#line 832 "root_numpy/src/tree.pyx"
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_fields); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 832 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 832 "root_numpy/src/tree.pyx"
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 832 "root_numpy/src/tree.pyx"
        __pyx_v_fields = __pyx_t_7;

#line 832 "root_numpy/src/tree.pyx"
        __pyx_t_7 = 0;

        /* "root_numpy/src/tree.pyx":835
 * 
 *         # figure out the structure
 *         for icol in range(len(fieldnames)):             # <<<<<<<<<<<<<<
 *             fieldname = fieldnames[icol]
 *             # roffset is an offset of particular field in each record
 */

#line 835 "root_numpy/src/tree.pyx"
        __pyx_t_9 = PyObject_Length(__pyx_v_fieldnames); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 835 "root_numpy/src/tree.pyx"
        for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {

#line 835 "root_numpy/src/tree.pyx"
          __pyx_v_icol = __pyx_t_10;

          /* "root_numpy/src/tree.pyx":836
 *         # figure out the structure
 *         for icol in range(len(fieldnames)):
 *             fieldname = fieldnames[icol]             # <<<<<<<<<<<<<<
 *             # roffset is an offset of particular field in each record
 *             dtype, roffset = fields[fieldname]
 */

#line 836 "root_numpy/src/tree.pyx"
          __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_fieldnames, __pyx_v_icol, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L6_error;};

#line 836 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 836 "root_numpy/src/tree.pyx"
          __Pyx_XDECREF_SET(__pyx_v_fieldname, __pyx_t_7);

#line 836 "root_numpy/src/tree.pyx"
          __pyx_t_7 = 0;

          /* "root_numpy/src/tree.pyx":838
 *             fieldname = fieldnames[icol]
 *             # roffset is an offset of particular field in each record
 *             dtype, roffset = fields[fieldname]             # <<<<<<<<<<<<<<
 *             cvt = find_np2c_converter(tree, fieldname, dtype, arr[0][fieldname])
 *             if cvt is not NULL:
 */

#line 838 "root_numpy/src/tree.pyx"
          __pyx_t_7 = PyObject_GetItem(__pyx_v_fields, __pyx_v_fieldname); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L6_error;};

#line 838 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 838 "root_numpy/src/tree.pyx"
          if ((likely(PyTuple_CheckExact(__pyx_t_7))) || (PyList_CheckExact(__pyx_t_7))) {

#line 838 "root_numpy/src/tree.pyx"
            PyObject* sequence = __pyx_t_7;

#line 838 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 838 "root_numpy/src/tree.pyx"
            Py_ssize_t size = Py_SIZE(sequence);

#line 838 "root_numpy/src/tree.pyx"
            #else

#line 838 "root_numpy/src/tree.pyx"
            Py_ssize_t size = PySequence_Size(sequence);

#line 838 "root_numpy/src/tree.pyx"
            #endif

#line 838 "root_numpy/src/tree.pyx"
            if (unlikely(size != 2)) {

#line 838 "root_numpy/src/tree.pyx"
              if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 838 "root_numpy/src/tree.pyx"
              else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 838 "root_numpy/src/tree.pyx"
              {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 838 "root_numpy/src/tree.pyx"
            }

#line 838 "root_numpy/src/tree.pyx"
            #if CYTHON_COMPILING_IN_CPYTHON

#line 838 "root_numpy/src/tree.pyx"
            if (likely(PyTuple_CheckExact(sequence))) {

#line 838 "root_numpy/src/tree.pyx"
              __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 

#line 838 "root_numpy/src/tree.pyx"
              __pyx_t_11 = PyTuple_GET_ITEM(sequence, 1); 

#line 838 "root_numpy/src/tree.pyx"
            } else {

#line 838 "root_numpy/src/tree.pyx"
              __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 

#line 838 "root_numpy/src/tree.pyx"
              __pyx_t_11 = PyList_GET_ITEM(sequence, 1); 

#line 838 "root_numpy/src/tree.pyx"
            }

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_8);

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_INCREF(__pyx_t_11);

#line 838 "root_numpy/src/tree.pyx"
            #else

#line 838 "root_numpy/src/tree.pyx"
            __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_8);

#line 838 "root_numpy/src/tree.pyx"
            __pyx_t_11 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_11);

#line 838 "root_numpy/src/tree.pyx"
            #endif

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 838 "root_numpy/src/tree.pyx"
          } else {

#line 838 "root_numpy/src/tree.pyx"
            Py_ssize_t index = -1;

#line 838 "root_numpy/src/tree.pyx"
            __pyx_t_12 = PyObject_GetIter(__pyx_t_7); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_12);

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 838 "root_numpy/src/tree.pyx"
            __pyx_t_13 = Py_TYPE(__pyx_t_12)->tp_iternext;
            index = 0; __pyx_t_8 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_8)) 
#line 838 "root_numpy/src/tree.pyx"
goto __pyx_L17_unpacking_failed;

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_8);
            index = 1; __pyx_t_11 = __pyx_t_13(__pyx_t_12); if (unlikely(!__pyx_t_11)) 
#line 838 "root_numpy/src/tree.pyx"
goto __pyx_L17_unpacking_failed;

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_11);

#line 838 "root_numpy/src/tree.pyx"
            if (__Pyx_IternextUnpackEndCheck(__pyx_t_13(__pyx_t_12), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 838 "root_numpy/src/tree.pyx"
            __pyx_t_13 = NULL;

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 838 "root_numpy/src/tree.pyx"
            goto __pyx_L18_unpacking_done;

#line 838 "root_numpy/src/tree.pyx"
            __pyx_L17_unpacking_failed:;

#line 838 "root_numpy/src/tree.pyx"
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 838 "root_numpy/src/tree.pyx"
            __pyx_t_13 = NULL;

#line 838 "root_numpy/src/tree.pyx"
            if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 838 "root_numpy/src/tree.pyx"
            {__pyx_filename = __pyx_f[1]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 838 "root_numpy/src/tree.pyx"
            __pyx_L18_unpacking_done:;

#line 838 "root_numpy/src/tree.pyx"
          }

#line 838 "root_numpy/src/tree.pyx"
          __Pyx_XDECREF_SET(__pyx_v_dtype, __pyx_t_8);

#line 838 "root_numpy/src/tree.pyx"
          __pyx_t_8 = 0;

#line 838 "root_numpy/src/tree.pyx"
          __Pyx_XDECREF_SET(__pyx_v_roffset, __pyx_t_11);

#line 838 "root_numpy/src/tree.pyx"
          __pyx_t_11 = 0;

          /* "root_numpy/src/tree.pyx":839
 *             # roffset is an offset of particular field in each record
 *             dtype, roffset = fields[fieldname]
 *             cvt = find_np2c_converter(tree, fieldname, dtype, arr[0][fieldname])             # <<<<<<<<<<<<<<
 *             if cvt is not NULL:
 *                 roffsetarray.push_back(roffset)
 */

#line 839 "root_numpy/src/tree.pyx"
          __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_arr), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L6_error;};

#line 839 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_7);

#line 839 "root_numpy/src/tree.pyx"
          __pyx_t_11 = PyObject_GetItem(__pyx_t_7, __pyx_v_fieldname); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L6_error;};

#line 839 "root_numpy/src/tree.pyx"
          __Pyx_GOTREF(__pyx_t_11);

#line 839 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 839 "root_numpy/src/tree.pyx"
          __pyx_t_15.__pyx_n = 1;

#line 839 "root_numpy/src/tree.pyx"
          __pyx_t_15.peekvalue = __pyx_t_11;

#line 839 "root_numpy/src/tree.pyx"
          __pyx_t_14 = __pyx_f_13_librootnumpy_find_np2c_converter(__pyx_v_tree, __pyx_v_fieldname, __pyx_v_dtype, &__pyx_t_15); 

#line 839 "root_numpy/src/tree.pyx"
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 839 "root_numpy/src/tree.pyx"
          __pyx_v_cvt = __pyx_t_14;

          /* "root_numpy/src/tree.pyx":840
 *             dtype, roffset = fields[fieldname]
 *             cvt = find_np2c_converter(tree, fieldname, dtype, arr[0][fieldname])
 *             if cvt is not NULL:             # <<<<<<<<<<<<<<
 *                 roffsetarray.push_back(roffset)
 *                 conv_array.push_back(cvt)
 */

#line 840 "root_numpy/src/tree.pyx"
          __pyx_t_4 = ((__pyx_v_cvt != NULL) != 0);

#line 840 "root_numpy/src/tree.pyx"
          if (__pyx_t_4) {

            /* "root_numpy/src/tree.pyx":841
 *             cvt = find_np2c_converter(tree, fieldname, dtype, arr[0][fieldname])
 *             if cvt is not NULL:
 *                 roffsetarray.push_back(roffset)             # <<<<<<<<<<<<<<
 *                 conv_array.push_back(cvt)
 *                 posarray.push_back(icol)
 */

#line 841 "root_numpy/src/tree.pyx"
            __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_v_roffset); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 841 "root_numpy/src/tree.pyx"
            __pyx_v_roffsetarray.push_back(__pyx_t_16);

            /* "root_numpy/src/tree.pyx":842
 *             if cvt is not NULL:
 *                 roffsetarray.push_back(roffset)
 *                 conv_array.push_back(cvt)             # <<<<<<<<<<<<<<
 *                 posarray.push_back(icol)
 * 
 */

#line 842 "root_numpy/src/tree.pyx"
            __pyx_v_conv_array.push_back(__pyx_v_cvt);

            /* "root_numpy/src/tree.pyx":843
 *                 roffsetarray.push_back(roffset)
 *                 conv_array.push_back(cvt)
 *                 posarray.push_back(icol)             # <<<<<<<<<<<<<<
 * 
 *         # fill in data
 */

#line 843 "root_numpy/src/tree.pyx"
            __pyx_v_posarray.push_back(__pyx_v_icol);

#line 843 "root_numpy/src/tree.pyx"
            goto __pyx_L19;

#line 843 "root_numpy/src/tree.pyx"
          }

#line 843 "root_numpy/src/tree.pyx"
          __pyx_L19:;

#line 843 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":846
 * 
 *         # fill in data
 *         pos_len = posarray.size()             # <<<<<<<<<<<<<<
 *         for idata in range(arr_len):
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 */

#line 846 "root_numpy/src/tree.pyx"
        __pyx_v_pos_len = __pyx_v_posarray.size();

        /* "root_numpy/src/tree.pyx":847
 *         # fill in data
 *         pos_len = posarray.size()
 *         for idata in range(arr_len):             # <<<<<<<<<<<<<<
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 *             for ipos in range(pos_len):
 */

#line 847 "root_numpy/src/tree.pyx"
        __pyx_t_17 = __pyx_v_arr_len;

#line 847 "root_numpy/src/tree.pyx"
        for (__pyx_t_18 = 0; __pyx_t_18 < __pyx_t_17; __pyx_t_18+=1) {

#line 847 "root_numpy/src/tree.pyx"
          __pyx_v_idata = __pyx_t_18;

          /* "root_numpy/src/tree.pyx":848
 *         pos_len = posarray.size()
 *         for idata in range(arr_len):
 *             thisrow = np.PyArray_GETPTR1(arr, idata)             # <<<<<<<<<<<<<<
 *             for ipos in range(pos_len):
 *                 roffset = roffsetarray[ipos]
 */

#line 848 "root_numpy/src/tree.pyx"
          __pyx_v_thisrow = PyArray_GETPTR1(__pyx_v_arr, __pyx_v_idata);

          /* "root_numpy/src/tree.pyx":849
 *         for idata in range(arr_len):
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 *             for ipos in range(pos_len):             # <<<<<<<<<<<<<<
 *                 roffset = roffsetarray[ipos]
 *                 source = shift(thisrow, roffset)
 */

#line 849 "root_numpy/src/tree.pyx"
          __pyx_t_19 = __pyx_v_pos_len;

#line 849 "root_numpy/src/tree.pyx"
          for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_19; __pyx_t_20+=1) {

#line 849 "root_numpy/src/tree.pyx"
            __pyx_v_ipos = __pyx_t_20;

            /* "root_numpy/src/tree.pyx":850
 *             thisrow = np.PyArray_GETPTR1(arr, idata)
 *             for ipos in range(pos_len):
 *                 roffset = roffsetarray[ipos]             # <<<<<<<<<<<<<<
 *                 source = shift(thisrow, roffset)
 *                 conv_array[ipos].fill_from(source)
 */

#line 850 "root_numpy/src/tree.pyx"
            __pyx_t_11 = __Pyx_PyInt_From_int((__pyx_v_roffsetarray[__pyx_v_ipos])); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 850; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 850 "root_numpy/src/tree.pyx"
            __Pyx_GOTREF(__pyx_t_11);

#line 850 "root_numpy/src/tree.pyx"
            __Pyx_XDECREF_SET(__pyx_v_roffset, __pyx_t_11);

#line 850 "root_numpy/src/tree.pyx"
            __pyx_t_11 = 0;

            /* "root_numpy/src/tree.pyx":851
 *             for ipos in range(pos_len):
 *                 roffset = roffsetarray[ipos]
 *                 source = shift(thisrow, roffset)             # <<<<<<<<<<<<<<
 *                 conv_array[ipos].fill_from(source)
 * 
 */

#line 851 "root_numpy/src/tree.pyx"
            __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_v_roffset); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 851; __pyx_clineno = __LINE__; goto __pyx_L6_error;}

#line 851 "root_numpy/src/tree.pyx"
            __pyx_v_source = shift(__pyx_v_thisrow, __pyx_t_10);

            /* "root_numpy/src/tree.pyx":852
 *                 roffset = roffsetarray[ipos]
 *                 source = shift(thisrow, roffset)
 *                 conv_array[ipos].fill_from(source)             # <<<<<<<<<<<<<<
 * 
 *         # need to update the number of entries in the tree to match
 */

#line 852 "root_numpy/src/tree.pyx"
            (__pyx_v_conv_array[__pyx_v_ipos])->fill_from(__pyx_v_source);

#line 852 "root_numpy/src/tree.pyx"
          }

#line 852 "root_numpy/src/tree.pyx"
        }

        /* "root_numpy/src/tree.pyx":856
 *         # need to update the number of entries in the tree to match
 *         # the number in the branches since each branch is filled separately.
 *         tree.SetEntries(-1)             # <<<<<<<<<<<<<<
 * 
 *     except:
 */

#line 856 "root_numpy/src/tree.pyx"
        __pyx_v_tree->SetEntries(-1);

#line 856 "root_numpy/src/tree.pyx"
      }

#line 856 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 856 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 856 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 856 "root_numpy/src/tree.pyx"
      goto __pyx_L13_try_end;

#line 856 "root_numpy/src/tree.pyx"
      __pyx_L6_error:;

#line 856 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 856 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 856 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 856 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "root_numpy/src/tree.pyx":858
 *         tree.SetEntries(-1)
 * 
 *     except:             # <<<<<<<<<<<<<<
 *         raise
 * 
 */

#line 858 "root_numpy/src/tree.pyx"
      /*except:*/ {

#line 858 "root_numpy/src/tree.pyx"
        __Pyx_AddTraceback("_librootnumpy.array2tree", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 858 "root_numpy/src/tree.pyx"
        if (__Pyx_GetException(&__pyx_t_11, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 858; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 858 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_11);

#line 858 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 858 "root_numpy/src/tree.pyx"
        __Pyx_GOTREF(__pyx_t_8);

        /* "root_numpy/src/tree.pyx":859
 * 
 *     except:
 *         raise             # <<<<<<<<<<<<<<
 * 
 *     finally:
 */

#line 859 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_11);

#line 859 "root_numpy/src/tree.pyx"
        __Pyx_GIVEREF(__pyx_t_7);

#line 859 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_8);

#line 859 "root_numpy/src/tree.pyx"
        __Pyx_ErrRestore(__pyx_t_11, __pyx_t_7, __pyx_t_8);
        __pyx_t_11 = 0; __pyx_t_7 = 0; __pyx_t_8 = 0; 
#line 859 "root_numpy/src/tree.pyx"


#line 859 "root_numpy/src/tree.pyx"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 859; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}

#line 859 "root_numpy/src/tree.pyx"
      }

#line 859 "root_numpy/src/tree.pyx"
      __pyx_L8_except_error:;

#line 859 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_1);

#line 859 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_2);

#line 859 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_3);

#line 859 "root_numpy/src/tree.pyx"
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);

#line 859 "root_numpy/src/tree.pyx"
      goto __pyx_L4_error;

#line 859 "root_numpy/src/tree.pyx"
      __pyx_L13_try_end:;

#line 859 "root_numpy/src/tree.pyx"
    }

#line 859 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":865
 *         # root has some global funny memory management...
 *         # need to make sure no double free
 *         for icv in range(conv_array.size()):             # <<<<<<<<<<<<<<
 *             tmpcv = conv_array[icv]
 *             del tmpcv
 */

#line 865 "root_numpy/src/tree.pyx"
  /*finally:*/ {

#line 865 "root_numpy/src/tree.pyx"
    /*normal exit:*/{

#line 865 "root_numpy/src/tree.pyx"
      __pyx_t_21 = __pyx_v_conv_array.size();

#line 865 "root_numpy/src/tree.pyx"
      for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {

#line 865 "root_numpy/src/tree.pyx"
        __pyx_v_icv = __pyx_t_22;

        /* "root_numpy/src/tree.pyx":866
 *         # need to make sure no double free
 *         for icv in range(conv_array.size()):
 *             tmpcv = conv_array[icv]             # <<<<<<<<<<<<<<
 *             del tmpcv
 * 
 */

#line 866 "root_numpy/src/tree.pyx"
        __pyx_v_tmpcv = (__pyx_v_conv_array[__pyx_v_icv]);

        /* "root_numpy/src/tree.pyx":867
 *         for icv in range(conv_array.size()):
 *             tmpcv = conv_array[icv]
 *             del tmpcv             # <<<<<<<<<<<<<<
 * 
 *     return tree
 */

#line 867 "root_numpy/src/tree.pyx"
        delete __pyx_v_tmpcv;

#line 867 "root_numpy/src/tree.pyx"
      }

#line 867 "root_numpy/src/tree.pyx"
      goto __pyx_L5;

#line 867 "root_numpy/src/tree.pyx"
    }

#line 867 "root_numpy/src/tree.pyx"
    /*exception exit:*/{

#line 867 "root_numpy/src/tree.pyx"
      __pyx_L4_error:;

#line 867 "root_numpy/src/tree.pyx"
      __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0;

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 867 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_24, &__pyx_t_25, &__pyx_t_26);

#line 867 "root_numpy/src/tree.pyx"
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1) < 0)) __Pyx_ErrFetch(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_3);

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_2);

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_1);

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_24);

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_25);

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XGOTREF(__pyx_t_26);

#line 867 "root_numpy/src/tree.pyx"
      __pyx_t_10 = __pyx_lineno; __pyx_t_16 = __pyx_clineno; __pyx_t_23 = __pyx_filename;

#line 867 "root_numpy/src/tree.pyx"
      {

        /* "root_numpy/src/tree.pyx":865
 *         # root has some global funny memory management...
 *         # need to make sure no double free
 *         for icv in range(conv_array.size()):             # <<<<<<<<<<<<<<
 *             tmpcv = conv_array[icv]
 *             del tmpcv
 */

#line 865 "root_numpy/src/tree.pyx"
        __pyx_t_21 = __pyx_v_conv_array.size();

#line 865 "root_numpy/src/tree.pyx"
        for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_21; __pyx_t_22+=1) {

#line 865 "root_numpy/src/tree.pyx"
          __pyx_v_icv = __pyx_t_22;

          /* "root_numpy/src/tree.pyx":866
 *         # need to make sure no double free
 *         for icv in range(conv_array.size()):
 *             tmpcv = conv_array[icv]             # <<<<<<<<<<<<<<
 *             del tmpcv
 * 
 */

#line 866 "root_numpy/src/tree.pyx"
          __pyx_v_tmpcv = (__pyx_v_conv_array[__pyx_v_icv]);

          /* "root_numpy/src/tree.pyx":867
 *         for icv in range(conv_array.size()):
 *             tmpcv = conv_array[icv]
 *             del tmpcv             # <<<<<<<<<<<<<<
 * 
 *     return tree
 */

#line 867 "root_numpy/src/tree.pyx"
          delete __pyx_v_tmpcv;

#line 867 "root_numpy/src/tree.pyx"
        }

#line 867 "root_numpy/src/tree.pyx"
      }

#line 867 "root_numpy/src/tree.pyx"
      if (PY_MAJOR_VERSION >= 3) {

#line 867 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_24);

#line 867 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_25);

#line 867 "root_numpy/src/tree.pyx"
        __Pyx_XGIVEREF(__pyx_t_26);

#line 867 "root_numpy/src/tree.pyx"
        __Pyx_ExceptionReset(__pyx_t_24, __pyx_t_25, __pyx_t_26);

#line 867 "root_numpy/src/tree.pyx"
      }

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_3);

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_2);

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_XGIVEREF(__pyx_t_1);

#line 867 "root_numpy/src/tree.pyx"
      __Pyx_ErrRestore(__pyx_t_3, __pyx_t_2, __pyx_t_1);

#line 867 "root_numpy/src/tree.pyx"
      __pyx_t_3 = 0; __pyx_t_2 = 0; __pyx_t_1 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0; __pyx_t_26 = 0;

#line 867 "root_numpy/src/tree.pyx"
      __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_16; __pyx_filename = __pyx_t_23;

#line 867 "root_numpy/src/tree.pyx"
      goto __pyx_L1_error;

#line 867 "root_numpy/src/tree.pyx"
    }

#line 867 "root_numpy/src/tree.pyx"
    __pyx_L5:;

#line 867 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":869
 *             del tmpcv
 * 
 *     return tree             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 869 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_v_tree;

#line 869 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":810
 * 
 * 
 * cdef TTree* array2tree(np.ndarray arr, name='tree', TTree* tree=NULL) except *:             # <<<<<<<<<<<<<<
 *     # hmm how do I catch all python exception
 *     # and clean up before throwing ?
 */

#line 810 "root_numpy/src/tree.pyx"


#line 810 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 810 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_12);

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2tree", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 810 "root_numpy/src/tree.pyx"
  __pyx_r = 0;

#line 810 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_fieldnames);

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_fields);

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_fieldname);

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_dtype);

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_v_roffset);

#line 810 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 810 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 810 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":872
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

#line 872 "root_numpy/src/tree.pyx"


#line 872 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 872 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_11array2tree_toCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_11array2tree_toCObj = 
#line 872 "root_numpy/src/tree.pyx"
{"array2tree_toCObj", (PyCFunction)__pyx_pw_13_librootnumpy_11array2tree_toCObj, METH_VARARGS|METH_KEYWORDS, 0};

#line 872 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_11array2tree_toCObj(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0
#line 872 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_name = 0
#line 872 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_tree = 0
#line 872 "root_numpy/src/tree.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 872 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2tree_toCObj (wrapper)", 0);

#line 872 "root_numpy/src/tree.pyx"
  {

#line 872 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,&__pyx_n_s_name,&__pyx_n_s_tree,0};

#line 872 "root_numpy/src/tree.pyx"
    PyObject* values[3] = {0,0,0};

#line 872 "root_numpy/src/tree.pyx"
    values[1] = ((PyObject *)__pyx_n_s_tree);

#line 872 "root_numpy/src/tree.pyx"
    values[2] = ((PyObject *)Py_None);

#line 872 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 872 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 872 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 872 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  3: 
#line 872 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 872 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 872 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 872 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 872 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 872 "root_numpy/src/tree.pyx"
      }

#line 872 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 872 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 872 "root_numpy/src/tree.pyx"
        case  0:

#line 872 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arr)) != 0)) kw_args--;
        else 
#line 872 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 872 "root_numpy/src/tree.pyx"
        case  1:

#line 872 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 872 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_name);

#line 872 "root_numpy/src/tree.pyx"
          if (value) { values[1] = value; kw_args--; }

#line 872 "root_numpy/src/tree.pyx"
        }

#line 872 "root_numpy/src/tree.pyx"
        case  2:

#line 872 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 872 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_tree);

#line 872 "root_numpy/src/tree.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 872 "root_numpy/src/tree.pyx"
        }

#line 872 "root_numpy/src/tree.pyx"
      }

#line 872 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 872 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "array2tree_toCObj") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 872 "root_numpy/src/tree.pyx"
      }

#line 872 "root_numpy/src/tree.pyx"
    } else {

#line 872 "root_numpy/src/tree.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: 
#line 872 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 872 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 872 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 872 "root_numpy/src/tree.pyx"
        break;
        default: 
#line 872 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 872 "root_numpy/src/tree.pyx"
      }

#line 872 "root_numpy/src/tree.pyx"
    }

#line 872 "root_numpy/src/tree.pyx"
    __pyx_v_arr = values[0];

#line 872 "root_numpy/src/tree.pyx"
    __pyx_v_name = values[1];

#line 872 "root_numpy/src/tree.pyx"
    __pyx_v_tree = values[2];

#line 872 "root_numpy/src/tree.pyx"
  }

#line 872 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 872 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("array2tree_toCObj", 0, 1, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 872 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 872 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2tree_toCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 872 "root_numpy/src/tree.pyx"
  return NULL;

#line 872 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 872 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_10array2tree_toCObj(__pyx_self, __pyx_v_arr, __pyx_v_name, __pyx_v_tree);

#line 872 "root_numpy/src/tree.pyx"


#line 872 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 872 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 872 "root_numpy/src/tree.pyx"
}

#line 872 "root_numpy/src/tree.pyx"


#line 872 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_10array2tree_toCObj(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_name, PyObject *__pyx_v_tree) {
  TTree *__pyx_v_intree
#line 872 "root_numpy/src/tree.pyx"
;
  TTree *__pyx_v_outtree
#line 872 "root_numpy/src/tree.pyx"
;

#line 872 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  void *__pyx_t_4;
  TTree *__pyx_t_5;
  struct __pyx_opt_args_13_librootnumpy_array2tree __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2tree_toCObj", 0);

  /* "root_numpy/src/tree.pyx":873
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):
 *     cdef TTree* intree = NULL             # <<<<<<<<<<<<<<
 *     cdef TTree* outtree = NULL
 *     if tree is not None:
 */

#line 873 "root_numpy/src/tree.pyx"
  __pyx_v_intree = NULL;

  /* "root_numpy/src/tree.pyx":874
 * def array2tree_toCObj(arr, name='tree', tree=None):
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL             # <<<<<<<<<<<<<<
 *     if tree is not None:
 *         # this is not a safe method
 */

#line 874 "root_numpy/src/tree.pyx"
  __pyx_v_outtree = NULL;

  /* "root_numpy/src/tree.pyx":875
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 *     if tree is not None:             # <<<<<<<<<<<<<<
 *         # this is not a safe method
 *         # provided here for convenience only
 */

#line 875 "root_numpy/src/tree.pyx"
  __pyx_t_1 = (__pyx_v_tree != Py_None);

#line 875 "root_numpy/src/tree.pyx"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 875 "root_numpy/src/tree.pyx"
  if (__pyx_t_2) {

    /* "root_numpy/src/tree.pyx":879
 *         # provided here for convenience only
 *         # typecheck should be implemented by the wrapper
 *         if not PyCObject_Check(tree):             # <<<<<<<<<<<<<<
 *             raise ValueError("tree must be PyCObject")
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 */

#line 879 "root_numpy/src/tree.pyx"
    __pyx_t_2 = ((!(PyCObject_Check(__pyx_v_tree) != 0)) != 0);

#line 879 "root_numpy/src/tree.pyx"
    if (__pyx_t_2) {

      /* "root_numpy/src/tree.pyx":880
 *         # typecheck should be implemented by the wrapper
 *         if not PyCObject_Check(tree):
 *             raise ValueError("tree must be PyCObject")             # <<<<<<<<<<<<<<
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)
 */

#line 880 "root_numpy/src/tree.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 880 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 880 "root_numpy/src/tree.pyx"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 880 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 880 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 880 "root_numpy/src/tree.pyx"
    }

    /* "root_numpy/src/tree.pyx":881
 *         if not PyCObject_Check(tree):
 *             raise ValueError("tree must be PyCObject")
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)             # <<<<<<<<<<<<<<
 *     outtree = array2tree(arr, name=name, tree=intree)
 *     return PyCObject_FromVoidPtr(outtree, NULL)
 */

#line 881 "root_numpy/src/tree.pyx"
    __pyx_t_4 = PyCObject_AsVoidPtr(__pyx_v_tree); if (unlikely(__pyx_t_4 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 881; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 881 "root_numpy/src/tree.pyx"
    __pyx_v_intree = ((TTree *)__pyx_t_4);

#line 881 "root_numpy/src/tree.pyx"
    goto __pyx_L3;

#line 881 "root_numpy/src/tree.pyx"
  }

#line 881 "root_numpy/src/tree.pyx"
  __pyx_L3:;

  /* "root_numpy/src/tree.pyx":882
 *             raise ValueError("tree must be PyCObject")
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)             # <<<<<<<<<<<<<<
 *     return PyCObject_FromVoidPtr(outtree, NULL)
 * 
 */

#line 882 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_v_arr) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_arr, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 882 "root_numpy/src/tree.pyx"
  __pyx_t_6.__pyx_n = 2;

#line 882 "root_numpy/src/tree.pyx"
  __pyx_t_6.name = __pyx_v_name;

#line 882 "root_numpy/src/tree.pyx"
  __pyx_t_6.tree = __pyx_v_intree;

#line 882 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __pyx_f_13_librootnumpy_array2tree(((PyArrayObject *)__pyx_v_arr), &__pyx_t_6); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 882; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 882 "root_numpy/src/tree.pyx"
  __pyx_v_outtree = __pyx_t_5;

  /* "root_numpy/src/tree.pyx":883
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)
 *     return PyCObject_FromVoidPtr(outtree, NULL)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 883 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 883 "root_numpy/src/tree.pyx"
  __pyx_t_3 = PyCObject_FromVoidPtr(__pyx_v_outtree, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 883; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 883 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 883 "root_numpy/src/tree.pyx"
  __pyx_r = __pyx_t_3;

#line 883 "root_numpy/src/tree.pyx"
  __pyx_t_3 = 0;

#line 883 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/tree.pyx":872
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

#line 872 "root_numpy/src/tree.pyx"


#line 872 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 872 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2tree_toCObj", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 872 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 872 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 872 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 872 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":886
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 */

#line 886 "root_numpy/src/tree.pyx"


#line 886 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 886 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_13array2root(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_13array2root = 
#line 886 "root_numpy/src/tree.pyx"
{"array2root", (PyCFunction)__pyx_pw_13_librootnumpy_13array2root, METH_VARARGS|METH_KEYWORDS, 0};

#line 886 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_13array2root(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arr = 0
#line 886 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_filename = 0
#line 886 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_treename = 0
#line 886 "root_numpy/src/tree.pyx"
;
  PyObject *__pyx_v_mode = 0
#line 886 "root_numpy/src/tree.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 886 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2root (wrapper)", 0);

#line 886 "root_numpy/src/tree.pyx"
  {

#line 886 "root_numpy/src/tree.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arr,&__pyx_n_s_filename,&__pyx_n_s_treename,&__pyx_n_s_mode,0};

#line 886 "root_numpy/src/tree.pyx"
    PyObject* values[4] = {0,0,0,0};

#line 886 "root_numpy/src/tree.pyx"
    values[2] = ((PyObject *)__pyx_n_s_tree);

#line 886 "root_numpy/src/tree.pyx"
    values[3] = ((PyObject *)__pyx_n_s_update);

#line 886 "root_numpy/src/tree.pyx"
    if (unlikely(__pyx_kwds)) {

#line 886 "root_numpy/src/tree.pyx"
      Py_ssize_t kw_args;

#line 886 "root_numpy/src/tree.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 886 "root_numpy/src/tree.pyx"
      switch (pos_args) {
        case  4: 
#line 886 "root_numpy/src/tree.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 886 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 886 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 886 "root_numpy/src/tree.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 886 "root_numpy/src/tree.pyx"
        case  0: break;
        default: 
#line 886 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 886 "root_numpy/src/tree.pyx"
      }

#line 886 "root_numpy/src/tree.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 886 "root_numpy/src/tree.pyx"
      switch (pos_args) {

#line 886 "root_numpy/src/tree.pyx"
        case  0:

#line 886 "root_numpy/src/tree.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arr)) != 0)) kw_args--;
        else 
#line 886 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 886 "root_numpy/src/tree.pyx"
        case  1:

#line 886 "root_numpy/src/tree.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filename)) != 0)) kw_args--;

#line 886 "root_numpy/src/tree.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("array2root", 0, 2, 4, 1); 
#line 886 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 886 "root_numpy/src/tree.pyx"
        }

#line 886 "root_numpy/src/tree.pyx"
        case  2:

#line 886 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 886 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_treename);

#line 886 "root_numpy/src/tree.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 886 "root_numpy/src/tree.pyx"
        }

#line 886 "root_numpy/src/tree.pyx"
        case  3:

#line 886 "root_numpy/src/tree.pyx"
        if (kw_args > 0) {

#line 886 "root_numpy/src/tree.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mode);

#line 886 "root_numpy/src/tree.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 886 "root_numpy/src/tree.pyx"
        }

#line 886 "root_numpy/src/tree.pyx"
      }

#line 886 "root_numpy/src/tree.pyx"
      if (unlikely(kw_args > 0)) {

#line 886 "root_numpy/src/tree.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "array2root") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 886 "root_numpy/src/tree.pyx"
      }

#line 886 "root_numpy/src/tree.pyx"
    } else {

#line 886 "root_numpy/src/tree.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 886 "root_numpy/src/tree.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 886 "root_numpy/src/tree.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 886 "root_numpy/src/tree.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 886 "root_numpy/src/tree.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 886 "root_numpy/src/tree.pyx"
        break;
        default: 
#line 886 "root_numpy/src/tree.pyx"
goto __pyx_L5_argtuple_error;

#line 886 "root_numpy/src/tree.pyx"
      }

#line 886 "root_numpy/src/tree.pyx"
    }

#line 886 "root_numpy/src/tree.pyx"
    __pyx_v_arr = values[0];

#line 886 "root_numpy/src/tree.pyx"
    __pyx_v_filename = values[1];

#line 886 "root_numpy/src/tree.pyx"
    __pyx_v_treename = values[2];

#line 886 "root_numpy/src/tree.pyx"
    __pyx_v_mode = values[3];

#line 886 "root_numpy/src/tree.pyx"
  }

#line 886 "root_numpy/src/tree.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 886 "root_numpy/src/tree.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("array2root", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 886 "root_numpy/src/tree.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 886 "root_numpy/src/tree.pyx"
  __pyx_L3_error:;

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2root", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 886 "root_numpy/src/tree.pyx"
  return NULL;

#line 886 "root_numpy/src/tree.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 886 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_12array2root(__pyx_self, __pyx_v_arr, __pyx_v_filename, __pyx_v_treename, __pyx_v_mode);

#line 886 "root_numpy/src/tree.pyx"


#line 886 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 886 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 886 "root_numpy/src/tree.pyx"
}

#line 886 "root_numpy/src/tree.pyx"


#line 886 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_12array2root(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_arr, PyObject *__pyx_v_filename, PyObject *__pyx_v_treename, PyObject *__pyx_v_mode) {
  TFile *__pyx_v_file
#line 886 "root_numpy/src/tree.pyx"
;
  TTree *__pyx_v_tree
#line 886 "root_numpy/src/tree.pyx"
;

#line 886 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  const char *__pyx_t_1;
  const char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  TTree *__pyx_t_8;
  struct __pyx_opt_args_13_librootnumpy_array2tree __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("array2root", 0);

  /* "root_numpy/src/tree.pyx":887
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):
 *     cdef TFile* file = Open(filename, mode)             # <<<<<<<<<<<<<<
 *     if file is NULL:
 *         raise IOError("cannot open file {0}".format(filename))
 */

#line 887 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_PyObject_AsString(__pyx_v_filename); if (unlikely((!__pyx_t_1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 887 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_mode); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 887; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 887 "root_numpy/src/tree.pyx"
  __pyx_v_file = TFile::Open(__pyx_t_1, __pyx_t_2);

  /* "root_numpy/src/tree.pyx":888
 * def array2root(arr, filename, treename='tree', mode='update'):
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:             # <<<<<<<<<<<<<<
 *         raise IOError("cannot open file {0}".format(filename))
 *     if not file.IsWritable():
 */

#line 888 "root_numpy/src/tree.pyx"
  __pyx_t_3 = ((__pyx_v_file == NULL) != 0);

#line 888 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/tree.pyx":889
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 *         raise IOError("cannot open file {0}".format(filename))             # <<<<<<<<<<<<<<
 *     if not file.IsWritable():
 *         raise IOError("file {0} is not writable".format(filename))
 */

#line 889 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_cannot_open_file_0, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 889 "root_numpy/src/tree.pyx"
    __pyx_t_6 = NULL;

#line 889 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {

#line 889 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);

#line 889 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_6)) {

#line 889 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 889 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_6);

#line 889 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 889 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 889 "root_numpy/src/tree.pyx"
      }

#line 889 "root_numpy/src/tree.pyx"
    }

#line 889 "root_numpy/src/tree.pyx"
    if (!__pyx_t_6) {

#line 889 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_filename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 889 "root_numpy/src/tree.pyx"
    } else {

#line 889 "root_numpy/src/tree.pyx"
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 889 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;

#line 889 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_filename);

#line 889 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_filename);

#line 889 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_filename);

#line 889 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 889 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 889 "root_numpy/src/tree.pyx"
    }

#line 889 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 889 "root_numpy/src/tree.pyx"
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 889 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);

#line 889 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 889 "root_numpy/src/tree.pyx"
    __pyx_t_4 = 0;

#line 889 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 889 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 889 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 889 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 889 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 889; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 889 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":890
 *     if file is NULL:
 *         raise IOError("cannot open file {0}".format(filename))
 *     if not file.IsWritable():             # <<<<<<<<<<<<<<
 *         raise IOError("file {0} is not writable".format(filename))
 * 
 */

#line 890 "root_numpy/src/tree.pyx"
  __pyx_t_3 = ((!(__pyx_v_file->IsWritable() != 0)) != 0);

#line 890 "root_numpy/src/tree.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/src/tree.pyx":891
 *         raise IOError("cannot open file {0}".format(filename))
 *     if not file.IsWritable():
 *         raise IOError("file {0} is not writable".format(filename))             # <<<<<<<<<<<<<<
 * 
 *     # If a tree with that name exists, we want to update it
 */

#line 891 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_file_0_is_not_writable, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 891 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 891 "root_numpy/src/tree.pyx"
    __pyx_t_7 = NULL;

#line 891 "root_numpy/src/tree.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {

#line 891 "root_numpy/src/tree.pyx"
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);

#line 891 "root_numpy/src/tree.pyx"
      if (likely(__pyx_t_7)) {

#line 891 "root_numpy/src/tree.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 891 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(__pyx_t_7);

#line 891 "root_numpy/src/tree.pyx"
        __Pyx_INCREF(function);

#line 891 "root_numpy/src/tree.pyx"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 891 "root_numpy/src/tree.pyx"
      }

#line 891 "root_numpy/src/tree.pyx"
    }

#line 891 "root_numpy/src/tree.pyx"
    if (!__pyx_t_7) {

#line 891 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_filename); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 891 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 891 "root_numpy/src/tree.pyx"
    } else {

#line 891 "root_numpy/src/tree.pyx"
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 891 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 891 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;

#line 891 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_v_filename);

#line 891 "root_numpy/src/tree.pyx"
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_filename);

#line 891 "root_numpy/src/tree.pyx"
      __Pyx_GIVEREF(__pyx_v_filename);

#line 891 "root_numpy/src/tree.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 891 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 891 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 891 "root_numpy/src/tree.pyx"
    }

#line 891 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 891 "root_numpy/src/tree.pyx"
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 891 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 891 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);

#line 891 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_4);

#line 891 "root_numpy/src/tree.pyx"
    __pyx_t_4 = 0;

#line 891 "root_numpy/src/tree.pyx"
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 891 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 891 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 891 "root_numpy/src/tree.pyx"
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 891 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 891 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 891; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 891 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":894
 * 
 *     # If a tree with that name exists, we want to update it
 *     cdef TTree* tree = <TTree*> file.Get(treename)             # <<<<<<<<<<<<<<
 *     tree = array2tree(arr, name=treename, tree=tree)
 *     tree.Write(treename, 2) # TObject::kOverwrite
 */

#line 894 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_treename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 894; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 894 "root_numpy/src/tree.pyx"
  __pyx_v_tree = ((TTree *)__pyx_v_file->Get(__pyx_t_2));

  /* "root_numpy/src/tree.pyx":895
 *     # If a tree with that name exists, we want to update it
 *     cdef TTree* tree = <TTree*> file.Get(treename)
 *     tree = array2tree(arr, name=treename, tree=tree)             # <<<<<<<<<<<<<<
 *     tree.Write(treename, 2) # TObject::kOverwrite
 *     file.Close()
 */

#line 895 "root_numpy/src/tree.pyx"
  if (!(likely(((__pyx_v_arr) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_arr, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 895 "root_numpy/src/tree.pyx"
  __pyx_t_9.__pyx_n = 2;

#line 895 "root_numpy/src/tree.pyx"
  __pyx_t_9.name = __pyx_v_treename;

#line 895 "root_numpy/src/tree.pyx"
  __pyx_t_9.tree = __pyx_v_tree;

#line 895 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __pyx_f_13_librootnumpy_array2tree(((PyArrayObject *)__pyx_v_arr), &__pyx_t_9); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 895; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 895 "root_numpy/src/tree.pyx"
  __pyx_v_tree = __pyx_t_8;

  /* "root_numpy/src/tree.pyx":896
 *     cdef TTree* tree = <TTree*> file.Get(treename)
 *     tree = array2tree(arr, name=treename, tree=tree)
 *     tree.Write(treename, 2) # TObject::kOverwrite             # <<<<<<<<<<<<<<
 *     file.Close()
 *     # how to clean up TTree? Same question as above.
 */

#line 896 "root_numpy/src/tree.pyx"
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_treename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 896; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 896 "root_numpy/src/tree.pyx"
  __pyx_v_tree->Write(__pyx_t_2, 2);

  /* "root_numpy/src/tree.pyx":897
 *     tree = array2tree(arr, name=treename, tree=tree)
 *     tree.Write(treename, 2) # TObject::kOverwrite
 *     file.Close()             # <<<<<<<<<<<<<<
 *     # how to clean up TTree? Same question as above.
 *     del file
 */

#line 897 "root_numpy/src/tree.pyx"
  __pyx_v_file->Close();

  /* "root_numpy/src/tree.pyx":899
 *     file.Close()
 *     # how to clean up TTree? Same question as above.
 *     del file             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 899 "root_numpy/src/tree.pyx"
  delete __pyx_v_file;

  /* "root_numpy/src/tree.pyx":886
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 */

#line 886 "root_numpy/src/tree.pyx"


#line 886 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 886 "root_numpy/src/tree.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 886 "root_numpy/src/tree.pyx"
  goto __pyx_L0;

#line 886 "root_numpy/src/tree.pyx"
  __pyx_L1_error:;

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_AddTraceback("_librootnumpy.array2root", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 886 "root_numpy/src/tree.pyx"
  __pyx_r = NULL;

#line 886 "root_numpy/src/tree.pyx"
  __pyx_L0:;

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 886 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 886 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/tree.pyx":903
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 */

#line 903 "root_numpy/src/tree.pyx"


#line 903 "root_numpy/src/tree.pyx"
/* Python wrapper */

#line 903 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_15cleanup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_15cleanup = 
#line 903 "root_numpy/src/tree.pyx"
{"cleanup", (PyCFunction)__pyx_pw_13_librootnumpy_15cleanup, METH_NOARGS, 0};

#line 903 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pw_13_librootnumpy_15cleanup(PyObject *__pyx_self, CYTHON_UNUSED PyObject *unused) {

#line 903 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = 0;

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyDeclarations

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("cleanup (wrapper)", 0);
  __pyx_r = 
#line 903 "root_numpy/src/tree.pyx"
__pyx_pf_13_librootnumpy_14cleanup(__pyx_self);

#line 903 "root_numpy/src/tree.pyx"


#line 903 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 903 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 903 "root_numpy/src/tree.pyx"
}

#line 903 "root_numpy/src/tree.pyx"


#line 903 "root_numpy/src/tree.pyx"
static PyObject *__pyx_pf_13_librootnumpy_14cleanup(CYTHON_UNUSED PyObject *__pyx_self) {
  std::map<std::string,__pyx_t_13_librootnumpy_Converter *> ::iterator __pyx_v_it
#line 903 "root_numpy/src/tree.pyx"
;

#line 903 "root_numpy/src/tree.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_RefNannySetupContext("cleanup", 0);

  /* "root_numpy/src/tree.pyx":905
 * def cleanup():
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()             # <<<<<<<<<<<<<<
 *     while it != CONVERTERS.end():
 *         del deref(it).second
 */

#line 905 "root_numpy/src/tree.pyx"
  __pyx_v_it = __pyx_v_13_librootnumpy_CONVERTERS.begin();

  /* "root_numpy/src/tree.pyx":906
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 *     while it != CONVERTERS.end():             # <<<<<<<<<<<<<<
 *         del deref(it).second
 *         inc(it)
 */

#line 906 "root_numpy/src/tree.pyx"
  while (1) {

#line 906 "root_numpy/src/tree.pyx"
    __pyx_t_1 = ((__pyx_v_it != __pyx_v_13_librootnumpy_CONVERTERS.end()) != 0);

#line 906 "root_numpy/src/tree.pyx"
    if (!__pyx_t_1) break;

    /* "root_numpy/src/tree.pyx":907
 *     it = CONVERTERS.begin()
 *     while it != CONVERTERS.end():
 *         del deref(it).second             # <<<<<<<<<<<<<<
 *         inc(it)
 */

#line 907 "root_numpy/src/tree.pyx"
    delete (*__pyx_v_it).second;

    /* "root_numpy/src/tree.pyx":908
 *     while it != CONVERTERS.end():
 *         del deref(it).second
 *         inc(it)             # <<<<<<<<<<<<<<
 */

#line 908 "root_numpy/src/tree.pyx"
    (++__pyx_v_it);

#line 908 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":903
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 */

#line 903 "root_numpy/src/tree.pyx"


#line 903 "root_numpy/src/tree.pyx"
  /* function exit code */

#line 903 "root_numpy/src/tree.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_RefNannyFinishContext();

#line 903 "root_numpy/src/tree.pyx"
  return __pyx_r;

#line 903 "root_numpy/src/tree.pyx"
}

/* "root_numpy/src/array.pyx":5
 * """
 * 
 * cdef inline np.ndarray tonumpyarray(void* data, int size, int dtype) with gil:             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims = size
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 */

#line 5 "root_numpy/src/array.pyx"


#line 5 "root_numpy/src/array.pyx"
static CYTHON_INLINE PyArrayObject *__pyx_f_13_librootnumpy_tonumpyarray(void *__pyx_v_data, int __pyx_v_size, int __pyx_v_dtype) {
  npy_intp __pyx_v_dims
#line 5 "root_numpy/src/array.pyx"
;

#line 5 "root_numpy/src/array.pyx"
  PyArrayObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 5 "root_numpy/src/array.pyx"
  #ifdef WITH_THREAD
  PyGILState_STATE 
#line 5 "root_numpy/src/array.pyx"
__pyx_gilstate_save = PyGILState_Ensure();

#line 5 "root_numpy/src/array.pyx"
  #endif

#line 5 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("tonumpyarray", 0);

  /* "root_numpy/src/array.pyx":6
 * 
 * cdef inline np.ndarray tonumpyarray(void* data, int size, int dtype) with gil:
 *     cdef np.npy_intp dims = size             # <<<<<<<<<<<<<<
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 */

#line 6 "root_numpy/src/array.pyx"
  __pyx_v_dims = __pyx_v_size;

  /* "root_numpy/src/array.pyx":8
 *     cdef np.npy_intp dims = size
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)             # <<<<<<<<<<<<<<
 * 
 * def array_d(root_arr):
 */

#line 8 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 8 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyArray_SimpleNewFromData(1, (&__pyx_v_dims), __pyx_v_dtype, __pyx_v_data); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 8 "root_numpy/src/array.pyx"
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/array.pyx"
  __pyx_r = ((PyArrayObject *)__pyx_t_1);

#line 8 "root_numpy/src/array.pyx"
  __pyx_t_1 = 0;

#line 8 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":5
 * """
 * 
 * cdef inline np.ndarray tonumpyarray(void* data, int size, int dtype) with gil:             # <<<<<<<<<<<<<<
 *     cdef np.npy_intp dims = size
 *     #NOTE: it doesn't take ownership of `data`. You must free `data` yourself
 */

#line 5 "root_numpy/src/array.pyx"


#line 5 "root_numpy/src/array.pyx"
  /* function exit code */

#line 5 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 5 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 5 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.tonumpyarray", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 5 "root_numpy/src/array.pyx"
  __pyx_r = 0;

#line 5 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 5 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 5 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 5 "root_numpy/src/array.pyx"
  #ifdef WITH_THREAD

#line 5 "root_numpy/src/array.pyx"
  PyGILState_Release(__pyx_gilstate_save);

#line 5 "root_numpy/src/array.pyx"
  #endif

#line 5 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 5 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":10
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

#line 10 "root_numpy/src/array.pyx"


#line 10 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 10 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_17array_d(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_17array_d = 
#line 10 "root_numpy/src/array.pyx"
{"array_d", (PyCFunction)__pyx_pw_13_librootnumpy_17array_d, METH_O, 0};

#line 10 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_17array_d(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 10 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_d (wrapper)", 0);
  __pyx_r = 
#line 10 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_16array_d(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 10 "root_numpy/src/array.pyx"


#line 10 "root_numpy/src/array.pyx"
  /* function exit code */

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 10 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 10 "root_numpy/src/array.pyx"
}

#line 10 "root_numpy/src/array.pyx"


#line 10 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_16array_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayD *__pyx_v__arr
#line 10 "root_numpy/src/array.pyx"
;

#line 10 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_d", 0);

  /* "root_numpy/src/array.pyx":11
 * 
 * def array_d(root_arr):
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 */

#line 11 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayD *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":12
 * def array_d(root_arr):
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)             # <<<<<<<<<<<<<<
 * 
 * def array_f(root_arr):
 */

#line 12 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 12 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_DOUBLE)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 12 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 12 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 12 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":10
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

#line 10 "root_numpy/src/array.pyx"


#line 10 "root_numpy/src/array.pyx"
  /* function exit code */

#line 10 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 10 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 10 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 10 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 10 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 10 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 10 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 10 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 10 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":14
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

#line 14 "root_numpy/src/array.pyx"


#line 14 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 14 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_19array_f(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_19array_f = 
#line 14 "root_numpy/src/array.pyx"
{"array_f", (PyCFunction)__pyx_pw_13_librootnumpy_19array_f, METH_O, 0};

#line 14 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_19array_f(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 14 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 14 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 14 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_f (wrapper)", 0);
  __pyx_r = 
#line 14 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_18array_f(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 14 "root_numpy/src/array.pyx"


#line 14 "root_numpy/src/array.pyx"
  /* function exit code */

#line 14 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 14 "root_numpy/src/array.pyx"
}

#line 14 "root_numpy/src/array.pyx"


#line 14 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_18array_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayF *__pyx_v__arr
#line 14 "root_numpy/src/array.pyx"
;

#line 14 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 14 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_f", 0);

  /* "root_numpy/src/array.pyx":15
 * 
 * def array_f(root_arr):
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 */

#line 15 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayF *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":16
 * def array_f(root_arr):
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)             # <<<<<<<<<<<<<<
 * 
 * def array_l(root_arr):
 */

#line 16 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 16 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_FLOAT32)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 16 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 16 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 16 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":14
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

#line 14 "root_numpy/src/array.pyx"


#line 14 "root_numpy/src/array.pyx"
  /* function exit code */

#line 14 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 14 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 14 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_f", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 14 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 14 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 14 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 14 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 14 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":18
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

#line 18 "root_numpy/src/array.pyx"


#line 18 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 18 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_21array_l(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_21array_l = 
#line 18 "root_numpy/src/array.pyx"
{"array_l", (PyCFunction)__pyx_pw_13_librootnumpy_21array_l, METH_O, 0};

#line 18 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_21array_l(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 18 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 18 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 18 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_l (wrapper)", 0);
  __pyx_r = 
#line 18 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_20array_l(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 18 "root_numpy/src/array.pyx"


#line 18 "root_numpy/src/array.pyx"
  /* function exit code */

#line 18 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 18 "root_numpy/src/array.pyx"
}

#line 18 "root_numpy/src/array.pyx"


#line 18 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_20array_l(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayL *__pyx_v__arr
#line 18 "root_numpy/src/array.pyx"
;

#line 18 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 18 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_l", 0);

  /* "root_numpy/src/array.pyx":19
 * 
 * def array_l(root_arr):
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 */

#line 19 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 19 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayL *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":20
 * def array_l(root_arr):
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)             # <<<<<<<<<<<<<<
 * 
 * def array_i(root_arr):
 */

#line 20 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 20 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_LONG)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 20 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 20 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 20 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":18
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

#line 18 "root_numpy/src/array.pyx"


#line 18 "root_numpy/src/array.pyx"
  /* function exit code */

#line 18 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 18 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 18 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_l", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 18 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 18 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 18 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 18 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 18 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 18 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":22
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

#line 22 "root_numpy/src/array.pyx"


#line 22 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 22 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_23array_i(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_23array_i = 
#line 22 "root_numpy/src/array.pyx"
{"array_i", (PyCFunction)__pyx_pw_13_librootnumpy_23array_i, METH_O, 0};

#line 22 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_23array_i(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 22 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 22 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 22 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_i (wrapper)", 0);
  __pyx_r = 
#line 22 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_22array_i(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 22 "root_numpy/src/array.pyx"


#line 22 "root_numpy/src/array.pyx"
  /* function exit code */

#line 22 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 22 "root_numpy/src/array.pyx"
}

#line 22 "root_numpy/src/array.pyx"


#line 22 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_22array_i(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayI *__pyx_v__arr
#line 22 "root_numpy/src/array.pyx"
;

#line 22 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 22 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_i", 0);

  /* "root_numpy/src/array.pyx":23
 * 
 * def array_i(root_arr):
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 */

#line 23 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayI *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":24
 * def array_i(root_arr):
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)             # <<<<<<<<<<<<<<
 * 
 * def array_s(root_arr):
 */

#line 24 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 24 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_INT)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 24 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 24 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 24 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":22
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

#line 22 "root_numpy/src/array.pyx"


#line 22 "root_numpy/src/array.pyx"
  /* function exit code */

#line 22 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 22 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 22 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_i", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 22 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 22 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 22 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 22 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 22 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 22 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":26
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

#line 26 "root_numpy/src/array.pyx"


#line 26 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 26 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_25array_s(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_25array_s = 
#line 26 "root_numpy/src/array.pyx"
{"array_s", (PyCFunction)__pyx_pw_13_librootnumpy_25array_s, METH_O, 0};

#line 26 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_25array_s(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 26 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 26 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 26 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_s (wrapper)", 0);
  __pyx_r = 
#line 26 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_24array_s(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 26 "root_numpy/src/array.pyx"


#line 26 "root_numpy/src/array.pyx"
  /* function exit code */

#line 26 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 26 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 26 "root_numpy/src/array.pyx"
}

#line 26 "root_numpy/src/array.pyx"


#line 26 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_24array_s(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayS *__pyx_v__arr
#line 26 "root_numpy/src/array.pyx"
;

#line 26 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 26 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_s", 0);

  /* "root_numpy/src/array.pyx":27
 * 
 * def array_s(root_arr):
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 */

#line 27 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayS *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":28
 * def array_s(root_arr):
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)             # <<<<<<<<<<<<<<
 * 
 * def array_c(root_arr):
 */

#line 28 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 28 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_SHORT)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 28 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 28 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 28 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":26
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

#line 26 "root_numpy/src/array.pyx"


#line 26 "root_numpy/src/array.pyx"
  /* function exit code */

#line 26 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 26 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 26 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_s", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 26 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 26 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 26 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 26 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 26 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 26 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/array.pyx":30
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 30 "root_numpy/src/array.pyx"


#line 30 "root_numpy/src/array.pyx"
/* Python wrapper */

#line 30 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_27array_c(PyObject *__pyx_self, PyObject *__pyx_v_root_arr); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_27array_c = 
#line 30 "root_numpy/src/array.pyx"
{"array_c", (PyCFunction)__pyx_pw_13_librootnumpy_27array_c, METH_O, 0};

#line 30 "root_numpy/src/array.pyx"
static PyObject *__pyx_pw_13_librootnumpy_27array_c(PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {

#line 30 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = 0;

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannyDeclarations

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_c (wrapper)", 0);
  __pyx_r = 
#line 30 "root_numpy/src/array.pyx"
__pyx_pf_13_librootnumpy_26array_c(__pyx_self, ((PyObject *)__pyx_v_root_arr));

#line 30 "root_numpy/src/array.pyx"


#line 30 "root_numpy/src/array.pyx"
  /* function exit code */

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 30 "root_numpy/src/array.pyx"
}

#line 30 "root_numpy/src/array.pyx"


#line 30 "root_numpy/src/array.pyx"
static PyObject *__pyx_pf_13_librootnumpy_26array_c(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_arr) {
  TArrayC *__pyx_v__arr
#line 30 "root_numpy/src/array.pyx"
;

#line 30 "root_numpy/src/array.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannySetupContext("array_c", 0);

  /* "root_numpy/src/array.pyx":31
 * 
 * def array_c(root_arr):
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)             # <<<<<<<<<<<<<<
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 31 "root_numpy/src/array.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_arr); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/array.pyx"
  __pyx_v__arr = ((TArrayC *)__pyx_t_1);

  /* "root_numpy/src/array.pyx":32
 * def array_c(root_arr):
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)             # <<<<<<<<<<<<<<
 */

#line 32 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 32 "root_numpy/src/array.pyx"
  __pyx_t_2 = ((PyObject *)__pyx_f_13_librootnumpy_tonumpyarray(__pyx_v__arr->GetArray(), __pyx_v__arr->GetSize(), NPY_BYTE)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 32 "root_numpy/src/array.pyx"
  __pyx_r = __pyx_t_2;

#line 32 "root_numpy/src/array.pyx"
  __pyx_t_2 = 0;

#line 32 "root_numpy/src/array.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/array.pyx":30
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 30 "root_numpy/src/array.pyx"


#line 30 "root_numpy/src/array.pyx"
  /* function exit code */

#line 30 "root_numpy/src/array.pyx"
  __pyx_L1_error:;

#line 30 "root_numpy/src/array.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 30 "root_numpy/src/array.pyx"
  __Pyx_AddTraceback("_librootnumpy.array_c", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 30 "root_numpy/src/array.pyx"
  __pyx_r = NULL;

#line 30 "root_numpy/src/array.pyx"
  __pyx_L0:;

#line 30 "root_numpy/src/array.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 30 "root_numpy/src/array.pyx"
  __Pyx_RefNannyFinishContext();

#line 30 "root_numpy/src/array.pyx"
  return __pyx_r;

#line 30 "root_numpy/src/array.pyx"
}

/* "root_numpy/src/matrix.pyx":5
 * """
 * 
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

#line 5 "root_numpy/src/matrix.pyx"


#line 5 "root_numpy/src/matrix.pyx"
/* Python wrapper */

#line 5 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pw_13_librootnumpy_29matrix_d(PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_29matrix_d = 
#line 5 "root_numpy/src/matrix.pyx"
{"matrix_d", (PyCFunction)__pyx_pw_13_librootnumpy_29matrix_d, METH_O, 0};

#line 5 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pw_13_librootnumpy_29matrix_d(PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {

#line 5 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_r = 0;

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyDeclarations

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannySetupContext("matrix_d (wrapper)", 0);
  __pyx_r = 
#line 5 "root_numpy/src/matrix.pyx"
__pyx_pf_13_librootnumpy_28matrix_d(__pyx_self, ((PyObject *)__pyx_v_root_mat));

#line 5 "root_numpy/src/matrix.pyx"


#line 5 "root_numpy/src/matrix.pyx"
  /* function exit code */

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyFinishContext();

#line 5 "root_numpy/src/matrix.pyx"
  return __pyx_r;

#line 5 "root_numpy/src/matrix.pyx"
}

#line 5 "root_numpy/src/matrix.pyx"


#line 5 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pf_13_librootnumpy_28matrix_d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {
  TMatrixDBase *__pyx_v__mat
#line 5 "root_numpy/src/matrix.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 5 "root_numpy/src/matrix.pyx"
;
  int __pyx_v_i
#line 5 "root_numpy/src/matrix.pyx"
;
  int __pyx_v_j
#line 5 "root_numpy/src/matrix.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 5 "root_numpy/src/matrix.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 5 "root_numpy/src/matrix.pyx"
;

#line 5 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannySetupContext("matrix_d", 0);

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/matrix.pyx":6
 * 
 * def matrix_d(root_mat):
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 *     cdef int i
 */

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_mat); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/matrix.pyx"
  __pyx_v__mat = ((TMatrixDBase *)__pyx_t_1);

  /* "root_numpy/src/matrix.pyx":7
 * def matrix_d(root_mat):
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int j
 */

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNrows()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNcols()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 7 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 7 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 7 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 7 "root_numpy/src/matrix.pyx"
  {

#line 7 "root_numpy/src/matrix.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 7 "root_numpy/src/matrix.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 7 "root_numpy/src/matrix.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 7 "root_numpy/src/matrix.pyx"
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 7 "root_numpy/src/matrix.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 7 "root_numpy/src/matrix.pyx"
    }

#line 7 "root_numpy/src/matrix.pyx"
  }

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = 0;

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 7 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/matrix.pyx":10
 *     cdef int i
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 */

#line 10 "root_numpy/src/matrix.pyx"
  __pyx_t_8 = __pyx_v__mat->GetNrows();

#line 10 "root_numpy/src/matrix.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/matrix.pyx":11
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():             # <<<<<<<<<<<<<<
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)
 */

#line 11 "root_numpy/src/matrix.pyx"
    __pyx_t_9 = __pyx_v__mat->GetNcols();

#line 11 "root_numpy/src/matrix.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_9; __pyx_v_j++) {

      /* "root_numpy/src/matrix.pyx":12
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)             # <<<<<<<<<<<<<<
 *     return np.matrix(arr)
 * 
 */

#line 12 "root_numpy/src/matrix.pyx"
      __pyx_t_10 = __pyx_v_i;

#line 12 "root_numpy/src/matrix.pyx"
      __pyx_t_11 = __pyx_v_j;

#line 12 "root_numpy/src/matrix.pyx"
      __pyx_t_12 = -1;

#line 12 "root_numpy/src/matrix.pyx"
      if (__pyx_t_10 < 0) {

#line 12 "root_numpy/src/matrix.pyx"
        __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[0].shape;

#line 12 "root_numpy/src/matrix.pyx"
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_12 = 0;
      } else 
#line 12 "root_numpy/src/matrix.pyx"
if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_12 = 0;

#line 12 "root_numpy/src/matrix.pyx"
      if (__pyx_t_11 < 0) {

#line 12 "root_numpy/src/matrix.pyx"
        __pyx_t_11 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 12 "root_numpy/src/matrix.pyx"
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
      } else 
#line 12 "root_numpy/src/matrix.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_12 = 1;

#line 12 "root_numpy/src/matrix.pyx"
      if (unlikely(__pyx_t_12 != -1)) {

#line 12 "root_numpy/src/matrix.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_12);

#line 12 "root_numpy/src/matrix.pyx"
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/matrix.pyx"
      }

#line 12 "root_numpy/src/matrix.pyx"
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v__mat->operator()(__pyx_v_i, __pyx_v_j);

#line 12 "root_numpy/src/matrix.pyx"
    }

#line 12 "root_numpy/src/matrix.pyx"
  }

  /* "root_numpy/src/matrix.pyx":13
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)             # <<<<<<<<<<<<<<
 * 
 * def matrix_f(root_mat):
 */

#line 13 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 13 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 13 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_matrix); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 13 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 13 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = NULL;

#line 13 "root_numpy/src/matrix.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 13 "root_numpy/src/matrix.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 13 "root_numpy/src/matrix.pyx"
    if (likely(__pyx_t_5)) {

#line 13 "root_numpy/src/matrix.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 13 "root_numpy/src/matrix.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 13 "root_numpy/src/matrix.pyx"
      __Pyx_INCREF(function);

#line 13 "root_numpy/src/matrix.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 13 "root_numpy/src/matrix.pyx"
    }

#line 13 "root_numpy/src/matrix.pyx"
  }

#line 13 "root_numpy/src/matrix.pyx"
  if (!__pyx_t_5) {

#line 13 "root_numpy/src/matrix.pyx"
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_arr)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 13 "root_numpy/src/matrix.pyx"
  } else {

#line 13 "root_numpy/src/matrix.pyx"
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 13 "root_numpy/src/matrix.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 13 "root_numpy/src/matrix.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 13 "root_numpy/src/matrix.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, ((PyObject *)__pyx_v_arr));

#line 13 "root_numpy/src/matrix.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_arr));

#line 13 "root_numpy/src/matrix.pyx"
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 13 "root_numpy/src/matrix.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 13 "root_numpy/src/matrix.pyx"
  }

#line 13 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 13 "root_numpy/src/matrix.pyx"
  __pyx_r = __pyx_t_6;

#line 13 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = 0;

#line 13 "root_numpy/src/matrix.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/matrix.pyx":5
 * """
 * 
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

#line 5 "root_numpy/src/matrix.pyx"


#line 5 "root_numpy/src/matrix.pyx"
  /* function exit code */

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_L1_error:;

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 5 "root_numpy/src/matrix.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 5 "root_numpy/src/matrix.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 5 "root_numpy/src/matrix.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_AddTraceback("_librootnumpy.matrix_d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_r = NULL;

#line 5 "root_numpy/src/matrix.pyx"
  goto __pyx_L2;

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_L0:;

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_L2:;

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyFinishContext();

#line 5 "root_numpy/src/matrix.pyx"
  return __pyx_r;

#line 5 "root_numpy/src/matrix.pyx"
}

/* "root_numpy/src/matrix.pyx":15
 *     return np.matrix(arr)
 * 
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

#line 15 "root_numpy/src/matrix.pyx"


#line 15 "root_numpy/src/matrix.pyx"
/* Python wrapper */

#line 15 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pw_13_librootnumpy_31matrix_f(PyObject *__pyx_self, PyObject *__pyx_v_root_mat); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_31matrix_f = 
#line 15 "root_numpy/src/matrix.pyx"
{"matrix_f", (PyCFunction)__pyx_pw_13_librootnumpy_31matrix_f, METH_O, 0};

#line 15 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pw_13_librootnumpy_31matrix_f(PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {

#line 15 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_r = 0;

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyDeclarations

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannySetupContext("matrix_f (wrapper)", 0);
  __pyx_r = 
#line 15 "root_numpy/src/matrix.pyx"
__pyx_pf_13_librootnumpy_30matrix_f(__pyx_self, ((PyObject *)__pyx_v_root_mat));

#line 15 "root_numpy/src/matrix.pyx"


#line 15 "root_numpy/src/matrix.pyx"
  /* function exit code */

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "root_numpy/src/matrix.pyx"
  return __pyx_r;

#line 15 "root_numpy/src/matrix.pyx"
}

#line 15 "root_numpy/src/matrix.pyx"


#line 15 "root_numpy/src/matrix.pyx"
static PyObject *__pyx_pf_13_librootnumpy_30matrix_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_root_mat) {
  TMatrixFBase *__pyx_v__mat
#line 15 "root_numpy/src/matrix.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 15 "root_numpy/src/matrix.pyx"
;
  int __pyx_v_i
#line 15 "root_numpy/src/matrix.pyx"
;
  int __pyx_v_j
#line 15 "root_numpy/src/matrix.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 15 "root_numpy/src/matrix.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 15 "root_numpy/src/matrix.pyx"
;

#line 15 "root_numpy/src/matrix.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannySetupContext("matrix_f", 0);

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/matrix.pyx":16
 * 
 * def matrix_f(root_mat):
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 *     cdef int i
 */

#line 16 "root_numpy/src/matrix.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_root_mat); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/matrix.pyx"
  __pyx_v__mat = ((TMatrixFBase *)__pyx_t_1);

  /* "root_numpy/src/matrix.pyx":17
 * def matrix_f(root_mat):
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef int j
 */

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNrows()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v__mat->GetNcols()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 17 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 17 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 17 "root_numpy/src/matrix.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 17 "root_numpy/src/matrix.pyx"
  {

#line 17 "root_numpy/src/matrix.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 17 "root_numpy/src/matrix.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 17 "root_numpy/src/matrix.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 17 "root_numpy/src/matrix.pyx"
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 17 "root_numpy/src/matrix.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 17 "root_numpy/src/matrix.pyx"
    }

#line 17 "root_numpy/src/matrix.pyx"
  }

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = 0;

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 17 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/matrix.pyx":20
 *     cdef int i
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 */

#line 20 "root_numpy/src/matrix.pyx"
  __pyx_t_8 = __pyx_v__mat->GetNrows();

#line 20 "root_numpy/src/matrix.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/matrix.pyx":21
 *     cdef int j
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():             # <<<<<<<<<<<<<<
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)
 */

#line 21 "root_numpy/src/matrix.pyx"
    __pyx_t_9 = __pyx_v__mat->GetNcols();

#line 21 "root_numpy/src/matrix.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_9; __pyx_v_j++) {

      /* "root_numpy/src/matrix.pyx":22
 *     for i from 0 <= i < _mat.GetNrows():
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)             # <<<<<<<<<<<<<<
 *     return np.matrix(arr)
 */

#line 22 "root_numpy/src/matrix.pyx"
      __pyx_t_10 = __pyx_v_i;

#line 22 "root_numpy/src/matrix.pyx"
      __pyx_t_11 = __pyx_v_j;

#line 22 "root_numpy/src/matrix.pyx"
      __pyx_t_12 = -1;

#line 22 "root_numpy/src/matrix.pyx"
      if (__pyx_t_10 < 0) {

#line 22 "root_numpy/src/matrix.pyx"
        __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[0].shape;

#line 22 "root_numpy/src/matrix.pyx"
        if (unlikely(__pyx_t_10 < 0)) __pyx_t_12 = 0;
      } else 
#line 22 "root_numpy/src/matrix.pyx"
if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_12 = 0;

#line 22 "root_numpy/src/matrix.pyx"
      if (__pyx_t_11 < 0) {

#line 22 "root_numpy/src/matrix.pyx"
        __pyx_t_11 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 22 "root_numpy/src/matrix.pyx"
        if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 1;
      } else 
#line 22 "root_numpy/src/matrix.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_12 = 1;

#line 22 "root_numpy/src/matrix.pyx"
      if (unlikely(__pyx_t_12 != -1)) {

#line 22 "root_numpy/src/matrix.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_12);

#line 22 "root_numpy/src/matrix.pyx"
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/matrix.pyx"
      }

#line 22 "root_numpy/src/matrix.pyx"
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v__mat->operator()(__pyx_v_i, __pyx_v_j);

#line 22 "root_numpy/src/matrix.pyx"
    }

#line 22 "root_numpy/src/matrix.pyx"
  }

  /* "root_numpy/src/matrix.pyx":23
 *         for j from 0 <= j < _mat.GetNcols():
 *             arr[i, j] = _mat.get(i, j)
 *     return np.matrix(arr)             # <<<<<<<<<<<<<<
 */

#line 23 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 23 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 23 "root_numpy/src/matrix.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_matrix); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 23 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 23 "root_numpy/src/matrix.pyx"
  __pyx_t_5 = NULL;

#line 23 "root_numpy/src/matrix.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 23 "root_numpy/src/matrix.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 23 "root_numpy/src/matrix.pyx"
    if (likely(__pyx_t_5)) {

#line 23 "root_numpy/src/matrix.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 23 "root_numpy/src/matrix.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 23 "root_numpy/src/matrix.pyx"
      __Pyx_INCREF(function);

#line 23 "root_numpy/src/matrix.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 23 "root_numpy/src/matrix.pyx"
    }

#line 23 "root_numpy/src/matrix.pyx"
  }

#line 23 "root_numpy/src/matrix.pyx"
  if (!__pyx_t_5) {

#line 23 "root_numpy/src/matrix.pyx"
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_v_arr)); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 23 "root_numpy/src/matrix.pyx"
  } else {

#line 23 "root_numpy/src/matrix.pyx"
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 23 "root_numpy/src/matrix.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 23 "root_numpy/src/matrix.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 23 "root_numpy/src/matrix.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, ((PyObject *)__pyx_v_arr));

#line 23 "root_numpy/src/matrix.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_arr));

#line 23 "root_numpy/src/matrix.pyx"
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/matrix.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 23 "root_numpy/src/matrix.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 23 "root_numpy/src/matrix.pyx"
  }

#line 23 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 23 "root_numpy/src/matrix.pyx"
  __pyx_r = __pyx_t_6;

#line 23 "root_numpy/src/matrix.pyx"
  __pyx_t_6 = 0;

#line 23 "root_numpy/src/matrix.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/matrix.pyx":15
 *     return np.matrix(arr)
 * 
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

#line 15 "root_numpy/src/matrix.pyx"


#line 15 "root_numpy/src/matrix.pyx"
  /* function exit code */

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_L1_error:;

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 15 "root_numpy/src/matrix.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 15 "root_numpy/src/matrix.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 15 "root_numpy/src/matrix.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_AddTraceback("_librootnumpy.matrix_f", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_r = NULL;

#line 15 "root_numpy/src/matrix.pyx"
  goto __pyx_L2;

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_L0:;

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_L2:;

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_RefNannyFinishContext();

#line 15 "root_numpy/src/matrix.pyx"
  return __pyx_r;

#line 15 "root_numpy/src/matrix.pyx"
}

/* "root_numpy/src/sample.pyx":5
 * """
 * 
 * def sample_f1(f1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 */

#line 5 "root_numpy/src/sample.pyx"


#line 5 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 5 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_33sample_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_33sample_f1 = 
#line 5 "root_numpy/src/sample.pyx"
{"sample_f1", (PyCFunction)__pyx_pw_13_librootnumpy_33sample_f1, METH_VARARGS|METH_KEYWORDS, 0};

#line 5 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_33sample_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f1 = 0
#line 5 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_n_samples
#line 5 "root_numpy/src/sample.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 5 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f1 (wrapper)", 0);

#line 5 "root_numpy/src/sample.pyx"
  {

#line 5 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f1,&__pyx_n_s_n_samples,0};

#line 5 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 5 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 5 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 5 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 5 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 5 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 5 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 5 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 5 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 5 "root_numpy/src/sample.pyx"
      }

#line 5 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 5 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 5 "root_numpy/src/sample.pyx"
        case  0:

#line 5 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f1)) != 0)) kw_args--;
        else 
#line 5 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 5 "root_numpy/src/sample.pyx"
        case  1:

#line 5 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 5 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_f1", 1, 2, 2, 1); 
#line 5 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 5 "root_numpy/src/sample.pyx"
        }

#line 5 "root_numpy/src/sample.pyx"
      }

#line 5 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 5 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_f1") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 5 "root_numpy/src/sample.pyx"
      }

#line 5 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 5 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 5 "root_numpy/src/sample.pyx"
    } else {

#line 5 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 5 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 5 "root_numpy/src/sample.pyx"
    }

#line 5 "root_numpy/src/sample.pyx"
    __pyx_v_f1 = values[0];

#line 5 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 5 "root_numpy/src/sample.pyx"
  }

#line 5 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 5 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_f1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 5 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 5 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 5 "root_numpy/src/sample.pyx"
  return NULL;

#line 5 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 5 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_32sample_f1(__pyx_self, __pyx_v_f1, __pyx_v_n_samples);

#line 5 "root_numpy/src/sample.pyx"


#line 5 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 5 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 5 "root_numpy/src/sample.pyx"
}

#line 5 "root_numpy/src/sample.pyx"


#line 5 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_32sample_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f1, unsigned int __pyx_v_n_samples) {
  TF1 *__pyx_v_f1_
#line 5 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_i
#line 5 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 5 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 5 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 5 "root_numpy/src/sample.pyx"
;

#line 5 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f1", 0);

#line 5 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 5 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 5 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 5 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":6
 * 
 * def sample_f1(f1, unsigned int n_samples):
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 */

#line 6 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_f1); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/sample.pyx"
  __pyx_v_f1_ = ((TF1 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":8
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         arr[i] = f1_.GetRandom()
 */

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 8 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 8 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 8 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 8 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 8 "root_numpy/src/sample.pyx"
  {

#line 8 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 8 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 8 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 8 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 8 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0];

#line 8 "root_numpy/src/sample.pyx"
    }

#line 8 "root_numpy/src/sample.pyx"
  }

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 8 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 8 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":9
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         arr[i] = f1_.GetRandom()
 *     return arr
 */

#line 9 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 9 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":10
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         arr[i] = f1_.GetRandom()             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 10 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 10 "root_numpy/src/sample.pyx"
    __pyx_t_10 = -1;

#line 10 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_10 = 0;

#line 10 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 10 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 10 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/sample.pyx"
    }

#line 10 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides) = __pyx_v_f1_->GetRandom();

#line 10 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":11
 *     for i from 0 <= i < n_samples:
 *         arr[i] = f1_.GetRandom()
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 11 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 11 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 11 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 11 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":5
 * """
 * 
 * def sample_f1(f1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 */

#line 5 "root_numpy/src/sample.pyx"


#line 5 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 5 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 5 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 5 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 5 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 5 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 5 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 5 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 5 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 5 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 5 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":14
 * 
 * 
 * def sample_h1(h1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 */

#line 14 "root_numpy/src/sample.pyx"


#line 14 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 14 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_35sample_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_35sample_h1 = 
#line 14 "root_numpy/src/sample.pyx"
{"sample_h1", (PyCFunction)__pyx_pw_13_librootnumpy_35sample_h1, METH_VARARGS|METH_KEYWORDS, 0};

#line 14 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_35sample_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h1 = 0
#line 14 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_n_samples
#line 14 "root_numpy/src/sample.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 14 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h1 (wrapper)", 0);

#line 14 "root_numpy/src/sample.pyx"
  {

#line 14 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h1,&__pyx_n_s_n_samples,0};

#line 14 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 14 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 14 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 14 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 14 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 14 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 14 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 14 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 14 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 14 "root_numpy/src/sample.pyx"
      }

#line 14 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 14 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 14 "root_numpy/src/sample.pyx"
        case  0:

#line 14 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h1)) != 0)) kw_args--;
        else 
#line 14 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 14 "root_numpy/src/sample.pyx"
        case  1:

#line 14 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 14 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_h1", 1, 2, 2, 1); 
#line 14 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 14 "root_numpy/src/sample.pyx"
        }

#line 14 "root_numpy/src/sample.pyx"
      }

#line 14 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 14 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_h1") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 14 "root_numpy/src/sample.pyx"
      }

#line 14 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 14 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 14 "root_numpy/src/sample.pyx"
    } else {

#line 14 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 14 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 14 "root_numpy/src/sample.pyx"
    }

#line 14 "root_numpy/src/sample.pyx"
    __pyx_v_h1 = values[0];

#line 14 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 14 "root_numpy/src/sample.pyx"
  }

#line 14 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 14 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_h1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 14 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 14 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "root_numpy/src/sample.pyx"
  return NULL;

#line 14 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 14 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_34sample_h1(__pyx_self, __pyx_v_h1, __pyx_v_n_samples);

#line 14 "root_numpy/src/sample.pyx"


#line 14 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 14 "root_numpy/src/sample.pyx"
}

#line 14 "root_numpy/src/sample.pyx"


#line 14 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_34sample_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h1, unsigned int __pyx_v_n_samples) {
  TH1 *__pyx_v_h1_
#line 14 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_i
#line 14 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 14 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 14 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 14 "root_numpy/src/sample.pyx"
;

#line 14 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h1", 0);

#line 14 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 14 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 14 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 14 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":15
 * 
 * def sample_h1(h1, unsigned int n_samples):
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 */

#line 15 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_h1); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/sample.pyx"
  __pyx_v_h1_ = ((TH1 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":17
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         arr[i] = h1_.GetRandom()
 */

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 17 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 17 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 17 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 17 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 17 "root_numpy/src/sample.pyx"
  {

#line 17 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 17 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 17 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 17 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 17 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0];

#line 17 "root_numpy/src/sample.pyx"
    }

#line 17 "root_numpy/src/sample.pyx"
  }

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 17 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 17 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":18
 *     cdef unsigned int i
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         arr[i] = h1_.GetRandom()
 *     return arr
 */

#line 18 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 18 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":19
 *     cdef np.ndarray[np.double_t, ndim=1] arr = np.empty(n_samples, dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         arr[i] = h1_.GetRandom()             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 19 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 19 "root_numpy/src/sample.pyx"
    __pyx_t_10 = -1;

#line 19 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_10 = 0;

#line 19 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 19 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 19 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 19 "root_numpy/src/sample.pyx"
    }

#line 19 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides) = __pyx_v_h1_->GetRandom();

#line 19 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":20
 *     for i from 0 <= i < n_samples:
 *         arr[i] = h1_.GetRandom()
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 20 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 20 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 20 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":14
 * 
 * 
 * def sample_h1(h1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 */

#line 14 "root_numpy/src/sample.pyx"


#line 14 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 14 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 14 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 14 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 14 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 14 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 14 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 14 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 14 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 14 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 14 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":23
 * 
 * 
 * def sample_f2(f2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 */

#line 23 "root_numpy/src/sample.pyx"


#line 23 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 23 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_37sample_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_37sample_f2 = 
#line 23 "root_numpy/src/sample.pyx"
{"sample_f2", (PyCFunction)__pyx_pw_13_librootnumpy_37sample_f2, METH_VARARGS|METH_KEYWORDS, 0};

#line 23 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_37sample_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f2 = 0
#line 23 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_n_samples
#line 23 "root_numpy/src/sample.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 23 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f2 (wrapper)", 0);

#line 23 "root_numpy/src/sample.pyx"
  {

#line 23 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f2,&__pyx_n_s_n_samples,0};

#line 23 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 23 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 23 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 23 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 23 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 23 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 23 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 23 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 23 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 23 "root_numpy/src/sample.pyx"
      }

#line 23 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 23 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 23 "root_numpy/src/sample.pyx"
        case  0:

#line 23 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f2)) != 0)) kw_args--;
        else 
#line 23 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 23 "root_numpy/src/sample.pyx"
        case  1:

#line 23 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 23 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_f2", 1, 2, 2, 1); 
#line 23 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 23 "root_numpy/src/sample.pyx"
        }

#line 23 "root_numpy/src/sample.pyx"
      }

#line 23 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 23 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_f2") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 23 "root_numpy/src/sample.pyx"
      }

#line 23 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 23 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 23 "root_numpy/src/sample.pyx"
    } else {

#line 23 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 23 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 23 "root_numpy/src/sample.pyx"
    }

#line 23 "root_numpy/src/sample.pyx"
    __pyx_v_f2 = values[0];

#line 23 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 23 "root_numpy/src/sample.pyx"
  }

#line 23 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 23 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_f2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 23 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 23 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "root_numpy/src/sample.pyx"
  return NULL;

#line 23 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 23 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_36sample_f2(__pyx_self, __pyx_v_f2, __pyx_v_n_samples);

#line 23 "root_numpy/src/sample.pyx"


#line 23 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 23 "root_numpy/src/sample.pyx"
}

#line 23 "root_numpy/src/sample.pyx"


#line 23 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_36sample_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f2, unsigned int __pyx_v_n_samples) {
  TF2 *__pyx_v_f2_
#line 23 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_i
#line 23 "root_numpy/src/sample.pyx"
;
  double __pyx_v_x
#line 23 "root_numpy/src/sample.pyx"
;
  double __pyx_v_y
#line 23 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 23 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 23 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 23 "root_numpy/src/sample.pyx"
;

#line 23 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  unsigned int __pyx_t_12;
  long __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f2", 0);

#line 23 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 23 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 23 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 23 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":24
 * 
 * def sample_f2(f2, unsigned int n_samples):
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef double x = 0
 */

#line 24 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_f2); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/src/sample.pyx"
  __pyx_v_f2_ = ((TF2 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":26
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 */

#line 26 "root_numpy/src/sample.pyx"
  __pyx_v_x = 0.0;

  /* "root_numpy/src/sample.pyx":27
 *     cdef unsigned int i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */

#line 27 "root_numpy/src/sample.pyx"
  __pyx_v_y = 0.0;

  /* "root_numpy/src/sample.pyx":28
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         f2_.GetRandom2(x, y)
 */

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 28 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(__pyx_int_2);

#line 28 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_int_2);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 28 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_4 = 0;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 28 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 28 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 28 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 28 "root_numpy/src/sample.pyx"
  {

#line 28 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 28 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 28 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 28 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 28 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 28 "root_numpy/src/sample.pyx"
    }

#line 28 "root_numpy/src/sample.pyx"
  }

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 28 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 28 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":29
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         f2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 */

#line 29 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 29 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":30
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         f2_.GetRandom2(x, y)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */

#line 30 "root_numpy/src/sample.pyx"
    __pyx_v_f2_->GetRandom2(__pyx_v_x, __pyx_v_y);

    /* "root_numpy/src/sample.pyx":31
 *     for i from 0 <= i < n_samples:
 *         f2_.GetRandom2(x, y)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *     return arr
 */

#line 31 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 31 "root_numpy/src/sample.pyx"
    __pyx_t_10 = 0;

#line 31 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 31 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 31 "root_numpy/src/sample.pyx"
    if (__pyx_t_10 < 0) {

#line 31 "root_numpy/src/sample.pyx"
      __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 31 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else 
#line 31 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 31 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 31 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 31 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/sample.pyx"
    }

#line 31 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "root_numpy/src/sample.pyx":32
 *         f2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 32 "root_numpy/src/sample.pyx"
    __pyx_t_12 = __pyx_v_i;

#line 32 "root_numpy/src/sample.pyx"
    __pyx_t_13 = 1;

#line 32 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 32 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 32 "root_numpy/src/sample.pyx"
    if (__pyx_t_13 < 0) {

#line 32 "root_numpy/src/sample.pyx"
      __pyx_t_13 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 32 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
    } else 
#line 32 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 32 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 32 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 32 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/sample.pyx"
    }

#line 32 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

#line 32 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":33
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 33 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 33 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 33 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":23
 * 
 * 
 * def sample_f2(f2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 */

#line 23 "root_numpy/src/sample.pyx"


#line 23 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 23 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 23 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 23 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 23 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 23 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 23 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 23 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 23 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 23 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":36
 * 
 * 
 * def sample_h2(h2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 */

#line 36 "root_numpy/src/sample.pyx"


#line 36 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 36 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_39sample_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_39sample_h2 = 
#line 36 "root_numpy/src/sample.pyx"
{"sample_h2", (PyCFunction)__pyx_pw_13_librootnumpy_39sample_h2, METH_VARARGS|METH_KEYWORDS, 0};

#line 36 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_39sample_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h2 = 0
#line 36 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_n_samples
#line 36 "root_numpy/src/sample.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 36 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h2 (wrapper)", 0);

#line 36 "root_numpy/src/sample.pyx"
  {

#line 36 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h2,&__pyx_n_s_n_samples,0};

#line 36 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 36 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 36 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 36 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 36 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 36 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 36 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 36 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 36 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 36 "root_numpy/src/sample.pyx"
      }

#line 36 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 36 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 36 "root_numpy/src/sample.pyx"
        case  0:

#line 36 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h2)) != 0)) kw_args--;
        else 
#line 36 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 36 "root_numpy/src/sample.pyx"
        case  1:

#line 36 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 36 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_h2", 1, 2, 2, 1); 
#line 36 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 36 "root_numpy/src/sample.pyx"
        }

#line 36 "root_numpy/src/sample.pyx"
      }

#line 36 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 36 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_h2") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 36 "root_numpy/src/sample.pyx"
      }

#line 36 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 36 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 36 "root_numpy/src/sample.pyx"
    } else {

#line 36 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 36 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 36 "root_numpy/src/sample.pyx"
    }

#line 36 "root_numpy/src/sample.pyx"
    __pyx_v_h2 = values[0];

#line 36 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 36 "root_numpy/src/sample.pyx"
  }

#line 36 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 36 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_h2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 36 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 36 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "root_numpy/src/sample.pyx"
  return NULL;

#line 36 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 36 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_38sample_h2(__pyx_self, __pyx_v_h2, __pyx_v_n_samples);

#line 36 "root_numpy/src/sample.pyx"


#line 36 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 36 "root_numpy/src/sample.pyx"
}

#line 36 "root_numpy/src/sample.pyx"


#line 36 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_38sample_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h2, unsigned int __pyx_v_n_samples) {
  TH2 *__pyx_v_h2_
#line 36 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_i
#line 36 "root_numpy/src/sample.pyx"
;
  double __pyx_v_x
#line 36 "root_numpy/src/sample.pyx"
;
  double __pyx_v_y
#line 36 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 36 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 36 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 36 "root_numpy/src/sample.pyx"
;

#line 36 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  unsigned int __pyx_t_12;
  long __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h2", 0);

#line 36 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 36 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 36 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 36 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":37
 * 
 * def sample_h2(h2, unsigned int n_samples):
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef double x = 0
 */

#line 37 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_h2); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/sample.pyx"
  __pyx_v_h2_ = ((TH2 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":39
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 */

#line 39 "root_numpy/src/sample.pyx"
  __pyx_v_x = 0.0;

  /* "root_numpy/src/sample.pyx":40
 *     cdef unsigned int i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */

#line 40 "root_numpy/src/sample.pyx"
  __pyx_v_y = 0.0;

  /* "root_numpy/src/sample.pyx":41
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         h2_.GetRandom2(x, y)
 */

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 41 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(__pyx_int_2);

#line 41 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_2);

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_int_2);

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 41 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_4 = 0;

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 41 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 41 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 41 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 41 "root_numpy/src/sample.pyx"
  {

#line 41 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 41 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 41 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 41 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 41 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 41 "root_numpy/src/sample.pyx"
    }

#line 41 "root_numpy/src/sample.pyx"
  }

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 41 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 41 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":42
 *     cdef double y = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         h2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 */

#line 42 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 42 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":43
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 2), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         h2_.GetRandom2(x, y)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */

#line 43 "root_numpy/src/sample.pyx"
    __pyx_v_h2_->GetRandom2(__pyx_v_x, __pyx_v_y);

    /* "root_numpy/src/sample.pyx":44
 *     for i from 0 <= i < n_samples:
 *         h2_.GetRandom2(x, y)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *     return arr
 */

#line 44 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 44 "root_numpy/src/sample.pyx"
    __pyx_t_10 = 0;

#line 44 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 44 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 44 "root_numpy/src/sample.pyx"
    if (__pyx_t_10 < 0) {

#line 44 "root_numpy/src/sample.pyx"
      __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 44 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else 
#line 44 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 44 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 44 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 44 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "root_numpy/src/sample.pyx"
    }

#line 44 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "root_numpy/src/sample.pyx":45
 *         h2_.GetRandom2(x, y)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 45 "root_numpy/src/sample.pyx"
    __pyx_t_12 = __pyx_v_i;

#line 45 "root_numpy/src/sample.pyx"
    __pyx_t_13 = 1;

#line 45 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 45 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 45 "root_numpy/src/sample.pyx"
    if (__pyx_t_13 < 0) {

#line 45 "root_numpy/src/sample.pyx"
      __pyx_t_13 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 45 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
    } else 
#line 45 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 45 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 45 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 45 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/sample.pyx"
    }

#line 45 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

#line 45 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":46
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 46 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 46 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 46 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 46 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":36
 * 
 * 
 * def sample_h2(h2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 */

#line 36 "root_numpy/src/sample.pyx"


#line 36 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 36 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 36 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 36 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 36 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 36 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 36 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 36 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 36 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 36 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":49
 * 
 * 
 * def sample_f3(f3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 */

#line 49 "root_numpy/src/sample.pyx"


#line 49 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 49 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_41sample_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_41sample_f3 = 
#line 49 "root_numpy/src/sample.pyx"
{"sample_f3", (PyCFunction)__pyx_pw_13_librootnumpy_41sample_f3, METH_VARARGS|METH_KEYWORDS, 0};

#line 49 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_41sample_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_f3 = 0
#line 49 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_n_samples
#line 49 "root_numpy/src/sample.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 49 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f3 (wrapper)", 0);

#line 49 "root_numpy/src/sample.pyx"
  {

#line 49 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_f3,&__pyx_n_s_n_samples,0};

#line 49 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 49 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 49 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 49 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 49 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 49 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 49 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 49 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 49 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 49 "root_numpy/src/sample.pyx"
      }

#line 49 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 49 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 49 "root_numpy/src/sample.pyx"
        case  0:

#line 49 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f3)) != 0)) kw_args--;
        else 
#line 49 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 49 "root_numpy/src/sample.pyx"
        case  1:

#line 49 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 49 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_f3", 1, 2, 2, 1); 
#line 49 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 49 "root_numpy/src/sample.pyx"
        }

#line 49 "root_numpy/src/sample.pyx"
      }

#line 49 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 49 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_f3") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 49 "root_numpy/src/sample.pyx"
      }

#line 49 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 49 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 49 "root_numpy/src/sample.pyx"
    } else {

#line 49 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 49 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 49 "root_numpy/src/sample.pyx"
    }

#line 49 "root_numpy/src/sample.pyx"
    __pyx_v_f3 = values[0];

#line 49 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 49 "root_numpy/src/sample.pyx"
  }

#line 49 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 49 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_f3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 49 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 49 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 49 "root_numpy/src/sample.pyx"
  return NULL;

#line 49 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 49 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_40sample_f3(__pyx_self, __pyx_v_f3, __pyx_v_n_samples);

#line 49 "root_numpy/src/sample.pyx"


#line 49 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 49 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 49 "root_numpy/src/sample.pyx"
}

#line 49 "root_numpy/src/sample.pyx"


#line 49 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_40sample_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_f3, unsigned int __pyx_v_n_samples) {
  TF3 *__pyx_v_f3_
#line 49 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_i
#line 49 "root_numpy/src/sample.pyx"
;
  double __pyx_v_x
#line 49 "root_numpy/src/sample.pyx"
;
  double __pyx_v_y
#line 49 "root_numpy/src/sample.pyx"
;
  double __pyx_v_z
#line 49 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 49 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 49 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 49 "root_numpy/src/sample.pyx"
;

#line 49 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  unsigned int __pyx_t_12;
  long __pyx_t_13;
  unsigned int __pyx_t_14;
  long __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_f3", 0);

#line 49 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 49 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 49 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 49 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":50
 * 
 * def sample_f3(f3, unsigned int n_samples):
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef double x = 0
 */

#line 50 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_f3); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/sample.pyx"
  __pyx_v_f3_ = ((TF3 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":52
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef double z = 0
 */

#line 52 "root_numpy/src/sample.pyx"
  __pyx_v_x = 0.0;

  /* "root_numpy/src/sample.pyx":53
 *     cdef unsigned int i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 */

#line 53 "root_numpy/src/sample.pyx"
  __pyx_v_y = 0.0;

  /* "root_numpy/src/sample.pyx":54
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef double z = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */

#line 54 "root_numpy/src/sample.pyx"
  __pyx_v_z = 0.0;

  /* "root_numpy/src/sample.pyx":55
 *     cdef double y = 0
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         f3_.GetRandom3(x, y, z)
 */

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 55 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(__pyx_int_3);

#line 55 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_int_3);

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 55 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_4 = 0;

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 55 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 55 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 55 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 55 "root_numpy/src/sample.pyx"
  {

#line 55 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 55 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 55 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 55 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 55 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 55 "root_numpy/src/sample.pyx"
    }

#line 55 "root_numpy/src/sample.pyx"
  }

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 55 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 55 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":56
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         f3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 */

#line 56 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 56 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":57
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         f3_.GetRandom3(x, y, z)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */

#line 57 "root_numpy/src/sample.pyx"
    __pyx_v_f3_->GetRandom3(__pyx_v_x, __pyx_v_y, __pyx_v_z);

    /* "root_numpy/src/sample.pyx":58
 *     for i from 0 <= i < n_samples:
 *         f3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 */

#line 58 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 58 "root_numpy/src/sample.pyx"
    __pyx_t_10 = 0;

#line 58 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 58 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 58 "root_numpy/src/sample.pyx"
    if (__pyx_t_10 < 0) {

#line 58 "root_numpy/src/sample.pyx"
      __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 58 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else 
#line 58 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 58 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 58 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 58 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/sample.pyx"
    }

#line 58 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "root_numpy/src/sample.pyx":59
 *         f3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *         arr[i, 2] = z
 *     return arr
 */

#line 59 "root_numpy/src/sample.pyx"
    __pyx_t_12 = __pyx_v_i;

#line 59 "root_numpy/src/sample.pyx"
    __pyx_t_13 = 1;

#line 59 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 59 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 59 "root_numpy/src/sample.pyx"
    if (__pyx_t_13 < 0) {

#line 59 "root_numpy/src/sample.pyx"
      __pyx_t_13 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 59 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
    } else 
#line 59 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 59 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 59 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 59 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 59 "root_numpy/src/sample.pyx"
    }

#line 59 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

    /* "root_numpy/src/sample.pyx":60
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *         arr[i, 2] = z             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 60 "root_numpy/src/sample.pyx"
    __pyx_t_14 = __pyx_v_i;

#line 60 "root_numpy/src/sample.pyx"
    __pyx_t_15 = 2;

#line 60 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 60 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_14 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 60 "root_numpy/src/sample.pyx"
    if (__pyx_t_15 < 0) {

#line 60 "root_numpy/src/sample.pyx"
      __pyx_t_15 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 60 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 1;
    } else 
#line 60 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 60 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 60 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 60 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/sample.pyx"
    }

#line 60 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_z;

#line 60 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":61
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 *     return arr             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 61 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 61 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 61 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 61 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":49
 * 
 * 
 * def sample_f3(f3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 */

#line 49 "root_numpy/src/sample.pyx"


#line 49 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 49 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 49 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 49 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 49 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 49 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 49 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 49 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 49 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 49 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 49 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/sample.pyx":64
 * 
 * 
 * def sample_h3(h3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 */

#line 64 "root_numpy/src/sample.pyx"


#line 64 "root_numpy/src/sample.pyx"
/* Python wrapper */

#line 64 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_43sample_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_43sample_h3 = 
#line 64 "root_numpy/src/sample.pyx"
{"sample_h3", (PyCFunction)__pyx_pw_13_librootnumpy_43sample_h3, METH_VARARGS|METH_KEYWORDS, 0};

#line 64 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pw_13_librootnumpy_43sample_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_h3 = 0
#line 64 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_n_samples
#line 64 "root_numpy/src/sample.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 64 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = 0;

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyDeclarations

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h3 (wrapper)", 0);

#line 64 "root_numpy/src/sample.pyx"
  {

#line 64 "root_numpy/src/sample.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_h3,&__pyx_n_s_n_samples,0};

#line 64 "root_numpy/src/sample.pyx"
    PyObject* values[2] = {0,0};

#line 64 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_kwds)) {

#line 64 "root_numpy/src/sample.pyx"
      Py_ssize_t kw_args;

#line 64 "root_numpy/src/sample.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 64 "root_numpy/src/sample.pyx"
      switch (pos_args) {
        case  2: 
#line 64 "root_numpy/src/sample.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 64 "root_numpy/src/sample.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 64 "root_numpy/src/sample.pyx"
        case  0: break;
        default: 
#line 64 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 64 "root_numpy/src/sample.pyx"
      }

#line 64 "root_numpy/src/sample.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 64 "root_numpy/src/sample.pyx"
      switch (pos_args) {

#line 64 "root_numpy/src/sample.pyx"
        case  0:

#line 64 "root_numpy/src/sample.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_h3)) != 0)) kw_args--;
        else 
#line 64 "root_numpy/src/sample.pyx"
goto __pyx_L5_argtuple_error;

#line 64 "root_numpy/src/sample.pyx"
        case  1:

#line 64 "root_numpy/src/sample.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_samples)) != 0)) kw_args--;

#line 64 "root_numpy/src/sample.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("sample_h3", 1, 2, 2, 1); 
#line 64 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 64 "root_numpy/src/sample.pyx"
        }

#line 64 "root_numpy/src/sample.pyx"
      }

#line 64 "root_numpy/src/sample.pyx"
      if (unlikely(kw_args > 0)) {

#line 64 "root_numpy/src/sample.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "sample_h3") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 64 "root_numpy/src/sample.pyx"
      }

#line 64 "root_numpy/src/sample.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 64 "root_numpy/src/sample.pyx"
      goto __pyx_L5_argtuple_error;

#line 64 "root_numpy/src/sample.pyx"
    } else {

#line 64 "root_numpy/src/sample.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 64 "root_numpy/src/sample.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 64 "root_numpy/src/sample.pyx"
    }

#line 64 "root_numpy/src/sample.pyx"
    __pyx_v_h3 = values[0];

#line 64 "root_numpy/src/sample.pyx"
    __pyx_v_n_samples = __Pyx_PyInt_As_unsigned_int(values[1]); if (unlikely((__pyx_v_n_samples == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 64 "root_numpy/src/sample.pyx"
  }

#line 64 "root_numpy/src/sample.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sample_h3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 64 "root_numpy/src/sample.pyx"
{__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 64 "root_numpy/src/sample.pyx"
  __pyx_L3_error:;

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 64 "root_numpy/src/sample.pyx"
  return NULL;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 64 "root_numpy/src/sample.pyx"
__pyx_pf_13_librootnumpy_42sample_h3(__pyx_self, __pyx_v_h3, __pyx_v_n_samples);

#line 64 "root_numpy/src/sample.pyx"


#line 64 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 64 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 64 "root_numpy/src/sample.pyx"
}

#line 64 "root_numpy/src/sample.pyx"


#line 64 "root_numpy/src/sample.pyx"
static PyObject *__pyx_pf_13_librootnumpy_42sample_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_h3, unsigned int __pyx_v_n_samples) {
  TH3 *__pyx_v_h3_
#line 64 "root_numpy/src/sample.pyx"
;
  unsigned int __pyx_v_i
#line 64 "root_numpy/src/sample.pyx"
;
  double __pyx_v_x
#line 64 "root_numpy/src/sample.pyx"
;
  double __pyx_v_y
#line 64 "root_numpy/src/sample.pyx"
;
  double __pyx_v_z
#line 64 "root_numpy/src/sample.pyx"
;
  PyArrayObject *__pyx_v_arr = 0
#line 64 "root_numpy/src/sample.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_arr
#line 64 "root_numpy/src/sample.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_arr
#line 64 "root_numpy/src/sample.pyx"
;

#line 64 "root_numpy/src/sample.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  long __pyx_t_10;
  int __pyx_t_11;
  unsigned int __pyx_t_12;
  long __pyx_t_13;
  unsigned int __pyx_t_14;
  long __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_RefNannySetupContext("sample_h3", 0);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.pybuffer.buf = NULL;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_pybuffer_arr.refcount = 0;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.data = NULL;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_pybuffernd_arr.rcbuffer = &__pyx_pybuffer_arr;

  /* "root_numpy/src/sample.pyx":65
 * 
 * def sample_h3(h3, unsigned int n_samples):
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)             # <<<<<<<<<<<<<<
 *     cdef unsigned int i
 *     cdef double x = 0
 */

#line 65 "root_numpy/src/sample.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_h3); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "root_numpy/src/sample.pyx"
  __pyx_v_h3_ = ((TH3 *)__pyx_t_1);

  /* "root_numpy/src/sample.pyx":67
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 *     cdef double x = 0             # <<<<<<<<<<<<<<
 *     cdef double y = 0
 *     cdef double z = 0
 */

#line 67 "root_numpy/src/sample.pyx"
  __pyx_v_x = 0.0;

  /* "root_numpy/src/sample.pyx":68
 *     cdef unsigned int i
 *     cdef double x = 0
 *     cdef double y = 0             # <<<<<<<<<<<<<<
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 */

#line 68 "root_numpy/src/sample.pyx"
  __pyx_v_y = 0.0;

  /* "root_numpy/src/sample.pyx":69
 *     cdef double x = 0
 *     cdef double y = 0
 *     cdef double z = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 */

#line 69 "root_numpy/src/sample.pyx"
  __pyx_v_z = 0.0;

  /* "root_numpy/src/sample.pyx":70
 *     cdef double y = 0
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < n_samples:
 *         h3_.GetRandom3(x, y, z)
 */

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_samples); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 70 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(__pyx_int_3);

#line 70 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_3);

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_int_3);

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_2 = 0;

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 70 "root_numpy/src/sample.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4);

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_4 = 0;

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_4 = PyDict_New(); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 70 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 70 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 70 "root_numpy/src/sample.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 70 "root_numpy/src/sample.pyx"
  {

#line 70 "root_numpy/src/sample.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 70 "root_numpy/src/sample.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_arr.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {

#line 70 "root_numpy/src/sample.pyx"
      __pyx_v_arr = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf = NULL;

#line 70 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 70 "root_numpy/src/sample.pyx"
__pyx_pybuffernd_arr.diminfo[0].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_arr.diminfo[0].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_arr.diminfo[1].strides = __pyx_pybuffernd_arr.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_arr.diminfo[1].shape = __pyx_pybuffernd_arr.rcbuffer->pybuffer.shape[1];

#line 70 "root_numpy/src/sample.pyx"
    }

#line 70 "root_numpy/src/sample.pyx"
  }

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_7 = 0;

#line 70 "root_numpy/src/sample.pyx"
  __pyx_v_arr = ((PyArrayObject *)__pyx_t_6);

#line 70 "root_numpy/src/sample.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/sample.pyx":71
 *     cdef double z = 0
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:             # <<<<<<<<<<<<<<
 *         h3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 */

#line 71 "root_numpy/src/sample.pyx"
  __pyx_t_8 = __pyx_v_n_samples;

#line 71 "root_numpy/src/sample.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/sample.pyx":72
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((n_samples, 3), dtype=np.double)
 *     for i from 0 <= i < n_samples:
 *         h3_.GetRandom3(x, y, z)             # <<<<<<<<<<<<<<
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 */

#line 72 "root_numpy/src/sample.pyx"
    __pyx_v_h3_->GetRandom3(__pyx_v_x, __pyx_v_y, __pyx_v_z);

    /* "root_numpy/src/sample.pyx":73
 *     for i from 0 <= i < n_samples:
 *         h3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x             # <<<<<<<<<<<<<<
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 */

#line 73 "root_numpy/src/sample.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 73 "root_numpy/src/sample.pyx"
    __pyx_t_10 = 0;

#line 73 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 73 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_9 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 73 "root_numpy/src/sample.pyx"
    if (__pyx_t_10 < 0) {

#line 73 "root_numpy/src/sample.pyx"
      __pyx_t_10 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 73 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_10 < 0)) __pyx_t_11 = 1;
    } else 
#line 73 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_10 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 73 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 73 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 73 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 73 "root_numpy/src/sample.pyx"
    }

#line 73 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_x;

    /* "root_numpy/src/sample.pyx":74
 *         h3_.GetRandom3(x, y, z)
 *         arr[i, 0] = x
 *         arr[i, 1] = y             # <<<<<<<<<<<<<<
 *         arr[i, 2] = z
 *     return arr
 */

#line 74 "root_numpy/src/sample.pyx"
    __pyx_t_12 = __pyx_v_i;

#line 74 "root_numpy/src/sample.pyx"
    __pyx_t_13 = 1;

#line 74 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 74 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_12 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 74 "root_numpy/src/sample.pyx"
    if (__pyx_t_13 < 0) {

#line 74 "root_numpy/src/sample.pyx"
      __pyx_t_13 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 74 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_11 = 1;
    } else 
#line 74 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 74 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 74 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 74 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 74 "root_numpy/src/sample.pyx"
    }

#line 74 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_13, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_y;

    /* "root_numpy/src/sample.pyx":75
 *         arr[i, 0] = x
 *         arr[i, 1] = y
 *         arr[i, 2] = z             # <<<<<<<<<<<<<<
 *     return arr
 * 
 */

#line 75 "root_numpy/src/sample.pyx"
    __pyx_t_14 = __pyx_v_i;

#line 75 "root_numpy/src/sample.pyx"
    __pyx_t_15 = 2;

#line 75 "root_numpy/src/sample.pyx"
    __pyx_t_11 = -1;

#line 75 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_14 >= (size_t)__pyx_pybuffernd_arr.diminfo[0].shape)) __pyx_t_11 = 0;

#line 75 "root_numpy/src/sample.pyx"
    if (__pyx_t_15 < 0) {

#line 75 "root_numpy/src/sample.pyx"
      __pyx_t_15 += __pyx_pybuffernd_arr.diminfo[1].shape;

#line 75 "root_numpy/src/sample.pyx"
      if (unlikely(__pyx_t_15 < 0)) __pyx_t_11 = 1;
    } else 
#line 75 "root_numpy/src/sample.pyx"
if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_arr.diminfo[1].shape)) __pyx_t_11 = 1;

#line 75 "root_numpy/src/sample.pyx"
    if (unlikely(__pyx_t_11 != -1)) {

#line 75 "root_numpy/src/sample.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_11);

#line 75 "root_numpy/src/sample.pyx"
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "root_numpy/src/sample.pyx"
    }

#line 75 "root_numpy/src/sample.pyx"
    *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_arr.rcbuffer->pybuffer.buf, __pyx_t_14, __pyx_pybuffernd_arr.diminfo[0].strides, __pyx_t_15, __pyx_pybuffernd_arr.diminfo[1].strides) = __pyx_v_z;

#line 75 "root_numpy/src/sample.pyx"
  }

  /* "root_numpy/src/sample.pyx":76
 *         arr[i, 1] = y
 *         arr[i, 2] = z
 *     return arr             # <<<<<<<<<<<<<<
 * 
 */

#line 76 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 76 "root_numpy/src/sample.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_arr));

#line 76 "root_numpy/src/sample.pyx"
  __pyx_r = ((PyObject *)__pyx_v_arr);

#line 76 "root_numpy/src/sample.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/sample.pyx":64
 * 
 * 
 * def sample_h3(h3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 */

#line 64 "root_numpy/src/sample.pyx"


#line 64 "root_numpy/src/sample.pyx"
  /* function exit code */

#line 64 "root_numpy/src/sample.pyx"
  __pyx_L1_error:;

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 64 "root_numpy/src/sample.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 64 "root_numpy/src/sample.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 64 "root_numpy/src/sample.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_AddTraceback("_librootnumpy.sample_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_r = NULL;

#line 64 "root_numpy/src/sample.pyx"
  goto __pyx_L2;

#line 64 "root_numpy/src/sample.pyx"
  __pyx_L0:;

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_arr.rcbuffer->pybuffer);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_L2:;

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_arr);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_RefNannyFinishContext();

#line 64 "root_numpy/src/sample.pyx"
  return __pyx_r;

#line 64 "root_numpy/src/sample.pyx"
}

/* "root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 1 "root_numpy/src/hist.pyx"


#line 1 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 1 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_45fill_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_45fill_h1 = 
#line 1 "root_numpy/src/hist.pyx"
{"fill_h1", (PyCFunction)__pyx_pw_13_librootnumpy_45fill_h1, METH_VARARGS|METH_KEYWORDS, 0};

#line 1 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_45fill_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 1 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 1 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 1 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 1 "root_numpy/src/hist.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h1 (wrapper)", 0);

#line 1 "root_numpy/src/hist.pyx"
  {

#line 1 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 1 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":3
 * def fill_h1(hist,
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 3 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 3 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 3 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 3 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 3 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 3 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 3 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 3 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 3 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 3 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 3 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 3 "root_numpy/src/hist.pyx"
      }

#line 3 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 3 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 3 "root_numpy/src/hist.pyx"
        case  0:

#line 3 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 3 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 3 "root_numpy/src/hist.pyx"
        case  1:

#line 3 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 3 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_h1", 0, 2, 4, 1); 
#line 3 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 3 "root_numpy/src/hist.pyx"
        }

#line 3 "root_numpy/src/hist.pyx"
        case  2:

#line 3 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 3 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 3 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 3 "root_numpy/src/hist.pyx"
        }

#line 3 "root_numpy/src/hist.pyx"
        case  3:

#line 3 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 3 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 3 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 3 "root_numpy/src/hist.pyx"
        }

#line 3 "root_numpy/src/hist.pyx"
      }

#line 3 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 3 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_h1") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 3 "root_numpy/src/hist.pyx"
      }

#line 3 "root_numpy/src/hist.pyx"
    } else {

#line 3 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 3 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 3 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 3 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 3 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 3 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 3 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 3 "root_numpy/src/hist.pyx"
      }

#line 3 "root_numpy/src/hist.pyx"
    }

#line 3 "root_numpy/src/hist.pyx"
    __pyx_v_hist = values[0];

#line 3 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 3 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 3 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 3 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 3 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":4
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 4 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 4 "root_numpy/src/hist.pyx"
    }

#line 4 "root_numpy/src/hist.pyx"
  }

#line 4 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 4 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_h1", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 4 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 4 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 4 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 4 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 4 "root_numpy/src/hist.pyx"
  return NULL;

#line 4 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 4 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 4 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_44fill_h1(__pyx_self, __pyx_v_hist, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 1 "root_numpy/src/hist.pyx"


#line 1 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 1 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 1 "root_numpy/src/hist.pyx"
}

#line 1 "root_numpy/src/hist.pyx"


#line 1 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_44fill_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TH1 *__pyx_v__hist
#line 1 "root_numpy/src/hist.pyx"
;
  long __pyx_v_size
#line 1 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 1 "root_numpy/src/hist.pyx"
;
  long __pyx_v_i
#line 1 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 1 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 1 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 1 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 1 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 1 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 1 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 1 "root_numpy/src/hist.pyx"
;

#line 1 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h1", 0);

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 1 "root_numpy/src/hist.pyx"
  {

#line 1 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 1 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/hist.pyx"
  }

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

#line 1 "root_numpy/src/hist.pyx"
  {

#line 1 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 1 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/hist.pyx"
  }

#line 1 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":6
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 6 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/hist.pyx"
  __pyx_v__hist = ((TH1 *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":7
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef long i
 */

#line 7 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":8
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 8 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__22, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 8 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 8 "root_numpy/src/hist.pyx"
  {

#line 8 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 8 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 8 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 8 "root_numpy/src/hist.pyx"
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 8 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 8 "root_numpy/src/hist.pyx"
    }

#line 8 "root_numpy/src/hist.pyx"
  }

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 8 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 8 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":11
 *     cdef long i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 11 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 11 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":12
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 12 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 12 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 12 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 12 "root_numpy/src/hist.pyx"
    {

#line 12 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 12 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 12 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 12 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 12 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 12 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 12 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 12 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 12 "root_numpy/src/hist.pyx"
        } else {

#line 12 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 12 "root_numpy/src/hist.pyx"
        }

#line 12 "root_numpy/src/hist.pyx"
      }

#line 12 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 12 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/hist.pyx"
    }

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 12 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 12 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

#line 12 "root_numpy/src/hist.pyx"
    goto __pyx_L3;

#line 12 "root_numpy/src/hist.pyx"
  }

#line 12 "root_numpy/src/hist.pyx"
  __pyx_L3:;

  /* "root_numpy/src/hist.pyx":13
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])
 */

#line 13 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 13 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 13 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":14
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:
 */

#line 14 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 14 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":15
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 15 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 15 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 15 "root_numpy/src/hist.pyx"
      if (__pyx_t_15 < 0) {

#line 15 "root_numpy/src/hist.pyx"
        __pyx_t_15 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 15 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
      } else 
#line 15 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 15 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 15 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 15 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/hist.pyx"
      }

#line 15 "root_numpy/src/hist.pyx"
      __pyx_t_16 = __pyx_v_i;

#line 15 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 15 "root_numpy/src/hist.pyx"
      if (__pyx_t_16 < 0) {

#line 15 "root_numpy/src/hist.pyx"
        __pyx_t_16 += __pyx_pybuffernd_weights.diminfo[0].shape;

#line 15 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 0;
      } else 
#line 15 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_9 = 0;

#line 15 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 15 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 15 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/hist.pyx"
      }

#line 15 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_16, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":16
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 16 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 16 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":17
 *             bin_idx = _hist.Fill(array[i], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 17 "root_numpy/src/hist.pyx"
        __pyx_t_17 = __pyx_v_i;

#line 17 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 17 "root_numpy/src/hist.pyx"
        if (__pyx_t_17 < 0) {

#line 17 "root_numpy/src/hist.pyx"
          __pyx_t_17 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 17 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
        } else 
#line 17 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 17 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 17 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 17 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/src/hist.pyx"
        }

#line 17 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 17 "root_numpy/src/hist.pyx"
        goto __pyx_L7;

#line 17 "root_numpy/src/hist.pyx"
      }

#line 17 "root_numpy/src/hist.pyx"
      __pyx_L7:;

#line 17 "root_numpy/src/hist.pyx"
    }

#line 17 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 17 "root_numpy/src/hist.pyx"
  }

#line 17 "root_numpy/src/hist.pyx"
  /*else*/ {

    /* "root_numpy/src/hist.pyx":19
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:
 */

#line 19 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 19 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":20
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 20 "root_numpy/src/hist.pyx"
      __pyx_t_18 = __pyx_v_i;

#line 20 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 20 "root_numpy/src/hist.pyx"
      if (__pyx_t_18 < 0) {

#line 20 "root_numpy/src/hist.pyx"
        __pyx_t_18 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 20 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 0;
      } else 
#line 20 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 20 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 20 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 20 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "root_numpy/src/hist.pyx"
      }

#line 20 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_18, __pyx_pybuffernd_array.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":21
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 21 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 21 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":22
 *             bin_idx = _hist.Fill(array[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 22 "root_numpy/src/hist.pyx"
        __pyx_t_19 = __pyx_v_i;

#line 22 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 22 "root_numpy/src/hist.pyx"
        if (__pyx_t_19 < 0) {

#line 22 "root_numpy/src/hist.pyx"
          __pyx_t_19 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 22 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
        } else 
#line 22 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 22 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 22 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 22 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/hist.pyx"
        }

#line 22 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 22 "root_numpy/src/hist.pyx"
        goto __pyx_L10;

#line 22 "root_numpy/src/hist.pyx"
      }

#line 22 "root_numpy/src/hist.pyx"
      __pyx_L10:;

#line 22 "root_numpy/src/hist.pyx"
    }

#line 22 "root_numpy/src/hist.pyx"
  }

#line 22 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":23
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 23 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 23 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":24
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * def fill_h2(hist,
 */

#line 24 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 24 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 24 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 24 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

#line 24 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 1 "root_numpy/src/hist.pyx"


#line 1 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 1 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 1 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 1 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 1 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 1 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 1 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 1 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 1 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 1 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 1 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 26 "root_numpy/src/hist.pyx"


#line 26 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 26 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_47fill_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_47fill_h2 = 
#line 26 "root_numpy/src/hist.pyx"
{"fill_h2", (PyCFunction)__pyx_pw_13_librootnumpy_47fill_h2, METH_VARARGS|METH_KEYWORDS, 0};

#line 26 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_47fill_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 26 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 26 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 26 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 26 "root_numpy/src/hist.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 26 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h2 (wrapper)", 0);

#line 26 "root_numpy/src/hist.pyx"
  {

#line 26 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 26 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":28
 * def fill_h2(hist,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 28 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 28 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 28 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 28 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 28 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 28 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 28 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 28 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 28 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 28 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 28 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 28 "root_numpy/src/hist.pyx"
      }

#line 28 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 28 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 28 "root_numpy/src/hist.pyx"
        case  0:

#line 28 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 28 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 28 "root_numpy/src/hist.pyx"
        case  1:

#line 28 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 28 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_h2", 0, 2, 4, 1); 
#line 28 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 28 "root_numpy/src/hist.pyx"
        }

#line 28 "root_numpy/src/hist.pyx"
        case  2:

#line 28 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 28 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 28 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 28 "root_numpy/src/hist.pyx"
        }

#line 28 "root_numpy/src/hist.pyx"
        case  3:

#line 28 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 28 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 28 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 28 "root_numpy/src/hist.pyx"
        }

#line 28 "root_numpy/src/hist.pyx"
      }

#line 28 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 28 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_h2") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 28 "root_numpy/src/hist.pyx"
      }

#line 28 "root_numpy/src/hist.pyx"
    } else {

#line 28 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 28 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 28 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 28 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 28 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 28 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 28 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 28 "root_numpy/src/hist.pyx"
      }

#line 28 "root_numpy/src/hist.pyx"
    }

#line 28 "root_numpy/src/hist.pyx"
    __pyx_v_hist = values[0];

#line 28 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 28 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 28 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 28 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 28 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":29
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 29 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 29 "root_numpy/src/hist.pyx"
    }

#line 29 "root_numpy/src/hist.pyx"
  }

#line 29 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 29 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_h2", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 29 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 29 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 29 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 29 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 29 "root_numpy/src/hist.pyx"
  return NULL;

#line 29 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 29 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 29 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 29 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_46fill_h2(__pyx_self, __pyx_v_hist, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 26 "root_numpy/src/hist.pyx"


#line 26 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 26 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 26 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 26 "root_numpy/src/hist.pyx"
}

#line 26 "root_numpy/src/hist.pyx"


#line 26 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_46fill_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TH2 *__pyx_v__hist
#line 26 "root_numpy/src/hist.pyx"
;
  long __pyx_v_size
#line 26 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 26 "root_numpy/src/hist.pyx"
;
  long __pyx_v_i
#line 26 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 26 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 26 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 26 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 26 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 26 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 26 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 26 "root_numpy/src/hist.pyx"
;

#line 26 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h2", 0);

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 26 "root_numpy/src/hist.pyx"
  {

#line 26 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 26 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/hist.pyx"
  }

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 26 "root_numpy/src/hist.pyx"
  {

#line 26 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 26 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/hist.pyx"
  }

#line 26 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":31
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 31 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/hist.pyx"
  __pyx_v__hist = ((TH2 *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":32
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef long i
 */

#line 32 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":33
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 33 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 33 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 33 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 33 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 33 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 33 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 33 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__23, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 33 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 33 "root_numpy/src/hist.pyx"
  {

#line 33 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 33 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 33 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 33 "root_numpy/src/hist.pyx"
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 33 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 33 "root_numpy/src/hist.pyx"
    }

#line 33 "root_numpy/src/hist.pyx"
  }

#line 33 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 33 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 33 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":36
 *     cdef long i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 36 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 36 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":37
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 37 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 37 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 37 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 37 "root_numpy/src/hist.pyx"
    {

#line 37 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 37 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 37 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 37 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 37 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 37 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 37 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 37 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 37 "root_numpy/src/hist.pyx"
        } else {

#line 37 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 37 "root_numpy/src/hist.pyx"
        }

#line 37 "root_numpy/src/hist.pyx"
      }

#line 37 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 37 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/hist.pyx"
    }

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 37 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 37 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

#line 37 "root_numpy/src/hist.pyx"
    goto __pyx_L3;

#line 37 "root_numpy/src/hist.pyx"
  }

#line 37 "root_numpy/src/hist.pyx"
  __pyx_L3:;

  /* "root_numpy/src/hist.pyx":38
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 */

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 38 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 38 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":39
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 */

#line 39 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 39 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":40
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 40 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 40 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 40 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 40 "root_numpy/src/hist.pyx"
      if (__pyx_t_15 < 0) {

#line 40 "root_numpy/src/hist.pyx"
        __pyx_t_15 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 40 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
      } else 
#line 40 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 40 "root_numpy/src/hist.pyx"
      if (__pyx_t_16 < 0) {

#line 40 "root_numpy/src/hist.pyx"
        __pyx_t_16 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 40 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 1;
      } else 
#line 40 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 40 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 40 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 40 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 40 "root_numpy/src/hist.pyx"
      }

#line 40 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 40 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 40 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 40 "root_numpy/src/hist.pyx"
      if (__pyx_t_17 < 0) {

#line 40 "root_numpy/src/hist.pyx"
        __pyx_t_17 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 40 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
      } else 
#line 40 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 40 "root_numpy/src/hist.pyx"
      if (__pyx_t_18 < 0) {

#line 40 "root_numpy/src/hist.pyx"
        __pyx_t_18 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 40 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
      } else 
#line 40 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 40 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 40 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 40 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 40 "root_numpy/src/hist.pyx"
      }

#line 40 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 40 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 40 "root_numpy/src/hist.pyx"
      if (__pyx_t_19 < 0) {

#line 40 "root_numpy/src/hist.pyx"
        __pyx_t_19 += __pyx_pybuffernd_weights.diminfo[0].shape;

#line 40 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
      } else 
#line 40 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_9 = 0;

#line 40 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 40 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 40 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 40 "root_numpy/src/hist.pyx"
      }

#line 40 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":41
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 41 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 41 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":42
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 42 "root_numpy/src/hist.pyx"
        __pyx_t_20 = __pyx_v_i;

#line 42 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 42 "root_numpy/src/hist.pyx"
        if (__pyx_t_20 < 0) {

#line 42 "root_numpy/src/hist.pyx"
          __pyx_t_20 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 42 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 0;
        } else 
#line 42 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 42 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 42 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 42 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 42 "root_numpy/src/hist.pyx"
        }

#line 42 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 42 "root_numpy/src/hist.pyx"
        goto __pyx_L7;

#line 42 "root_numpy/src/hist.pyx"
      }

#line 42 "root_numpy/src/hist.pyx"
      __pyx_L7:;

#line 42 "root_numpy/src/hist.pyx"
    }

#line 42 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 42 "root_numpy/src/hist.pyx"
  }

#line 42 "root_numpy/src/hist.pyx"
  /*else*/ {

    /* "root_numpy/src/hist.pyx":44
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 */

#line 44 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 44 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":45
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_22 = 0;

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 45 "root_numpy/src/hist.pyx"
      if (__pyx_t_21 < 0) {

#line 45 "root_numpy/src/hist.pyx"
        __pyx_t_21 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 45 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 0;
      } else 
#line 45 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 45 "root_numpy/src/hist.pyx"
      if (__pyx_t_22 < 0) {

#line 45 "root_numpy/src/hist.pyx"
        __pyx_t_22 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 45 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 1;
      } else 
#line 45 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 45 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 45 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 45 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/hist.pyx"
      }

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_24 = 1;

#line 45 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 45 "root_numpy/src/hist.pyx"
      if (__pyx_t_23 < 0) {

#line 45 "root_numpy/src/hist.pyx"
        __pyx_t_23 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 45 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
      } else 
#line 45 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 45 "root_numpy/src/hist.pyx"
      if (__pyx_t_24 < 0) {

#line 45 "root_numpy/src/hist.pyx"
        __pyx_t_24 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 45 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 1;
      } else 
#line 45 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 45 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 45 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 45 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/hist.pyx"
      }

#line 45 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":46
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 46 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 46 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":47
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 47 "root_numpy/src/hist.pyx"
        __pyx_t_25 = __pyx_v_i;

#line 47 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 47 "root_numpy/src/hist.pyx"
        if (__pyx_t_25 < 0) {

#line 47 "root_numpy/src/hist.pyx"
          __pyx_t_25 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 47 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
        } else 
#line 47 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 47 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 47 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 47 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "root_numpy/src/hist.pyx"
        }

#line 47 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 47 "root_numpy/src/hist.pyx"
        goto __pyx_L10;

#line 47 "root_numpy/src/hist.pyx"
      }

#line 47 "root_numpy/src/hist.pyx"
      __pyx_L10:;

#line 47 "root_numpy/src/hist.pyx"
    }

#line 47 "root_numpy/src/hist.pyx"
  }

#line 47 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":48
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 48 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 48 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":49
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * def fill_h3(hist,
 */

#line 49 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 49 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 49 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 49 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

#line 49 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 26 "root_numpy/src/hist.pyx"


#line 26 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 26 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 26 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 26 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 26 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 26 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 26 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 26 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 26 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 26 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 26 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 26 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 26 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 26 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 51 "root_numpy/src/hist.pyx"


#line 51 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 51 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_49fill_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_49fill_h3 = 
#line 51 "root_numpy/src/hist.pyx"
{"fill_h3", (PyCFunction)__pyx_pw_13_librootnumpy_49fill_h3, METH_VARARGS|METH_KEYWORDS, 0};

#line 51 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_49fill_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 51 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 51 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 51 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 51 "root_numpy/src/hist.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 51 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h3 (wrapper)", 0);

#line 51 "root_numpy/src/hist.pyx"
  {

#line 51 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 51 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":53
 * def fill_h3(hist,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 53 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 53 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 53 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 53 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 53 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 53 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 53 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 53 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 53 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 53 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 53 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 53 "root_numpy/src/hist.pyx"
      }

#line 53 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 53 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 53 "root_numpy/src/hist.pyx"
        case  0:

#line 53 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 53 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 53 "root_numpy/src/hist.pyx"
        case  1:

#line 53 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 53 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_h3", 0, 2, 4, 1); 
#line 53 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 53 "root_numpy/src/hist.pyx"
        }

#line 53 "root_numpy/src/hist.pyx"
        case  2:

#line 53 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 53 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 53 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 53 "root_numpy/src/hist.pyx"
        }

#line 53 "root_numpy/src/hist.pyx"
        case  3:

#line 53 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 53 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 53 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 53 "root_numpy/src/hist.pyx"
        }

#line 53 "root_numpy/src/hist.pyx"
      }

#line 53 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 53 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_h3") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 53 "root_numpy/src/hist.pyx"
      }

#line 53 "root_numpy/src/hist.pyx"
    } else {

#line 53 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 53 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 53 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 53 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 53 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 53 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 53 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 53 "root_numpy/src/hist.pyx"
      }

#line 53 "root_numpy/src/hist.pyx"
    }

#line 53 "root_numpy/src/hist.pyx"
    __pyx_v_hist = values[0];

#line 53 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 53 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 53 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 53 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 53 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":54
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 54 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 54 "root_numpy/src/hist.pyx"
    }

#line 54 "root_numpy/src/hist.pyx"
  }

#line 54 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 54 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_h3", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 54 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 54 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 54 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 54 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 54 "root_numpy/src/hist.pyx"
  return NULL;

#line 54 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 54 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 54 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 54 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_48fill_h3(__pyx_self, __pyx_v_hist, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 51 "root_numpy/src/hist.pyx"


#line 51 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 51 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 51 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 51 "root_numpy/src/hist.pyx"
}

#line 51 "root_numpy/src/hist.pyx"


#line 51 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_48fill_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TH3 *__pyx_v__hist
#line 51 "root_numpy/src/hist.pyx"
;
  long __pyx_v_size
#line 51 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 51 "root_numpy/src/hist.pyx"
;
  long __pyx_v_i
#line 51 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 51 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 51 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 51 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 51 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 51 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 51 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 51 "root_numpy/src/hist.pyx"
;

#line 51 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  long __pyx_t_29;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_h3", 0);

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 51 "root_numpy/src/hist.pyx"
  {

#line 51 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 51 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "root_numpy/src/hist.pyx"
  }

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 51 "root_numpy/src/hist.pyx"
  {

#line 51 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 51 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "root_numpy/src/hist.pyx"
  }

#line 51 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":56
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 56 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "root_numpy/src/hist.pyx"
  __pyx_v__hist = ((TH3 *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":57
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef long i
 */

#line 57 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":58
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 58 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 58 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 58 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 58 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 58 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 58 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 58 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__24, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 58 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 58 "root_numpy/src/hist.pyx"
  {

#line 58 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 58 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 58 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 58 "root_numpy/src/hist.pyx"
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 58 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 58 "root_numpy/src/hist.pyx"
    }

#line 58 "root_numpy/src/hist.pyx"
  }

#line 58 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 58 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 58 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":61
 *     cdef long i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 61 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 61 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":62
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 62 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 62 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 62 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 62 "root_numpy/src/hist.pyx"
    {

#line 62 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 62 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 62 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 62 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 62 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 62 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 62 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 62 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 62 "root_numpy/src/hist.pyx"
        } else {

#line 62 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 62 "root_numpy/src/hist.pyx"
        }

#line 62 "root_numpy/src/hist.pyx"
      }

#line 62 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 62 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/hist.pyx"
    }

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 62 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 62 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

#line 62 "root_numpy/src/hist.pyx"
    goto __pyx_L3;

#line 62 "root_numpy/src/hist.pyx"
  }

#line 62 "root_numpy/src/hist.pyx"
  __pyx_L3:;

  /* "root_numpy/src/hist.pyx":63
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 */

#line 63 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 63 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 63 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":64
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 */

#line 64 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 64 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":65
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 65 "root_numpy/src/hist.pyx"
      if (__pyx_t_15 < 0) {

#line 65 "root_numpy/src/hist.pyx"
        __pyx_t_15 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 65 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
      } else 
#line 65 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 65 "root_numpy/src/hist.pyx"
      if (__pyx_t_16 < 0) {

#line 65 "root_numpy/src/hist.pyx"
        __pyx_t_16 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 65 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 1;
      } else 
#line 65 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 65 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 65 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 65 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "root_numpy/src/hist.pyx"
      }

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 65 "root_numpy/src/hist.pyx"
      if (__pyx_t_17 < 0) {

#line 65 "root_numpy/src/hist.pyx"
        __pyx_t_17 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 65 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
      } else 
#line 65 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 65 "root_numpy/src/hist.pyx"
      if (__pyx_t_18 < 0) {

#line 65 "root_numpy/src/hist.pyx"
        __pyx_t_18 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 65 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
      } else 
#line 65 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 65 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 65 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 65 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "root_numpy/src/hist.pyx"
      }

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_20 = 2;

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 65 "root_numpy/src/hist.pyx"
      if (__pyx_t_19 < 0) {

#line 65 "root_numpy/src/hist.pyx"
        __pyx_t_19 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 65 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
      } else 
#line 65 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 65 "root_numpy/src/hist.pyx"
      if (__pyx_t_20 < 0) {

#line 65 "root_numpy/src/hist.pyx"
        __pyx_t_20 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 65 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 1;
      } else 
#line 65 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 65 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 65 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 65 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "root_numpy/src/hist.pyx"
      }

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 65 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 65 "root_numpy/src/hist.pyx"
      if (__pyx_t_21 < 0) {

#line 65 "root_numpy/src/hist.pyx"
        __pyx_t_21 += __pyx_pybuffernd_weights.diminfo[0].shape;

#line 65 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 0;
      } else 
#line 65 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_9 = 0;

#line 65 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 65 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 65 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "root_numpy/src/hist.pyx"
      }

#line 65 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":66
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 66 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 66 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":67
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 67 "root_numpy/src/hist.pyx"
        __pyx_t_22 = __pyx_v_i;

#line 67 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 67 "root_numpy/src/hist.pyx"
        if (__pyx_t_22 < 0) {

#line 67 "root_numpy/src/hist.pyx"
          __pyx_t_22 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 67 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 0;
        } else 
#line 67 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 67 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 67 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 67 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 67 "root_numpy/src/hist.pyx"
        }

#line 67 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 67 "root_numpy/src/hist.pyx"
        goto __pyx_L7;

#line 67 "root_numpy/src/hist.pyx"
      }

#line 67 "root_numpy/src/hist.pyx"
      __pyx_L7:;

#line 67 "root_numpy/src/hist.pyx"
    }

#line 67 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 67 "root_numpy/src/hist.pyx"
  }

#line 67 "root_numpy/src/hist.pyx"
  /*else*/ {

    /* "root_numpy/src/hist.pyx":69
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 */

#line 69 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 69 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":70
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_24 = 0;

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 70 "root_numpy/src/hist.pyx"
      if (__pyx_t_23 < 0) {

#line 70 "root_numpy/src/hist.pyx"
        __pyx_t_23 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 70 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
      } else 
#line 70 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 70 "root_numpy/src/hist.pyx"
      if (__pyx_t_24 < 0) {

#line 70 "root_numpy/src/hist.pyx"
        __pyx_t_24 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 70 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 1;
      } else 
#line 70 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 70 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 70 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 70 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/hist.pyx"
      }

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_25 = __pyx_v_i;

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_26 = 1;

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 70 "root_numpy/src/hist.pyx"
      if (__pyx_t_25 < 0) {

#line 70 "root_numpy/src/hist.pyx"
        __pyx_t_25 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 70 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
      } else 
#line 70 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 70 "root_numpy/src/hist.pyx"
      if (__pyx_t_26 < 0) {

#line 70 "root_numpy/src/hist.pyx"
        __pyx_t_26 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 70 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_26 < 0)) __pyx_t_9 = 1;
      } else 
#line 70 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 70 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 70 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 70 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/hist.pyx"
      }

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_27 = __pyx_v_i;

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_28 = 2;

#line 70 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 70 "root_numpy/src/hist.pyx"
      if (__pyx_t_27 < 0) {

#line 70 "root_numpy/src/hist.pyx"
        __pyx_t_27 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 70 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_27 < 0)) __pyx_t_9 = 0;
      } else 
#line 70 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 70 "root_numpy/src/hist.pyx"
      if (__pyx_t_28 < 0) {

#line 70 "root_numpy/src/hist.pyx"
        __pyx_t_28 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 70 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_28 < 0)) __pyx_t_9 = 1;
      } else 
#line 70 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 70 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 70 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 70 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/src/hist.pyx"
      }

#line 70 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__hist->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":71
 *         for i from 0 <= i < size:
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 71 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 71 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":72
 *             bin_idx = _hist.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 72 "root_numpy/src/hist.pyx"
        __pyx_t_29 = __pyx_v_i;

#line 72 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 72 "root_numpy/src/hist.pyx"
        if (__pyx_t_29 < 0) {

#line 72 "root_numpy/src/hist.pyx"
          __pyx_t_29 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 72 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_29 < 0)) __pyx_t_9 = 0;
        } else 
#line 72 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 72 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 72 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 72 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 72 "root_numpy/src/hist.pyx"
        }

#line 72 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 72 "root_numpy/src/hist.pyx"
        goto __pyx_L10;

#line 72 "root_numpy/src/hist.pyx"
      }

#line 72 "root_numpy/src/hist.pyx"
      __pyx_L10:;

#line 72 "root_numpy/src/hist.pyx"
    }

#line 72 "root_numpy/src/hist.pyx"
  }

#line 72 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":73
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 73 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 73 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":74
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * def fill_p1(profile,
 */

#line 74 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 74 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 74 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 74 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

#line 74 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 51 "root_numpy/src/hist.pyx"


#line 51 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 51 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 51 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 51 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 51 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 51 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 51 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 51 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 51 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 51 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 51 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 51 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 51 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 51 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":76
 *         return idx
 * 
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 76 "root_numpy/src/hist.pyx"


#line 76 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 76 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_51fill_p1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_51fill_p1 = 
#line 76 "root_numpy/src/hist.pyx"
{"fill_p1", (PyCFunction)__pyx_pw_13_librootnumpy_51fill_p1, METH_VARARGS|METH_KEYWORDS, 0};

#line 76 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_51fill_p1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_profile = 0
#line 76 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 76 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 76 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 76 "root_numpy/src/hist.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 76 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p1 (wrapper)", 0);

#line 76 "root_numpy/src/hist.pyx"
  {

#line 76 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_profile,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 76 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":78
 * def fill_p1(profile,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 78 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 78 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 78 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 78 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 78 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 78 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 78 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 78 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 78 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 78 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "root_numpy/src/hist.pyx"
      }

#line 78 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 78 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 78 "root_numpy/src/hist.pyx"
        case  0:

#line 78 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else 
#line 78 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "root_numpy/src/hist.pyx"
        case  1:

#line 78 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 78 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_p1", 0, 2, 4, 1); 
#line 78 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 78 "root_numpy/src/hist.pyx"
        }

#line 78 "root_numpy/src/hist.pyx"
        case  2:

#line 78 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 78 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 78 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 78 "root_numpy/src/hist.pyx"
        }

#line 78 "root_numpy/src/hist.pyx"
        case  3:

#line 78 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 78 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 78 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 78 "root_numpy/src/hist.pyx"
        }

#line 78 "root_numpy/src/hist.pyx"
      }

#line 78 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 78 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_p1") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 78 "root_numpy/src/hist.pyx"
      }

#line 78 "root_numpy/src/hist.pyx"
    } else {

#line 78 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 78 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 78 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 78 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 78 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 78 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "root_numpy/src/hist.pyx"
      }

#line 78 "root_numpy/src/hist.pyx"
    }

#line 78 "root_numpy/src/hist.pyx"
    __pyx_v_profile = values[0];

#line 78 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 78 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 78 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 78 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 78 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":79
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)
 */

#line 79 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 79 "root_numpy/src/hist.pyx"
    }

#line 79 "root_numpy/src/hist.pyx"
  }

#line 79 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 79 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_p1", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 79 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 79 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 79 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 79 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 79 "root_numpy/src/hist.pyx"
  return NULL;

#line 79 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 79 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 79 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 79 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_50fill_p1(__pyx_self, __pyx_v_profile, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":76
 *         return idx
 * 
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 76 "root_numpy/src/hist.pyx"


#line 76 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 76 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 76 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 76 "root_numpy/src/hist.pyx"
}

#line 76 "root_numpy/src/hist.pyx"


#line 76 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_50fill_p1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TProfile *__pyx_v__profile
#line 76 "root_numpy/src/hist.pyx"
;
  long __pyx_v_size
#line 76 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 76 "root_numpy/src/hist.pyx"
;
  long __pyx_v_i
#line 76 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 76 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 76 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 76 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 76 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 76 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 76 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 76 "root_numpy/src/hist.pyx"
;

#line 76 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p1", 0);

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 76 "root_numpy/src/hist.pyx"
  {

#line 76 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 76 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 76 "root_numpy/src/hist.pyx"
  }

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 76 "root_numpy/src/hist.pyx"
  {

#line 76 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 76 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 76 "root_numpy/src/hist.pyx"
  }

#line 76 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":81
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 81 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_profile); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 81 "root_numpy/src/hist.pyx"
  __pyx_v__profile = ((TProfile *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":82
 *     # perform type checking on python side
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef long i
 */

#line 82 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":83
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 83 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 83 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 83 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 83 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 83 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 83 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 83 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__25, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 83 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 83 "root_numpy/src/hist.pyx"
  {

#line 83 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 83 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 83 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 83 "root_numpy/src/hist.pyx"
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 83 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 83 "root_numpy/src/hist.pyx"
    }

#line 83 "root_numpy/src/hist.pyx"
  }

#line 83 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 83 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 83 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":86
 *     cdef long i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 86 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 86 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":87
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 87 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 87 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 87 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 87 "root_numpy/src/hist.pyx"
    {

#line 87 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 87 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 87 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 87 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 87 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 87 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 87 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 87 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 87 "root_numpy/src/hist.pyx"
        } else {

#line 87 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 87 "root_numpy/src/hist.pyx"
        }

#line 87 "root_numpy/src/hist.pyx"
      }

#line 87 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 87 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/hist.pyx"
    }

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 87 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 87 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

#line 87 "root_numpy/src/hist.pyx"
    goto __pyx_L3;

#line 87 "root_numpy/src/hist.pyx"
  }

#line 87 "root_numpy/src/hist.pyx"
  __pyx_L3:;

  /* "root_numpy/src/hist.pyx":88
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 */

#line 88 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 88 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 88 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":89
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 */

#line 89 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 89 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":90
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 90 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 90 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 90 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 90 "root_numpy/src/hist.pyx"
      if (__pyx_t_15 < 0) {

#line 90 "root_numpy/src/hist.pyx"
        __pyx_t_15 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 90 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
      } else 
#line 90 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 90 "root_numpy/src/hist.pyx"
      if (__pyx_t_16 < 0) {

#line 90 "root_numpy/src/hist.pyx"
        __pyx_t_16 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 90 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 1;
      } else 
#line 90 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 90 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 90 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 90 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 90 "root_numpy/src/hist.pyx"
      }

#line 90 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 90 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 90 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 90 "root_numpy/src/hist.pyx"
      if (__pyx_t_17 < 0) {

#line 90 "root_numpy/src/hist.pyx"
        __pyx_t_17 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 90 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
      } else 
#line 90 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 90 "root_numpy/src/hist.pyx"
      if (__pyx_t_18 < 0) {

#line 90 "root_numpy/src/hist.pyx"
        __pyx_t_18 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 90 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
      } else 
#line 90 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 90 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 90 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 90 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 90 "root_numpy/src/hist.pyx"
      }

#line 90 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 90 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 90 "root_numpy/src/hist.pyx"
      if (__pyx_t_19 < 0) {

#line 90 "root_numpy/src/hist.pyx"
        __pyx_t_19 += __pyx_pybuffernd_weights.diminfo[0].shape;

#line 90 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
      } else 
#line 90 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_9 = 0;

#line 90 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 90 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 90 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 90; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 90 "root_numpy/src/hist.pyx"
      }

#line 90 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":91
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 91 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 91 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":92
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 92 "root_numpy/src/hist.pyx"
        __pyx_t_20 = __pyx_v_i;

#line 92 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 92 "root_numpy/src/hist.pyx"
        if (__pyx_t_20 < 0) {

#line 92 "root_numpy/src/hist.pyx"
          __pyx_t_20 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 92 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 0;
        } else 
#line 92 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 92 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 92 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 92 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 92 "root_numpy/src/hist.pyx"
        }

#line 92 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 92 "root_numpy/src/hist.pyx"
        goto __pyx_L7;

#line 92 "root_numpy/src/hist.pyx"
      }

#line 92 "root_numpy/src/hist.pyx"
      __pyx_L7:;

#line 92 "root_numpy/src/hist.pyx"
    }

#line 92 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 92 "root_numpy/src/hist.pyx"
  }

#line 92 "root_numpy/src/hist.pyx"
  /*else*/ {

    /* "root_numpy/src/hist.pyx":94
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 */

#line 94 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 94 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":95
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 95 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 95 "root_numpy/src/hist.pyx"
      __pyx_t_22 = 0;

#line 95 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 95 "root_numpy/src/hist.pyx"
      if (__pyx_t_21 < 0) {

#line 95 "root_numpy/src/hist.pyx"
        __pyx_t_21 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 95 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 0;
      } else 
#line 95 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 95 "root_numpy/src/hist.pyx"
      if (__pyx_t_22 < 0) {

#line 95 "root_numpy/src/hist.pyx"
        __pyx_t_22 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 95 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 1;
      } else 
#line 95 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 95 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 95 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 95 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/hist.pyx"
      }

#line 95 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 95 "root_numpy/src/hist.pyx"
      __pyx_t_24 = 1;

#line 95 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 95 "root_numpy/src/hist.pyx"
      if (__pyx_t_23 < 0) {

#line 95 "root_numpy/src/hist.pyx"
        __pyx_t_23 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 95 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
      } else 
#line 95 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 95 "root_numpy/src/hist.pyx"
      if (__pyx_t_24 < 0) {

#line 95 "root_numpy/src/hist.pyx"
        __pyx_t_24 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 95 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 1;
      } else 
#line 95 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 95 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 95 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 95 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/hist.pyx"
      }

#line 95 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":96
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 96 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 96 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":97
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 97 "root_numpy/src/hist.pyx"
        __pyx_t_25 = __pyx_v_i;

#line 97 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 97 "root_numpy/src/hist.pyx"
        if (__pyx_t_25 < 0) {

#line 97 "root_numpy/src/hist.pyx"
          __pyx_t_25 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 97 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
        } else 
#line 97 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 97 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 97 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 97 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/hist.pyx"
        }

#line 97 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 97 "root_numpy/src/hist.pyx"
        goto __pyx_L10;

#line 97 "root_numpy/src/hist.pyx"
      }

#line 97 "root_numpy/src/hist.pyx"
      __pyx_L10:;

#line 97 "root_numpy/src/hist.pyx"
    }

#line 97 "root_numpy/src/hist.pyx"
  }

#line 97 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":98
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 98 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 98 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":99
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * def fill_p2(profile,
 */

#line 99 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 99 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 99 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 99 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

#line 99 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":76
 *         return idx
 * 
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 76 "root_numpy/src/hist.pyx"


#line 76 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 76 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 76 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 76 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 76 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 76 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 76 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 76 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 76 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 76 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 76 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 76 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 76 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 76 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":101
 *         return idx
 * 
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 101 "root_numpy/src/hist.pyx"


#line 101 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 101 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_53fill_p2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_53fill_p2 = 
#line 101 "root_numpy/src/hist.pyx"
{"fill_p2", (PyCFunction)__pyx_pw_13_librootnumpy_53fill_p2, METH_VARARGS|METH_KEYWORDS, 0};

#line 101 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_53fill_p2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_profile = 0
#line 101 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 101 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 101 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 101 "root_numpy/src/hist.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 101 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p2 (wrapper)", 0);

#line 101 "root_numpy/src/hist.pyx"
  {

#line 101 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_profile,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 101 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":103
 * def fill_p2(profile,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 103 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 103 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 103 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 103 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 103 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 103 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 103 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 103 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 103 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 103 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 103 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 103 "root_numpy/src/hist.pyx"
      }

#line 103 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 103 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 103 "root_numpy/src/hist.pyx"
        case  0:

#line 103 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else 
#line 103 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 103 "root_numpy/src/hist.pyx"
        case  1:

#line 103 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 103 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_p2", 0, 2, 4, 1); 
#line 103 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 103 "root_numpy/src/hist.pyx"
        }

#line 103 "root_numpy/src/hist.pyx"
        case  2:

#line 103 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 103 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 103 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 103 "root_numpy/src/hist.pyx"
        }

#line 103 "root_numpy/src/hist.pyx"
        case  3:

#line 103 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 103 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 103 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 103 "root_numpy/src/hist.pyx"
        }

#line 103 "root_numpy/src/hist.pyx"
      }

#line 103 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 103 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_p2") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 103 "root_numpy/src/hist.pyx"
      }

#line 103 "root_numpy/src/hist.pyx"
    } else {

#line 103 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 103 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 103 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 103 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 103 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 103 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 103 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 103 "root_numpy/src/hist.pyx"
      }

#line 103 "root_numpy/src/hist.pyx"
    }

#line 103 "root_numpy/src/hist.pyx"
    __pyx_v_profile = values[0];

#line 103 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 103 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 103 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 103 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 103 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":104
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)
 */

#line 104 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 104 "root_numpy/src/hist.pyx"
    }

#line 104 "root_numpy/src/hist.pyx"
  }

#line 104 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 104 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_p2", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 104 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 104 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 104 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 104 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 104 "root_numpy/src/hist.pyx"
  return NULL;

#line 104 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 104 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 104 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_52fill_p2(__pyx_self, __pyx_v_profile, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":101
 *         return idx
 * 
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 101 "root_numpy/src/hist.pyx"


#line 101 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 101 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 101 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 101 "root_numpy/src/hist.pyx"
}

#line 101 "root_numpy/src/hist.pyx"


#line 101 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_52fill_p2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TProfile2D *__pyx_v__profile
#line 101 "root_numpy/src/hist.pyx"
;
  long __pyx_v_size
#line 101 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 101 "root_numpy/src/hist.pyx"
;
  long __pyx_v_i
#line 101 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 101 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 101 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 101 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 101 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 101 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 101 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 101 "root_numpy/src/hist.pyx"
;

#line 101 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  long __pyx_t_29;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p2", 0);

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 101 "root_numpy/src/hist.pyx"
  {

#line 101 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 101 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/hist.pyx"
  }

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 101 "root_numpy/src/hist.pyx"
  {

#line 101 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 101 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/hist.pyx"
  }

#line 101 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":106
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 106 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_profile); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 106 "root_numpy/src/hist.pyx"
  __pyx_v__profile = ((TProfile2D *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":107
 *     # perform type checking on python side
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef long i
 */

#line 107 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":108
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 108 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 108 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 108 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 108 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 108 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 108 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 108 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__26, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 108 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 108 "root_numpy/src/hist.pyx"
  {

#line 108 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 108 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 108 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 108 "root_numpy/src/hist.pyx"
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 108 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 108 "root_numpy/src/hist.pyx"
    }

#line 108 "root_numpy/src/hist.pyx"
  }

#line 108 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 108 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 108 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":111
 *     cdef long i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 111 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 111 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":112
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 112 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 112 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 112 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 112 "root_numpy/src/hist.pyx"
    {

#line 112 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 112 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 112 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 112 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 112 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 112 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 112 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 112 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 112 "root_numpy/src/hist.pyx"
        } else {

#line 112 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 112 "root_numpy/src/hist.pyx"
        }

#line 112 "root_numpy/src/hist.pyx"
      }

#line 112 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 112 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 112 "root_numpy/src/hist.pyx"
    }

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 112 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 112 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

#line 112 "root_numpy/src/hist.pyx"
    goto __pyx_L3;

#line 112 "root_numpy/src/hist.pyx"
  }

#line 112 "root_numpy/src/hist.pyx"
  __pyx_L3:;

  /* "root_numpy/src/hist.pyx":113
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 */

#line 113 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 113 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 113 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":114
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 */

#line 114 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 114 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":115
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 115 "root_numpy/src/hist.pyx"
      if (__pyx_t_15 < 0) {

#line 115 "root_numpy/src/hist.pyx"
        __pyx_t_15 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 115 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
      } else 
#line 115 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 115 "root_numpy/src/hist.pyx"
      if (__pyx_t_16 < 0) {

#line 115 "root_numpy/src/hist.pyx"
        __pyx_t_16 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 115 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 1;
      } else 
#line 115 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 115 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 115 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 115 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/hist.pyx"
      }

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 115 "root_numpy/src/hist.pyx"
      if (__pyx_t_17 < 0) {

#line 115 "root_numpy/src/hist.pyx"
        __pyx_t_17 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 115 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
      } else 
#line 115 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 115 "root_numpy/src/hist.pyx"
      if (__pyx_t_18 < 0) {

#line 115 "root_numpy/src/hist.pyx"
        __pyx_t_18 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 115 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
      } else 
#line 115 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 115 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 115 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 115 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/hist.pyx"
      }

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_20 = 2;

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 115 "root_numpy/src/hist.pyx"
      if (__pyx_t_19 < 0) {

#line 115 "root_numpy/src/hist.pyx"
        __pyx_t_19 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 115 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
      } else 
#line 115 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 115 "root_numpy/src/hist.pyx"
      if (__pyx_t_20 < 0) {

#line 115 "root_numpy/src/hist.pyx"
        __pyx_t_20 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 115 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 1;
      } else 
#line 115 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 115 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 115 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 115 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/hist.pyx"
      }

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 115 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 115 "root_numpy/src/hist.pyx"
      if (__pyx_t_21 < 0) {

#line 115 "root_numpy/src/hist.pyx"
        __pyx_t_21 += __pyx_pybuffernd_weights.diminfo[0].shape;

#line 115 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 0;
      } else 
#line 115 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_9 = 0;

#line 115 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 115 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 115 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/hist.pyx"
      }

#line 115 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":116
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 116 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 116 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":117
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 117 "root_numpy/src/hist.pyx"
        __pyx_t_22 = __pyx_v_i;

#line 117 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 117 "root_numpy/src/hist.pyx"
        if (__pyx_t_22 < 0) {

#line 117 "root_numpy/src/hist.pyx"
          __pyx_t_22 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 117 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 0;
        } else 
#line 117 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 117 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 117 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 117 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 117 "root_numpy/src/hist.pyx"
        }

#line 117 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 117 "root_numpy/src/hist.pyx"
        goto __pyx_L7;

#line 117 "root_numpy/src/hist.pyx"
      }

#line 117 "root_numpy/src/hist.pyx"
      __pyx_L7:;

#line 117 "root_numpy/src/hist.pyx"
    }

#line 117 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 117 "root_numpy/src/hist.pyx"
  }

#line 117 "root_numpy/src/hist.pyx"
  /*else*/ {

    /* "root_numpy/src/hist.pyx":119
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 */

#line 119 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 119 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":120
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 120 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 120 "root_numpy/src/hist.pyx"
      __pyx_t_24 = 0;

#line 120 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 120 "root_numpy/src/hist.pyx"
      if (__pyx_t_23 < 0) {

#line 120 "root_numpy/src/hist.pyx"
        __pyx_t_23 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 120 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
      } else 
#line 120 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 120 "root_numpy/src/hist.pyx"
      if (__pyx_t_24 < 0) {

#line 120 "root_numpy/src/hist.pyx"
        __pyx_t_24 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 120 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 1;
      } else 
#line 120 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 120 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 120 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 120 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 120 "root_numpy/src/hist.pyx"
      }

#line 120 "root_numpy/src/hist.pyx"
      __pyx_t_25 = __pyx_v_i;

#line 120 "root_numpy/src/hist.pyx"
      __pyx_t_26 = 1;

#line 120 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 120 "root_numpy/src/hist.pyx"
      if (__pyx_t_25 < 0) {

#line 120 "root_numpy/src/hist.pyx"
        __pyx_t_25 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 120 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
      } else 
#line 120 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 120 "root_numpy/src/hist.pyx"
      if (__pyx_t_26 < 0) {

#line 120 "root_numpy/src/hist.pyx"
        __pyx_t_26 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 120 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_26 < 0)) __pyx_t_9 = 1;
      } else 
#line 120 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 120 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 120 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 120 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 120 "root_numpy/src/hist.pyx"
      }

#line 120 "root_numpy/src/hist.pyx"
      __pyx_t_27 = __pyx_v_i;

#line 120 "root_numpy/src/hist.pyx"
      __pyx_t_28 = 2;

#line 120 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 120 "root_numpy/src/hist.pyx"
      if (__pyx_t_27 < 0) {

#line 120 "root_numpy/src/hist.pyx"
        __pyx_t_27 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 120 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_27 < 0)) __pyx_t_9 = 0;
      } else 
#line 120 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 120 "root_numpy/src/hist.pyx"
      if (__pyx_t_28 < 0) {

#line 120 "root_numpy/src/hist.pyx"
        __pyx_t_28 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 120 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_28 < 0)) __pyx_t_9 = 1;
      } else 
#line 120 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 120 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 120 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 120 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 120 "root_numpy/src/hist.pyx"
      }

#line 120 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":121
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 121 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 121 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":122
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 122 "root_numpy/src/hist.pyx"
        __pyx_t_29 = __pyx_v_i;

#line 122 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 122 "root_numpy/src/hist.pyx"
        if (__pyx_t_29 < 0) {

#line 122 "root_numpy/src/hist.pyx"
          __pyx_t_29 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 122 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_29 < 0)) __pyx_t_9 = 0;
        } else 
#line 122 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 122 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 122 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 122 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 122 "root_numpy/src/hist.pyx"
        }

#line 122 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 122 "root_numpy/src/hist.pyx"
        goto __pyx_L10;

#line 122 "root_numpy/src/hist.pyx"
      }

#line 122 "root_numpy/src/hist.pyx"
      __pyx_L10:;

#line 122 "root_numpy/src/hist.pyx"
    }

#line 122 "root_numpy/src/hist.pyx"
  }

#line 122 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":123
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 * 
 */

#line 123 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 123 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":124
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 * 
 * def fill_p3(profile,
 */

#line 124 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 124 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 124 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 124 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

#line 124 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":101
 *         return idx
 * 
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 101 "root_numpy/src/hist.pyx"


#line 101 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 101 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 101 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 101 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 101 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 101 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 101 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 101 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 101 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 101 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 101 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 101 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 101 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 101 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/hist.pyx":126
 *         return idx
 * 
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 126 "root_numpy/src/hist.pyx"


#line 126 "root_numpy/src/hist.pyx"
/* Python wrapper */

#line 126 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_55fill_p3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_55fill_p3 = 
#line 126 "root_numpy/src/hist.pyx"
{"fill_p3", (PyCFunction)__pyx_pw_13_librootnumpy_55fill_p3, METH_VARARGS|METH_KEYWORDS, 0};

#line 126 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pw_13_librootnumpy_55fill_p3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_profile = 0
#line 126 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 126 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 126 "root_numpy/src/hist.pyx"
;
  bool __pyx_v_return_indices
#line 126 "root_numpy/src/hist.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 126 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = 0;

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyDeclarations

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p3 (wrapper)", 0);

#line 126 "root_numpy/src/hist.pyx"
  {

#line 126 "root_numpy/src/hist.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_profile,&__pyx_n_s_array,&__pyx_n_s_weights,&__pyx_n_s_return_indices,0};

#line 126 "root_numpy/src/hist.pyx"
    PyObject* values[4] = {0,0,0,0};

    /* "root_numpy/src/hist.pyx":128
 * def fill_p3(profile,
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *             bool return_indices=False):
 *     # perform type checking on python side
 */

#line 128 "root_numpy/src/hist.pyx"
    values[2] = (PyObject *)((PyArrayObject *)Py_None);

#line 128 "root_numpy/src/hist.pyx"
    if (unlikely(__pyx_kwds)) {

#line 128 "root_numpy/src/hist.pyx"
      Py_ssize_t kw_args;

#line 128 "root_numpy/src/hist.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 128 "root_numpy/src/hist.pyx"
      switch (pos_args) {
        case  4: 
#line 128 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 128 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 128 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 128 "root_numpy/src/hist.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 128 "root_numpy/src/hist.pyx"
        case  0: break;
        default: 
#line 128 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 128 "root_numpy/src/hist.pyx"
      }

#line 128 "root_numpy/src/hist.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 128 "root_numpy/src/hist.pyx"
      switch (pos_args) {

#line 128 "root_numpy/src/hist.pyx"
        case  0:

#line 128 "root_numpy/src/hist.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else 
#line 128 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 128 "root_numpy/src/hist.pyx"
        case  1:

#line 128 "root_numpy/src/hist.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 128 "root_numpy/src/hist.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_p3", 0, 2, 4, 1); 
#line 128 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 128 "root_numpy/src/hist.pyx"
        }

#line 128 "root_numpy/src/hist.pyx"
        case  2:

#line 128 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 128 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 128 "root_numpy/src/hist.pyx"
          if (value) { values[2] = value; kw_args--; }

#line 128 "root_numpy/src/hist.pyx"
        }

#line 128 "root_numpy/src/hist.pyx"
        case  3:

#line 128 "root_numpy/src/hist.pyx"
        if (kw_args > 0) {

#line 128 "root_numpy/src/hist.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_return_indices);

#line 128 "root_numpy/src/hist.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 128 "root_numpy/src/hist.pyx"
        }

#line 128 "root_numpy/src/hist.pyx"
      }

#line 128 "root_numpy/src/hist.pyx"
      if (unlikely(kw_args > 0)) {

#line 128 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_p3") < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 128 "root_numpy/src/hist.pyx"
      }

#line 128 "root_numpy/src/hist.pyx"
    } else {

#line 128 "root_numpy/src/hist.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: 
#line 128 "root_numpy/src/hist.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 128 "root_numpy/src/hist.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 128 "root_numpy/src/hist.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 128 "root_numpy/src/hist.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 128 "root_numpy/src/hist.pyx"
        break;
        default: 
#line 128 "root_numpy/src/hist.pyx"
goto __pyx_L5_argtuple_error;

#line 128 "root_numpy/src/hist.pyx"
      }

#line 128 "root_numpy/src/hist.pyx"
    }

#line 128 "root_numpy/src/hist.pyx"
    __pyx_v_profile = values[0];

#line 128 "root_numpy/src/hist.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 128 "root_numpy/src/hist.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[2]);

#line 128 "root_numpy/src/hist.pyx"
    if (values[3]) {

#line 128 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_return_indices == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 128 "root_numpy/src/hist.pyx"
    } else {

      /* "root_numpy/src/hist.pyx":129
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 *             bool return_indices=False):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)
 */

#line 129 "root_numpy/src/hist.pyx"
      __pyx_v_return_indices = ((bool)0);

#line 129 "root_numpy/src/hist.pyx"
    }

#line 129 "root_numpy/src/hist.pyx"
  }

#line 129 "root_numpy/src/hist.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 129 "root_numpy/src/hist.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_p3", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); 
#line 129 "root_numpy/src/hist.pyx"
{__pyx_filename = __pyx_f[5]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 129 "root_numpy/src/hist.pyx"
  __pyx_L3_error:;

#line 129 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 129 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 129 "root_numpy/src/hist.pyx"
  return NULL;

#line 129 "root_numpy/src/hist.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 129 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 129 "root_numpy/src/hist.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 129 "root_numpy/src/hist.pyx"
__pyx_pf_13_librootnumpy_54fill_p3(__pyx_self, __pyx_v_profile, __pyx_v_array, __pyx_v_weights, __pyx_v_return_indices);

  /* "root_numpy/src/hist.pyx":126
 *         return idx
 * 
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 126 "root_numpy/src/hist.pyx"


#line 126 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 126 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 126 "root_numpy/src/hist.pyx"
}

#line 126 "root_numpy/src/hist.pyx"


#line 126 "root_numpy/src/hist.pyx"
static PyObject *__pyx_pf_13_librootnumpy_54fill_p3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_profile, PyArrayObject *__pyx_v_array, PyArrayObject *__pyx_v_weights, bool __pyx_v_return_indices) {
  TProfile3D *__pyx_v__profile
#line 126 "root_numpy/src/hist.pyx"
;
  long __pyx_v_size
#line 126 "root_numpy/src/hist.pyx"
;
  PyArrayObject *__pyx_v_idx = 0
#line 126 "root_numpy/src/hist.pyx"
;
  long __pyx_v_i
#line 126 "root_numpy/src/hist.pyx"
;
  int __pyx_v_bin_idx
#line 126 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 126 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 126 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_idx
#line 126 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_idx
#line 126 "root_numpy/src/hist.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 126 "root_numpy/src/hist.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 126 "root_numpy/src/hist.pyx"
;

#line 126 "root_numpy/src/hist.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyArrayObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  long __pyx_t_14;
  long __pyx_t_15;
  long __pyx_t_16;
  long __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  long __pyx_t_29;
  long __pyx_t_30;
  long __pyx_t_31;
  long __pyx_t_32;
  long __pyx_t_33;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_RefNannySetupContext("fill_p3", 0);

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.pybuffer.buf = NULL;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_idx.refcount = 0;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.data = NULL;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_idx.rcbuffer = &__pyx_pybuffer_idx;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 126 "root_numpy/src/hist.pyx"
  {

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 126 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/hist.pyx"
  }

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

#line 126 "root_numpy/src/hist.pyx"
  {

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 126 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/hist.pyx"
  }

#line 126 "root_numpy/src/hist.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/hist.pyx":131
 *             bool return_indices=False):
 *     # perform type checking on python side
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 */

#line 131 "root_numpy/src/hist.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_profile); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 131 "root_numpy/src/hist.pyx"
  __pyx_v__profile = ((TProfile3D *)__pyx_t_1);

  /* "root_numpy/src/hist.pyx":132
 *     # perform type checking on python side
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)
 *     cdef long i
 */

#line 132 "root_numpy/src/hist.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/hist.pyx":133
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 133 "root_numpy/src/hist.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 133 "root_numpy/src/hist.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 133 "root_numpy/src/hist.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 133 "root_numpy/src/hist.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 133 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 133 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 133 "root_numpy/src/hist.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__27, __pyx_t_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 133 "root_numpy/src/hist.pyx"
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "root_numpy/src/hist.pyx"
  __pyx_t_6 = ((PyArrayObject *)__pyx_t_5);

#line 133 "root_numpy/src/hist.pyx"
  {

#line 133 "root_numpy/src/hist.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 133 "root_numpy/src/hist.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 133 "root_numpy/src/hist.pyx"
      __pyx_v_idx = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf = NULL;

#line 133 "root_numpy/src/hist.pyx"
      {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 133 "root_numpy/src/hist.pyx"
__pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 133 "root_numpy/src/hist.pyx"
    }

#line 133 "root_numpy/src/hist.pyx"
  }

#line 133 "root_numpy/src/hist.pyx"
  __pyx_t_6 = 0;

#line 133 "root_numpy/src/hist.pyx"
  __pyx_v_idx = ((PyArrayObject *)__pyx_t_5);

#line 133 "root_numpy/src/hist.pyx"
  __pyx_t_5 = 0;

  /* "root_numpy/src/hist.pyx":136
 *     cdef long i
 *     cdef int bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 */

#line 136 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (__pyx_v_return_indices != 0);

#line 136 "root_numpy/src/hist.pyx"
  if (__pyx_t_7) {

    /* "root_numpy/src/hist.pyx":137
 *     cdef int bin_idx
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)             # <<<<<<<<<<<<<<
 *     if weights is not None:
 *         for i from 0 <= i < size:
 */

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_5 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 137 "root_numpy/src/hist.pyx"
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_5);

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_GIVEREF(__pyx_t_5);

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_5 = 0;

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 137 "root_numpy/src/hist.pyx"
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 137 "root_numpy/src/hist.pyx"
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_6 = ((PyArrayObject *)__pyx_t_8);

#line 137 "root_numpy/src/hist.pyx"
    {

#line 137 "root_numpy/src/hist.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 137 "root_numpy/src/hist.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 137 "root_numpy/src/hist.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_t_6, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack);

#line 137 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 137 "root_numpy/src/hist.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 137 "root_numpy/src/hist.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_idx.rcbuffer->pybuffer, (PyObject*)__pyx_v_idx, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 137 "root_numpy/src/hist.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 137 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 137 "root_numpy/src/hist.pyx"
        } else {

#line 137 "root_numpy/src/hist.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 137 "root_numpy/src/hist.pyx"
        }

#line 137 "root_numpy/src/hist.pyx"
      }

#line 137 "root_numpy/src/hist.pyx"
      __pyx_pybuffernd_idx.diminfo[0].strides = __pyx_pybuffernd_idx.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_idx.diminfo[0].shape = __pyx_pybuffernd_idx.rcbuffer->pybuffer.shape[0];

#line 137 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/hist.pyx"
    }

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_6 = 0;

#line 137 "root_numpy/src/hist.pyx"
    __Pyx_DECREF_SET(__pyx_v_idx, ((PyArrayObject *)__pyx_t_8));

#line 137 "root_numpy/src/hist.pyx"
    __pyx_t_8 = 0;

#line 137 "root_numpy/src/hist.pyx"
    goto __pyx_L3;

#line 137 "root_numpy/src/hist.pyx"
  }

#line 137 "root_numpy/src/hist.pyx"
  __pyx_L3:;

  /* "root_numpy/src/hist.pyx":138
 *     if return_indices:
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:             # <<<<<<<<<<<<<<
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 */

#line 138 "root_numpy/src/hist.pyx"
  __pyx_t_7 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 138 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_t_7 != 0);

#line 138 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":139
 *         idx = np.empty(size, dtype=np.int)
 *     if weights is not None:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 *             if return_indices:
 */

#line 139 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 139 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":140
 *     if weights is not None:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_15 = __pyx_v_i;

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_16 = 0;

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 140 "root_numpy/src/hist.pyx"
      if (__pyx_t_15 < 0) {

#line 140 "root_numpy/src/hist.pyx"
        __pyx_t_15 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 140 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_15 < 0)) __pyx_t_9 = 0;
      } else 
#line 140 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_15 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 140 "root_numpy/src/hist.pyx"
      if (__pyx_t_16 < 0) {

#line 140 "root_numpy/src/hist.pyx"
        __pyx_t_16 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 140 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_16 < 0)) __pyx_t_9 = 1;
      } else 
#line 140 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_16 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 140 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 140 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 140 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 140 "root_numpy/src/hist.pyx"
      }

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_17 = __pyx_v_i;

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_18 = 1;

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 140 "root_numpy/src/hist.pyx"
      if (__pyx_t_17 < 0) {

#line 140 "root_numpy/src/hist.pyx"
        __pyx_t_17 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 140 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_17 < 0)) __pyx_t_9 = 0;
      } else 
#line 140 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_17 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 140 "root_numpy/src/hist.pyx"
      if (__pyx_t_18 < 0) {

#line 140 "root_numpy/src/hist.pyx"
        __pyx_t_18 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 140 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_9 = 1;
      } else 
#line 140 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 140 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 140 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 140 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 140 "root_numpy/src/hist.pyx"
      }

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_19 = __pyx_v_i;

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_20 = 2;

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 140 "root_numpy/src/hist.pyx"
      if (__pyx_t_19 < 0) {

#line 140 "root_numpy/src/hist.pyx"
        __pyx_t_19 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 140 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_19 < 0)) __pyx_t_9 = 0;
      } else 
#line 140 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 140 "root_numpy/src/hist.pyx"
      if (__pyx_t_20 < 0) {

#line 140 "root_numpy/src/hist.pyx"
        __pyx_t_20 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 140 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_9 = 1;
      } else 
#line 140 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 140 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 140 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 140 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 140 "root_numpy/src/hist.pyx"
      }

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_21 = __pyx_v_i;

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_22 = 3;

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 140 "root_numpy/src/hist.pyx"
      if (__pyx_t_21 < 0) {

#line 140 "root_numpy/src/hist.pyx"
        __pyx_t_21 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 140 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_21 < 0)) __pyx_t_9 = 0;
      } else 
#line 140 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_21 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 140 "root_numpy/src/hist.pyx"
      if (__pyx_t_22 < 0) {

#line 140 "root_numpy/src/hist.pyx"
        __pyx_t_22 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 140 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 1;
      } else 
#line 140 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 140 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 140 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 140 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 140 "root_numpy/src/hist.pyx"
      }

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_23 = __pyx_v_i;

#line 140 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 140 "root_numpy/src/hist.pyx"
      if (__pyx_t_23 < 0) {

#line 140 "root_numpy/src/hist.pyx"
        __pyx_t_23 += __pyx_pybuffernd_weights.diminfo[0].shape;

#line 140 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_23 < 0)) __pyx_t_9 = 0;
      } else 
#line 140 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_weights.diminfo[0].shape)) __pyx_t_9 = 0;

#line 140 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 140 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 140 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 140 "root_numpy/src/hist.pyx"
      }

#line 140 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_15, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_16, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_17, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_20, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_21, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_22, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_weights.diminfo[0].strides)));

      /* "root_numpy/src/hist.pyx":141
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     else:
 */

#line 141 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 141 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":142
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3], weights[i])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     else:
 *         for i from 0 <= i < size:
 */

#line 142 "root_numpy/src/hist.pyx"
        __pyx_t_24 = __pyx_v_i;

#line 142 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 142 "root_numpy/src/hist.pyx"
        if (__pyx_t_24 < 0) {

#line 142 "root_numpy/src/hist.pyx"
          __pyx_t_24 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 142 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 0;
        } else 
#line 142 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 142 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 142 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 142 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 142 "root_numpy/src/hist.pyx"
        }

#line 142 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 142 "root_numpy/src/hist.pyx"
        goto __pyx_L7;

#line 142 "root_numpy/src/hist.pyx"
      }

#line 142 "root_numpy/src/hist.pyx"
      __pyx_L7:;

#line 142 "root_numpy/src/hist.pyx"
    }

#line 142 "root_numpy/src/hist.pyx"
    goto __pyx_L4;

#line 142 "root_numpy/src/hist.pyx"
  }

#line 142 "root_numpy/src/hist.pyx"
  /*else*/ {

    /* "root_numpy/src/hist.pyx":144
 *                 idx[i] = bin_idx
 *     else:
 *         for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 *             if return_indices:
 */

#line 144 "root_numpy/src/hist.pyx"
    __pyx_t_14 = __pyx_v_size;

#line 144 "root_numpy/src/hist.pyx"
    for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_14; __pyx_v_i++) {

      /* "root_numpy/src/hist.pyx":145
 *     else:
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3])             # <<<<<<<<<<<<<<
 *             if return_indices:
 *                 idx[i] = bin_idx
 */

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_25 = __pyx_v_i;

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_26 = 0;

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 145 "root_numpy/src/hist.pyx"
      if (__pyx_t_25 < 0) {

#line 145 "root_numpy/src/hist.pyx"
        __pyx_t_25 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 145 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
      } else 
#line 145 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 145 "root_numpy/src/hist.pyx"
      if (__pyx_t_26 < 0) {

#line 145 "root_numpy/src/hist.pyx"
        __pyx_t_26 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 145 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_26 < 0)) __pyx_t_9 = 1;
      } else 
#line 145 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 145 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 145 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 145 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 145 "root_numpy/src/hist.pyx"
      }

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_27 = __pyx_v_i;

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_28 = 1;

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 145 "root_numpy/src/hist.pyx"
      if (__pyx_t_27 < 0) {

#line 145 "root_numpy/src/hist.pyx"
        __pyx_t_27 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 145 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_27 < 0)) __pyx_t_9 = 0;
      } else 
#line 145 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 145 "root_numpy/src/hist.pyx"
      if (__pyx_t_28 < 0) {

#line 145 "root_numpy/src/hist.pyx"
        __pyx_t_28 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 145 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_28 < 0)) __pyx_t_9 = 1;
      } else 
#line 145 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 145 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 145 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 145 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 145 "root_numpy/src/hist.pyx"
      }

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_29 = __pyx_v_i;

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_30 = 2;

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 145 "root_numpy/src/hist.pyx"
      if (__pyx_t_29 < 0) {

#line 145 "root_numpy/src/hist.pyx"
        __pyx_t_29 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 145 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_29 < 0)) __pyx_t_9 = 0;
      } else 
#line 145 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 145 "root_numpy/src/hist.pyx"
      if (__pyx_t_30 < 0) {

#line 145 "root_numpy/src/hist.pyx"
        __pyx_t_30 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 145 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_30 < 0)) __pyx_t_9 = 1;
      } else 
#line 145 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_30 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 145 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 145 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 145 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 145 "root_numpy/src/hist.pyx"
      }

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_31 = __pyx_v_i;

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_32 = 3;

#line 145 "root_numpy/src/hist.pyx"
      __pyx_t_9 = -1;

#line 145 "root_numpy/src/hist.pyx"
      if (__pyx_t_31 < 0) {

#line 145 "root_numpy/src/hist.pyx"
        __pyx_t_31 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 145 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_31 < 0)) __pyx_t_9 = 0;
      } else 
#line 145 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_31 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 145 "root_numpy/src/hist.pyx"
      if (__pyx_t_32 < 0) {

#line 145 "root_numpy/src/hist.pyx"
        __pyx_t_32 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 145 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_32 < 0)) __pyx_t_9 = 1;
      } else 
#line 145 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_32 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 145 "root_numpy/src/hist.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 145 "root_numpy/src/hist.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 145 "root_numpy/src/hist.pyx"
        {__pyx_filename = __pyx_f[5]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 145 "root_numpy/src/hist.pyx"
      }

#line 145 "root_numpy/src/hist.pyx"
      __pyx_v_bin_idx = __pyx_v__profile->Fill((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_26, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_28, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_30, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_31, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_32, __pyx_pybuffernd_array.diminfo[1].strides)));

      /* "root_numpy/src/hist.pyx":146
 *         for i from 0 <= i < size:
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 *             if return_indices:             # <<<<<<<<<<<<<<
 *                 idx[i] = bin_idx
 *     if return_indices:
 */

#line 146 "root_numpy/src/hist.pyx"
      __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 146 "root_numpy/src/hist.pyx"
      if (__pyx_t_13) {

        /* "root_numpy/src/hist.pyx":147
 *             bin_idx = _profile.Fill(array[i, 0], array[i, 1], array[i, 2], array[i, 3])
 *             if return_indices:
 *                 idx[i] = bin_idx             # <<<<<<<<<<<<<<
 *     if return_indices:
 *         return idx
 */

#line 147 "root_numpy/src/hist.pyx"
        __pyx_t_33 = __pyx_v_i;

#line 147 "root_numpy/src/hist.pyx"
        __pyx_t_9 = -1;

#line 147 "root_numpy/src/hist.pyx"
        if (__pyx_t_33 < 0) {

#line 147 "root_numpy/src/hist.pyx"
          __pyx_t_33 += __pyx_pybuffernd_idx.diminfo[0].shape;

#line 147 "root_numpy/src/hist.pyx"
          if (unlikely(__pyx_t_33 < 0)) __pyx_t_9 = 0;
        } else 
#line 147 "root_numpy/src/hist.pyx"
if (unlikely(__pyx_t_33 >= __pyx_pybuffernd_idx.diminfo[0].shape)) __pyx_t_9 = 0;

#line 147 "root_numpy/src/hist.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 147 "root_numpy/src/hist.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 147 "root_numpy/src/hist.pyx"
          {__pyx_filename = __pyx_f[5]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 147 "root_numpy/src/hist.pyx"
        }

#line 147 "root_numpy/src/hist.pyx"
        *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_idx.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_idx.diminfo[0].strides) = __pyx_v_bin_idx;

#line 147 "root_numpy/src/hist.pyx"
        goto __pyx_L10;

#line 147 "root_numpy/src/hist.pyx"
      }

#line 147 "root_numpy/src/hist.pyx"
      __pyx_L10:;

#line 147 "root_numpy/src/hist.pyx"
    }

#line 147 "root_numpy/src/hist.pyx"
  }

#line 147 "root_numpy/src/hist.pyx"
  __pyx_L4:;

  /* "root_numpy/src/hist.pyx":148
 *             if return_indices:
 *                 idx[i] = bin_idx
 *     if return_indices:             # <<<<<<<<<<<<<<
 *         return idx
 */

#line 148 "root_numpy/src/hist.pyx"
  __pyx_t_13 = (__pyx_v_return_indices != 0);

#line 148 "root_numpy/src/hist.pyx"
  if (__pyx_t_13) {

    /* "root_numpy/src/hist.pyx":149
 *                 idx[i] = bin_idx
 *     if return_indices:
 *         return idx             # <<<<<<<<<<<<<<
 */

#line 149 "root_numpy/src/hist.pyx"
    __Pyx_XDECREF(__pyx_r);

#line 149 "root_numpy/src/hist.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_idx));

#line 149 "root_numpy/src/hist.pyx"
    __pyx_r = ((PyObject *)__pyx_v_idx);

#line 149 "root_numpy/src/hist.pyx"
    goto __pyx_L0;

#line 149 "root_numpy/src/hist.pyx"
  }

  /* "root_numpy/src/hist.pyx":126
 *         return idx
 * 
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 126 "root_numpy/src/hist.pyx"


#line 126 "root_numpy/src/hist.pyx"
  /* function exit code */

#line 126 "root_numpy/src/hist.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 126 "root_numpy/src/hist.pyx"
  goto __pyx_L0;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_L1_error:;

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 126 "root_numpy/src/hist.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 126 "root_numpy/src/hist.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_p3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 126 "root_numpy/src/hist.pyx"
  __pyx_r = NULL;

#line 126 "root_numpy/src/hist.pyx"
  goto __pyx_L2;

#line 126 "root_numpy/src/hist.pyx"
  __pyx_L0:;

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_idx.rcbuffer->pybuffer);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 126 "root_numpy/src/hist.pyx"
  __pyx_L2:;

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_idx);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_RefNannyFinishContext();

#line 126 "root_numpy/src/hist.pyx"
  return __pyx_r;

#line 126 "root_numpy/src/hist.pyx"
}

/* "root_numpy/src/graph.pyx":1
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 1 "root_numpy/src/graph.pyx"


#line 1 "root_numpy/src/graph.pyx"
/* Python wrapper */

#line 1 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pw_13_librootnumpy_57fill_g1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_57fill_g1 = 
#line 1 "root_numpy/src/graph.pyx"
{"fill_g1", (PyCFunction)__pyx_pw_13_librootnumpy_57fill_g1, METH_VARARGS|METH_KEYWORDS, 0};

#line 1 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pw_13_librootnumpy_57fill_g1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0
#line 1 "root_numpy/src/graph.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 1 "root_numpy/src/graph.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1 "root_numpy/src/graph.pyx"
  PyObject *__pyx_r = 0;

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyDeclarations

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_RefNannySetupContext("fill_g1 (wrapper)", 0);

#line 1 "root_numpy/src/graph.pyx"
  {

#line 1 "root_numpy/src/graph.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_array,0};

#line 1 "root_numpy/src/graph.pyx"
    PyObject* values[2] = {0,0};

#line 1 "root_numpy/src/graph.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1 "root_numpy/src/graph.pyx"
      Py_ssize_t kw_args;

#line 1 "root_numpy/src/graph.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1 "root_numpy/src/graph.pyx"
      switch (pos_args) {
        case  2: 
#line 1 "root_numpy/src/graph.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1 "root_numpy/src/graph.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1 "root_numpy/src/graph.pyx"
        case  0: break;
        default: 
#line 1 "root_numpy/src/graph.pyx"
goto __pyx_L5_argtuple_error;

#line 1 "root_numpy/src/graph.pyx"
      }

#line 1 "root_numpy/src/graph.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1 "root_numpy/src/graph.pyx"
      switch (pos_args) {

#line 1 "root_numpy/src/graph.pyx"
        case  0:

#line 1 "root_numpy/src/graph.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else 
#line 1 "root_numpy/src/graph.pyx"
goto __pyx_L5_argtuple_error;

#line 1 "root_numpy/src/graph.pyx"
        case  1:

#line 1 "root_numpy/src/graph.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 1 "root_numpy/src/graph.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_g1", 1, 2, 2, 1); 
#line 1 "root_numpy/src/graph.pyx"
{__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1 "root_numpy/src/graph.pyx"
        }

#line 1 "root_numpy/src/graph.pyx"
      }

#line 1 "root_numpy/src/graph.pyx"
      if (unlikely(kw_args > 0)) {

#line 1 "root_numpy/src/graph.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_g1") < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1 "root_numpy/src/graph.pyx"
      }

#line 1 "root_numpy/src/graph.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1 "root_numpy/src/graph.pyx"
      goto __pyx_L5_argtuple_error;

#line 1 "root_numpy/src/graph.pyx"
    } else {

#line 1 "root_numpy/src/graph.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1 "root_numpy/src/graph.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1 "root_numpy/src/graph.pyx"
    }

#line 1 "root_numpy/src/graph.pyx"
    __pyx_v_graph = values[0];

#line 1 "root_numpy/src/graph.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 1 "root_numpy/src/graph.pyx"
  }

#line 1 "root_numpy/src/graph.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_g1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1 "root_numpy/src/graph.pyx"
{__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1 "root_numpy/src/graph.pyx"
  __pyx_L3_error:;

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_g1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "root_numpy/src/graph.pyx"
  return NULL;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1 "root_numpy/src/graph.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 2; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1 "root_numpy/src/graph.pyx"
__pyx_pf_13_librootnumpy_56fill_g1(__pyx_self, __pyx_v_graph, __pyx_v_array);

#line 1 "root_numpy/src/graph.pyx"


#line 1 "root_numpy/src/graph.pyx"
  /* function exit code */

#line 1 "root_numpy/src/graph.pyx"
  goto __pyx_L0;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_L1_error:;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_r = NULL;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_L0:;

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "root_numpy/src/graph.pyx"
  return __pyx_r;

#line 1 "root_numpy/src/graph.pyx"
}

#line 1 "root_numpy/src/graph.pyx"


#line 1 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pf_13_librootnumpy_56fill_g1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array) {
  TGraph *__pyx_v__graph
#line 1 "root_numpy/src/graph.pyx"
;
  int __pyx_v_size
#line 1 "root_numpy/src/graph.pyx"
;
  int __pyx_v_i
#line 1 "root_numpy/src/graph.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 1 "root_numpy/src/graph.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 1 "root_numpy/src/graph.pyx"
;

#line 1 "root_numpy/src/graph.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_RefNannySetupContext("fill_g1", 0);

#line 1 "root_numpy/src/graph.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 1 "root_numpy/src/graph.pyx"
  {

#line 1 "root_numpy/src/graph.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 1 "root_numpy/src/graph.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/graph.pyx"
  }

#line 1 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/graph.pyx":4
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)             # <<<<<<<<<<<<<<
 *     cdef int size = array.shape[0]
 *     cdef int i
 */

#line 4 "root_numpy/src/graph.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_graph); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/graph.pyx"
  __pyx_v__graph = ((TGraph *)__pyx_t_1);

  /* "root_numpy/src/graph.pyx":5
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 *     cdef int size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int i
 *     _graph.Set(size)
 */

#line 5 "root_numpy/src/graph.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/graph.pyx":7
 *     cdef int size = array.shape[0]
 *     cdef int i
 *     _graph.Set(size)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 */

#line 7 "root_numpy/src/graph.pyx"
  __pyx_v__graph->Set(__pyx_v_size);

  /* "root_numpy/src/graph.pyx":8
 *     cdef int i
 *     _graph.Set(size)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 */

#line 8 "root_numpy/src/graph.pyx"
  __pyx_t_2 = __pyx_v_size;

#line 8 "root_numpy/src/graph.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {

    /* "root_numpy/src/graph.pyx":9
 *     _graph.Set(size)
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])             # <<<<<<<<<<<<<<
 * 
 * def fill_g2(graph,
 */

#line 9 "root_numpy/src/graph.pyx"
    __pyx_t_3 = __pyx_v_i;

#line 9 "root_numpy/src/graph.pyx"
    __pyx_t_4 = 0;

#line 9 "root_numpy/src/graph.pyx"
    __pyx_t_5 = -1;

#line 9 "root_numpy/src/graph.pyx"
    if (__pyx_t_3 < 0) {

#line 9 "root_numpy/src/graph.pyx"
      __pyx_t_3 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 9 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_5 = 0;
    } else 
#line 9 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_5 = 0;

#line 9 "root_numpy/src/graph.pyx"
    if (__pyx_t_4 < 0) {

#line 9 "root_numpy/src/graph.pyx"
      __pyx_t_4 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 9 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 1;
    } else 
#line 9 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_5 = 1;

#line 9 "root_numpy/src/graph.pyx"
    if (unlikely(__pyx_t_5 != -1)) {

#line 9 "root_numpy/src/graph.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_5);

#line 9 "root_numpy/src/graph.pyx"
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/graph.pyx"
    }

#line 9 "root_numpy/src/graph.pyx"
    __pyx_t_5 = __pyx_v_i;

#line 9 "root_numpy/src/graph.pyx"
    __pyx_t_6 = 1;

#line 9 "root_numpy/src/graph.pyx"
    __pyx_t_7 = -1;

#line 9 "root_numpy/src/graph.pyx"
    if (__pyx_t_5 < 0) {

#line 9 "root_numpy/src/graph.pyx"
      __pyx_t_5 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 9 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_7 = 0;
    } else 
#line 9 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_7 = 0;

#line 9 "root_numpy/src/graph.pyx"
    if (__pyx_t_6 < 0) {

#line 9 "root_numpy/src/graph.pyx"
      __pyx_t_6 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 9 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
    } else 
#line 9 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_7 = 1;

#line 9 "root_numpy/src/graph.pyx"
    if (unlikely(__pyx_t_7 != -1)) {

#line 9 "root_numpy/src/graph.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_7);

#line 9 "root_numpy/src/graph.pyx"
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/graph.pyx"
    }

#line 9 "root_numpy/src/graph.pyx"
    __pyx_v__graph->SetPoint(__pyx_v_i, (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_array.diminfo[1].strides)));

#line 9 "root_numpy/src/graph.pyx"
  }

  /* "root_numpy/src/graph.pyx":1
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 1 "root_numpy/src/graph.pyx"


#line 1 "root_numpy/src/graph.pyx"
  /* function exit code */

#line 1 "root_numpy/src/graph.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 1 "root_numpy/src/graph.pyx"
  goto __pyx_L0;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_L1_error:;

#line 1 "root_numpy/src/graph.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 1 "root_numpy/src/graph.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 1 "root_numpy/src/graph.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_g1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "root_numpy/src/graph.pyx"
  __pyx_r = NULL;

#line 1 "root_numpy/src/graph.pyx"
  goto __pyx_L2;

#line 1 "root_numpy/src/graph.pyx"
  __pyx_L0:;

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 1 "root_numpy/src/graph.pyx"
  __pyx_L2:;

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "root_numpy/src/graph.pyx"
  return __pyx_r;

#line 1 "root_numpy/src/graph.pyx"
}

/* "root_numpy/src/graph.pyx":11
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 11 "root_numpy/src/graph.pyx"


#line 11 "root_numpy/src/graph.pyx"
/* Python wrapper */

#line 11 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pw_13_librootnumpy_59fill_g2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_59fill_g2 = 
#line 11 "root_numpy/src/graph.pyx"
{"fill_g2", (PyCFunction)__pyx_pw_13_librootnumpy_59fill_g2, METH_VARARGS|METH_KEYWORDS, 0};

#line 11 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pw_13_librootnumpy_59fill_g2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0
#line 11 "root_numpy/src/graph.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 11 "root_numpy/src/graph.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 11 "root_numpy/src/graph.pyx"
  PyObject *__pyx_r = 0;

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyDeclarations

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_RefNannySetupContext("fill_g2 (wrapper)", 0);

#line 11 "root_numpy/src/graph.pyx"
  {

#line 11 "root_numpy/src/graph.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_array,0};

#line 11 "root_numpy/src/graph.pyx"
    PyObject* values[2] = {0,0};

#line 11 "root_numpy/src/graph.pyx"
    if (unlikely(__pyx_kwds)) {

#line 11 "root_numpy/src/graph.pyx"
      Py_ssize_t kw_args;

#line 11 "root_numpy/src/graph.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 11 "root_numpy/src/graph.pyx"
      switch (pos_args) {
        case  2: 
#line 11 "root_numpy/src/graph.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 11 "root_numpy/src/graph.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 11 "root_numpy/src/graph.pyx"
        case  0: break;
        default: 
#line 11 "root_numpy/src/graph.pyx"
goto __pyx_L5_argtuple_error;

#line 11 "root_numpy/src/graph.pyx"
      }

#line 11 "root_numpy/src/graph.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 11 "root_numpy/src/graph.pyx"
      switch (pos_args) {

#line 11 "root_numpy/src/graph.pyx"
        case  0:

#line 11 "root_numpy/src/graph.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else 
#line 11 "root_numpy/src/graph.pyx"
goto __pyx_L5_argtuple_error;

#line 11 "root_numpy/src/graph.pyx"
        case  1:

#line 11 "root_numpy/src/graph.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 11 "root_numpy/src/graph.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("fill_g2", 1, 2, 2, 1); 
#line 11 "root_numpy/src/graph.pyx"
{__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/graph.pyx"
        }

#line 11 "root_numpy/src/graph.pyx"
      }

#line 11 "root_numpy/src/graph.pyx"
      if (unlikely(kw_args > 0)) {

#line 11 "root_numpy/src/graph.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "fill_g2") < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/graph.pyx"
      }

#line 11 "root_numpy/src/graph.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 11 "root_numpy/src/graph.pyx"
      goto __pyx_L5_argtuple_error;

#line 11 "root_numpy/src/graph.pyx"
    } else {

#line 11 "root_numpy/src/graph.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 11 "root_numpy/src/graph.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 11 "root_numpy/src/graph.pyx"
    }

#line 11 "root_numpy/src/graph.pyx"
    __pyx_v_graph = values[0];

#line 11 "root_numpy/src/graph.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 11 "root_numpy/src/graph.pyx"
  }

#line 11 "root_numpy/src/graph.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fill_g2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 11 "root_numpy/src/graph.pyx"
{__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/graph.pyx"
  __pyx_L3_error:;

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_g2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/graph.pyx"
  return NULL;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 11 "root_numpy/src/graph.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 11 "root_numpy/src/graph.pyx"
__pyx_pf_13_librootnumpy_58fill_g2(__pyx_self, __pyx_v_graph, __pyx_v_array);

#line 11 "root_numpy/src/graph.pyx"


#line 11 "root_numpy/src/graph.pyx"
  /* function exit code */

#line 11 "root_numpy/src/graph.pyx"
  goto __pyx_L0;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_L1_error:;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_r = NULL;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_L0:;

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/graph.pyx"
  return __pyx_r;

#line 11 "root_numpy/src/graph.pyx"
}

#line 11 "root_numpy/src/graph.pyx"


#line 11 "root_numpy/src/graph.pyx"
static PyObject *__pyx_pf_13_librootnumpy_58fill_g2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array) {
  TGraph2D *__pyx_v__graph
#line 11 "root_numpy/src/graph.pyx"
;
  int __pyx_v_size
#line 11 "root_numpy/src/graph.pyx"
;
  int __pyx_v_i
#line 11 "root_numpy/src/graph.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 11 "root_numpy/src/graph.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 11 "root_numpy/src/graph.pyx"
;

#line 11 "root_numpy/src/graph.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_RefNannySetupContext("fill_g2", 0);

#line 11 "root_numpy/src/graph.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 11 "root_numpy/src/graph.pyx"
  {

#line 11 "root_numpy/src/graph.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 11 "root_numpy/src/graph.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/graph.pyx"
  }

#line 11 "root_numpy/src/graph.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/graph.pyx":14
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TGraph2D* _graph = <TGraph2D*> PyCObject_AsVoidPtr(graph)             # <<<<<<<<<<<<<<
 *     cdef int size = array.shape[0]
 *     cdef int i
 */

#line 14 "root_numpy/src/graph.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_graph); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/graph.pyx"
  __pyx_v__graph = ((TGraph2D *)__pyx_t_1);

  /* "root_numpy/src/graph.pyx":15
 *     # perform type checking on python side
 *     cdef TGraph2D* _graph = <TGraph2D*> PyCObject_AsVoidPtr(graph)
 *     cdef int size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef int i
 *     _graph.Set(size)
 */

#line 15 "root_numpy/src/graph.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/graph.pyx":17
 *     cdef int size = array.shape[0]
 *     cdef int i
 *     _graph.Set(size)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1], array[i, 2])
 */

#line 17 "root_numpy/src/graph.pyx"
  __pyx_v__graph->Set(__pyx_v_size);

  /* "root_numpy/src/graph.pyx":18
 *     cdef int i
 *     _graph.Set(size)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         _graph.SetPoint(i, array[i, 0], array[i, 1], array[i, 2])
 */

#line 18 "root_numpy/src/graph.pyx"
  __pyx_t_2 = __pyx_v_size;

#line 18 "root_numpy/src/graph.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_2; __pyx_v_i++) {

    /* "root_numpy/src/graph.pyx":19
 *     _graph.Set(size)
 *     for i from 0 <= i < size:
 *         _graph.SetPoint(i, array[i, 0], array[i, 1], array[i, 2])             # <<<<<<<<<<<<<<
 */

#line 19 "root_numpy/src/graph.pyx"
    __pyx_t_3 = __pyx_v_i;

#line 19 "root_numpy/src/graph.pyx"
    __pyx_t_4 = 0;

#line 19 "root_numpy/src/graph.pyx"
    __pyx_t_5 = -1;

#line 19 "root_numpy/src/graph.pyx"
    if (__pyx_t_3 < 0) {

#line 19 "root_numpy/src/graph.pyx"
      __pyx_t_3 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 19 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_3 < 0)) __pyx_t_5 = 0;
    } else 
#line 19 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_3 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_5 = 0;

#line 19 "root_numpy/src/graph.pyx"
    if (__pyx_t_4 < 0) {

#line 19 "root_numpy/src/graph.pyx"
      __pyx_t_4 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 19 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_4 < 0)) __pyx_t_5 = 1;
    } else 
#line 19 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_4 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_5 = 1;

#line 19 "root_numpy/src/graph.pyx"
    if (unlikely(__pyx_t_5 != -1)) {

#line 19 "root_numpy/src/graph.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_5);

#line 19 "root_numpy/src/graph.pyx"
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 19 "root_numpy/src/graph.pyx"
    }

#line 19 "root_numpy/src/graph.pyx"
    __pyx_t_5 = __pyx_v_i;

#line 19 "root_numpy/src/graph.pyx"
    __pyx_t_6 = 1;

#line 19 "root_numpy/src/graph.pyx"
    __pyx_t_7 = -1;

#line 19 "root_numpy/src/graph.pyx"
    if (__pyx_t_5 < 0) {

#line 19 "root_numpy/src/graph.pyx"
      __pyx_t_5 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 19 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_5 < 0)) __pyx_t_7 = 0;
    } else 
#line 19 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_5 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_7 = 0;

#line 19 "root_numpy/src/graph.pyx"
    if (__pyx_t_6 < 0) {

#line 19 "root_numpy/src/graph.pyx"
      __pyx_t_6 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 19 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_6 < 0)) __pyx_t_7 = 1;
    } else 
#line 19 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_6 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_7 = 1;

#line 19 "root_numpy/src/graph.pyx"
    if (unlikely(__pyx_t_7 != -1)) {

#line 19 "root_numpy/src/graph.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_7);

#line 19 "root_numpy/src/graph.pyx"
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 19 "root_numpy/src/graph.pyx"
    }

#line 19 "root_numpy/src/graph.pyx"
    __pyx_t_7 = __pyx_v_i;

#line 19 "root_numpy/src/graph.pyx"
    __pyx_t_8 = 2;

#line 19 "root_numpy/src/graph.pyx"
    __pyx_t_9 = -1;

#line 19 "root_numpy/src/graph.pyx"
    if (__pyx_t_7 < 0) {

#line 19 "root_numpy/src/graph.pyx"
      __pyx_t_7 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 19 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_7 < 0)) __pyx_t_9 = 0;
    } else 
#line 19 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_9 = 0;

#line 19 "root_numpy/src/graph.pyx"
    if (__pyx_t_8 < 0) {

#line 19 "root_numpy/src/graph.pyx"
      __pyx_t_8 += __pyx_pybuffernd_array.diminfo[1].shape;

#line 19 "root_numpy/src/graph.pyx"
      if (unlikely(__pyx_t_8 < 0)) __pyx_t_9 = 1;
    } else 
#line 19 "root_numpy/src/graph.pyx"
if (unlikely(__pyx_t_8 >= __pyx_pybuffernd_array.diminfo[1].shape)) __pyx_t_9 = 1;

#line 19 "root_numpy/src/graph.pyx"
    if (unlikely(__pyx_t_9 != -1)) {

#line 19 "root_numpy/src/graph.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 19 "root_numpy/src/graph.pyx"
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 19 "root_numpy/src/graph.pyx"
    }

#line 19 "root_numpy/src/graph.pyx"
    __pyx_v__graph->SetPoint(__pyx_v_i, (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_3, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_4, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_6, __pyx_pybuffernd_array.diminfo[1].strides)), (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_array.diminfo[0].strides, __pyx_t_8, __pyx_pybuffernd_array.diminfo[1].strides)));

#line 19 "root_numpy/src/graph.pyx"
  }

  /* "root_numpy/src/graph.pyx":11
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 11 "root_numpy/src/graph.pyx"


#line 11 "root_numpy/src/graph.pyx"
  /* function exit code */

#line 11 "root_numpy/src/graph.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 11 "root_numpy/src/graph.pyx"
  goto __pyx_L0;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_L1_error:;

#line 11 "root_numpy/src/graph.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 11 "root_numpy/src/graph.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 11 "root_numpy/src/graph.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_AddTraceback("_librootnumpy.fill_g2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "root_numpy/src/graph.pyx"
  __pyx_r = NULL;

#line 11 "root_numpy/src/graph.pyx"
  goto __pyx_L2;

#line 11 "root_numpy/src/graph.pyx"
  __pyx_L0:;

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 11 "root_numpy/src/graph.pyx"
  __pyx_L2:;

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/graph.pyx"
  return __pyx_r;

#line 11 "root_numpy/src/graph.pyx"
}

/* "root_numpy/src/evaluate.pyx":1
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 1 "root_numpy/src/evaluate.pyx"


#line 1 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 1 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_61evaluate_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_61evaluate_h1 = 
#line 1 "root_numpy/src/evaluate.pyx"
{"evaluate_h1", (PyCFunction)__pyx_pw_13_librootnumpy_61evaluate_h1, METH_VARARGS|METH_KEYWORDS, 0};

#line 1 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_61evaluate_h1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 1 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 1 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h1 (wrapper)", 0);

#line 1 "root_numpy/src/evaluate.pyx"
  {

#line 1 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,0};

#line 1 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 1 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 1 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 1 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 1 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 1 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 1 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 1 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 1 "root_numpy/src/evaluate.pyx"
      }

#line 1 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 1 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 1 "root_numpy/src/evaluate.pyx"
        case  0:

#line 1 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 1 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 1 "root_numpy/src/evaluate.pyx"
        case  1:

#line 1 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 1 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_h1", 1, 2, 2, 1); 
#line 1 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1 "root_numpy/src/evaluate.pyx"
        }

#line 1 "root_numpy/src/evaluate.pyx"
      }

#line 1 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 1 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_h1") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1 "root_numpy/src/evaluate.pyx"
      }

#line 1 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 1 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 1 "root_numpy/src/evaluate.pyx"
    } else {

#line 1 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 1 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 1 "root_numpy/src/evaluate.pyx"
    }

#line 1 "root_numpy/src/evaluate.pyx"
    __pyx_v_hist = values[0];

#line 1 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 1 "root_numpy/src/evaluate.pyx"
  }

#line 1 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_h1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 1 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 1 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 1 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_60evaluate_h1(__pyx_self, __pyx_v_hist, __pyx_v_array);

#line 1 "root_numpy/src/evaluate.pyx"


#line 1 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 1 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 1 "root_numpy/src/evaluate.pyx"
}

#line 1 "root_numpy/src/evaluate.pyx"


#line 1 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_60evaluate_h1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array) {
  TH1 *__pyx_v__hist
#line 1 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 1 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 1 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 1 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 1 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 1 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 1 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 1 "root_numpy/src/evaluate.pyx"
;

#line 1 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h1", 0);

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 1 "root_numpy/src/evaluate.pyx"
  {

#line 1 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 1 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/evaluate.pyx"
  }

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":3
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3 "root_numpy/src/evaluate.pyx"
  __pyx_v__hist = ((TH1 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":4
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 4 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":5
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 5 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 5 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 5 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 5 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 5 "root_numpy/src/evaluate.pyx"
  {

#line 5 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 5 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 5 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 5 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 5 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 5 "root_numpy/src/evaluate.pyx"
    }

#line 5 "root_numpy/src/evaluate.pyx"
  }

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 5 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":7
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i]))
 *     return values
 */

#line 7 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 7 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":8
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i]))             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 8 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 8 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 8 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_9 < 0) {

#line 8 "root_numpy/src/evaluate.pyx"
      __pyx_t_9 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 8 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else 
#line 8 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_10 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 8 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 8 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/evaluate.pyx"
    }

#line 8 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 8 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 8 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_11 < 0) {

#line 8 "root_numpy/src/evaluate.pyx"
      __pyx_t_11 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 8 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
    } else 
#line 8 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_10 = 0;

#line 8 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 8 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 8 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/evaluate.pyx"
    }

#line 8 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__hist->GetBinContent(__pyx_v__hist->FindBin((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides))));

#line 8 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":9
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i]))
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 9 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 9 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 9 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 9 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":1
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 1 "root_numpy/src/evaluate.pyx"


#line 1 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 1 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 1 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 1 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 1 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 1 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 1 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 1 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":12
 * 
 * 
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 12 "root_numpy/src/evaluate.pyx"


#line 12 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 12 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_63evaluate_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_63evaluate_h2 = 
#line 12 "root_numpy/src/evaluate.pyx"
{"evaluate_h2", (PyCFunction)__pyx_pw_13_librootnumpy_63evaluate_h2, METH_VARARGS|METH_KEYWORDS, 0};

#line 12 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_63evaluate_h2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 12 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 12 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 12 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h2 (wrapper)", 0);

#line 12 "root_numpy/src/evaluate.pyx"
  {

#line 12 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,0};

#line 12 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 12 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 12 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 12 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 12 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 12 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 12 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 12 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 12 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 12 "root_numpy/src/evaluate.pyx"
      }

#line 12 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 12 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 12 "root_numpy/src/evaluate.pyx"
        case  0:

#line 12 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 12 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 12 "root_numpy/src/evaluate.pyx"
        case  1:

#line 12 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 12 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_h2", 1, 2, 2, 1); 
#line 12 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 12 "root_numpy/src/evaluate.pyx"
        }

#line 12 "root_numpy/src/evaluate.pyx"
      }

#line 12 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 12 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_h2") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 12 "root_numpy/src/evaluate.pyx"
      }

#line 12 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 12 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 12 "root_numpy/src/evaluate.pyx"
    } else {

#line 12 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 12 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 12 "root_numpy/src/evaluate.pyx"
    }

#line 12 "root_numpy/src/evaluate.pyx"
    __pyx_v_hist = values[0];

#line 12 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 12 "root_numpy/src/evaluate.pyx"
  }

#line 12 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_h2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 12 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 12 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 12 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 12 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_62evaluate_h2(__pyx_self, __pyx_v_hist, __pyx_v_array);

#line 12 "root_numpy/src/evaluate.pyx"


#line 12 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 12 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 12 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 12 "root_numpy/src/evaluate.pyx"
}

#line 12 "root_numpy/src/evaluate.pyx"


#line 12 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_62evaluate_h2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array) {
  TH2 *__pyx_v__hist
#line 12 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 12 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 12 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 12 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 12 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 12 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 12 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 12 "root_numpy/src/evaluate.pyx"
;

#line 12 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h2", 0);

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 12 "root_numpy/src/evaluate.pyx"
  {

#line 12 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 12 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/evaluate.pyx"
  }

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":14
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 14 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/evaluate.pyx"
  __pyx_v__hist = ((TH2 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":15
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 15 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":16
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 16 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 16 "root_numpy/src/evaluate.pyx"
  {

#line 16 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 16 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 16 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 16 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 16 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 16 "root_numpy/src/evaluate.pyx"
    }

#line 16 "root_numpy/src/evaluate.pyx"
  }

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 16 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":18
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i][0], array[i][1]))
 *     return values
 */

#line 18 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 18 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":19
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i][0], array[i][1]))             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 19 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 19 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 19 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 19 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 19 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 19 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 19 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 19 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 19 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 19 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 19 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 19 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 19 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 19 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 19 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 19 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = -1;

#line 19 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_11 < 0) {

#line 19 "root_numpy/src/evaluate.pyx"
      __pyx_t_11 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 19 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 0;
    } else 
#line 19 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_12 = 0;

#line 19 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_12 != -1)) {

#line 19 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_12);

#line 19 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 19 "root_numpy/src/evaluate.pyx"
    }

#line 19 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__hist->GetBinContent(__pyx_v__hist->FindBin(__pyx_t_9, __pyx_t_10));

#line 19 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":20
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i][0], array[i][1]))
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 20 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 20 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 20 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 20 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":12
 * 
 * 
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 12 "root_numpy/src/evaluate.pyx"


#line 12 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 12 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 12 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 12 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 12 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 12 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 12 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 12 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":23
 * 
 * 
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 23 "root_numpy/src/evaluate.pyx"


#line 23 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 23 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_65evaluate_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_65evaluate_h3 = 
#line 23 "root_numpy/src/evaluate.pyx"
{"evaluate_h3", (PyCFunction)__pyx_pw_13_librootnumpy_65evaluate_h3, METH_VARARGS|METH_KEYWORDS, 0};

#line 23 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_65evaluate_h3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_hist = 0
#line 23 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 23 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 23 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h3 (wrapper)", 0);

#line 23 "root_numpy/src/evaluate.pyx"
  {

#line 23 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_hist,&__pyx_n_s_array,0};

#line 23 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 23 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 23 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 23 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 23 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 23 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 23 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 23 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 23 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 23 "root_numpy/src/evaluate.pyx"
      }

#line 23 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 23 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 23 "root_numpy/src/evaluate.pyx"
        case  0:

#line 23 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_hist)) != 0)) kw_args--;
        else 
#line 23 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 23 "root_numpy/src/evaluate.pyx"
        case  1:

#line 23 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 23 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_h3", 1, 2, 2, 1); 
#line 23 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 23 "root_numpy/src/evaluate.pyx"
        }

#line 23 "root_numpy/src/evaluate.pyx"
      }

#line 23 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 23 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_h3") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 23 "root_numpy/src/evaluate.pyx"
      }

#line 23 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 23 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 23 "root_numpy/src/evaluate.pyx"
    } else {

#line 23 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 23 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 23 "root_numpy/src/evaluate.pyx"
    }

#line 23 "root_numpy/src/evaluate.pyx"
    __pyx_v_hist = values[0];

#line 23 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 23 "root_numpy/src/evaluate.pyx"
  }

#line 23 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_h3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 23 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 23 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 23 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_64evaluate_h3(__pyx_self, __pyx_v_hist, __pyx_v_array);

#line 23 "root_numpy/src/evaluate.pyx"


#line 23 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 23 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 23 "root_numpy/src/evaluate.pyx"
}

#line 23 "root_numpy/src/evaluate.pyx"


#line 23 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_64evaluate_h3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_hist, PyArrayObject *__pyx_v_array) {
  TH3 *__pyx_v__hist
#line 23 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 23 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 23 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 23 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 23 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 23 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 23 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 23 "root_numpy/src/evaluate.pyx"
;

#line 23 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_h3", 0);

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 23 "root_numpy/src/evaluate.pyx"
  {

#line 23 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 23 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/evaluate.pyx"
  }

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":25
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 25 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_hist); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "root_numpy/src/evaluate.pyx"
  __pyx_v__hist = ((TH3 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":26
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 26 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":27
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 27 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 27 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 27 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 27 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 27 "root_numpy/src/evaluate.pyx"
  {

#line 27 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 27 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 27 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 27 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 27 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 27 "root_numpy/src/evaluate.pyx"
    }

#line 27 "root_numpy/src/evaluate.pyx"
  }

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 27 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":29
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i][0], array[i][1], array[i][2]))
 *     return values
 */

#line 29 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 29 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":30
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i][0], array[i][1], array[i][2]))             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = __pyx_v_i;

#line 30 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = -1;

#line 30 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_12 < 0) {

#line 30 "root_numpy/src/evaluate.pyx"
      __pyx_t_12 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 30 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 0;
    } else 
#line 30 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_13 = 0;

#line 30 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_13 != -1)) {

#line 30 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_13);

#line 30 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/evaluate.pyx"
    }

#line 30 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__hist->GetBinContent(__pyx_v__hist->FindBin(__pyx_t_9, __pyx_t_10, __pyx_t_11));

#line 30 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":31
 *     for i from 0 <= i < size:
 *         values[i] = _hist.GetBinContent(_hist.FindBin(array[i][0], array[i][1], array[i][2]))
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 31 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 31 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 31 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 31 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":23
 * 
 * 
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 23 "root_numpy/src/evaluate.pyx"


#line 23 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 23 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 23 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 23 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 23 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_h3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 23 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 23 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 23 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":34
 * 
 * 
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 */

#line 34 "root_numpy/src/evaluate.pyx"


#line 34 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 34 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_67evaluate_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_67evaluate_f1 = 
#line 34 "root_numpy/src/evaluate.pyx"
{"evaluate_f1", (PyCFunction)__pyx_pw_13_librootnumpy_67evaluate_f1, METH_VARARGS|METH_KEYWORDS, 0};

#line 34 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_67evaluate_f1(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 34 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 34 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f1 (wrapper)", 0);

#line 34 "root_numpy/src/evaluate.pyx"
  {

#line 34 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 34 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 34 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 34 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 34 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 34 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 34 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 34 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 34 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 34 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 34 "root_numpy/src/evaluate.pyx"
      }

#line 34 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 34 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 34 "root_numpy/src/evaluate.pyx"
        case  0:

#line 34 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 34 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 34 "root_numpy/src/evaluate.pyx"
        case  1:

#line 34 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 34 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_f1", 1, 2, 2, 1); 
#line 34 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 34 "root_numpy/src/evaluate.pyx"
        }

#line 34 "root_numpy/src/evaluate.pyx"
      }

#line 34 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 34 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_f1") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 34 "root_numpy/src/evaluate.pyx"
      }

#line 34 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 34 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 34 "root_numpy/src/evaluate.pyx"
    } else {

#line 34 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 34 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 34 "root_numpy/src/evaluate.pyx"
    }

#line 34 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 34 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 34 "root_numpy/src/evaluate.pyx"
  }

#line 34 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_f1", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 34 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 34 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 34 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_66evaluate_f1(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 34 "root_numpy/src/evaluate.pyx"


#line 34 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 34 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 34 "root_numpy/src/evaluate.pyx"
}

#line 34 "root_numpy/src/evaluate.pyx"


#line 34 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_66evaluate_f1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TF1 *__pyx_v__func
#line 34 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 34 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 34 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 34 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 34 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 34 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 34 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 34 "root_numpy/src/evaluate.pyx"
;

#line 34 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f1", 0);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 34 "root_numpy/src/evaluate.pyx"
  {

#line 34 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 34 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/evaluate.pyx"
  }

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":36
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 36 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TF1 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":37
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 37 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":38
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 38 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 38 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 38 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 38 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 38 "root_numpy/src/evaluate.pyx"
  {

#line 38 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 38 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 38 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 38 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 38 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 38 "root_numpy/src/evaluate.pyx"
    }

#line 38 "root_numpy/src/evaluate.pyx"
  }

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 38 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":40
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i])
 *     return values
 */

#line 40 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 40 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":41
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 41 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 41 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 41 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_9 < 0) {

#line 41 "root_numpy/src/evaluate.pyx"
      __pyx_t_9 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 41 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else 
#line 41 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_10 = 0;

#line 41 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 41 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 41 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/evaluate.pyx"
    }

#line 41 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 41 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 41 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_11 < 0) {

#line 41 "root_numpy/src/evaluate.pyx"
      __pyx_t_11 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 41 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
    } else 
#line 41 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_10 = 0;

#line 41 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 41 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 41 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/evaluate.pyx"
    }

#line 41 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides)));

#line 41 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":42
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 42 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 42 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 42 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":34
 * 
 * 
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 */

#line 34 "root_numpy/src/evaluate.pyx"


#line 34 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 34 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 34 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 34 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 34 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 34 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 34 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 34 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":45
 * 
 * 
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 */

#line 45 "root_numpy/src/evaluate.pyx"


#line 45 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 45 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_69evaluate_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_69evaluate_f2 = 
#line 45 "root_numpy/src/evaluate.pyx"
{"evaluate_f2", (PyCFunction)__pyx_pw_13_librootnumpy_69evaluate_f2, METH_VARARGS|METH_KEYWORDS, 0};

#line 45 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_69evaluate_f2(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 45 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 45 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 45 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f2 (wrapper)", 0);

#line 45 "root_numpy/src/evaluate.pyx"
  {

#line 45 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 45 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 45 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 45 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 45 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 45 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 45 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 45 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 45 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 45 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 45 "root_numpy/src/evaluate.pyx"
      }

#line 45 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 45 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 45 "root_numpy/src/evaluate.pyx"
        case  0:

#line 45 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 45 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 45 "root_numpy/src/evaluate.pyx"
        case  1:

#line 45 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 45 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_f2", 1, 2, 2, 1); 
#line 45 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 45 "root_numpy/src/evaluate.pyx"
        }

#line 45 "root_numpy/src/evaluate.pyx"
      }

#line 45 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 45 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_f2") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 45 "root_numpy/src/evaluate.pyx"
      }

#line 45 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 45 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 45 "root_numpy/src/evaluate.pyx"
    } else {

#line 45 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 45 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 45 "root_numpy/src/evaluate.pyx"
    }

#line 45 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 45 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 45 "root_numpy/src/evaluate.pyx"
  }

#line 45 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_f2", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 45 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 45 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 45 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 45 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_68evaluate_f2(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 45 "root_numpy/src/evaluate.pyx"


#line 45 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 45 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 45 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 45 "root_numpy/src/evaluate.pyx"
}

#line 45 "root_numpy/src/evaluate.pyx"


#line 45 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_68evaluate_f2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TF2 *__pyx_v__func
#line 45 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 45 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 45 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 45 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 45 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 45 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 45 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 45 "root_numpy/src/evaluate.pyx"
;

#line 45 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f2", 0);

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 45 "root_numpy/src/evaluate.pyx"
  {

#line 45 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 45 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/evaluate.pyx"
  }

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":47
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TF2 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":48
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 48 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":49
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 49 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 49 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 49 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 49 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 49 "root_numpy/src/evaluate.pyx"
  {

#line 49 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 49 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 49 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 49 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 49 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 49 "root_numpy/src/evaluate.pyx"
    }

#line 49 "root_numpy/src/evaluate.pyx"
  }

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 49 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":51
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i][0], array[i][1])
 *     return values
 */

#line 51 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 51 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":52
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 52 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 52 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 52 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 52 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 52 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 52 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 52 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 52 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 52 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 52 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 52 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 52 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 52 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 52 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = -1;

#line 52 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_11 < 0) {

#line 52 "root_numpy/src/evaluate.pyx"
      __pyx_t_11 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 52 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 0;
    } else 
#line 52 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_12 = 0;

#line 52 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_12 != -1)) {

#line 52 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_12);

#line 52 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/src/evaluate.pyx"
    }

#line 52 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval(__pyx_t_9, __pyx_t_10);

#line 52 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":53
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 53 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 53 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 53 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 53 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":45
 * 
 * 
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 */

#line 45 "root_numpy/src/evaluate.pyx"


#line 45 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 45 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 45 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 45 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 45 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 45 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 45 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 45 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":56
 * 
 * 
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 */

#line 56 "root_numpy/src/evaluate.pyx"


#line 56 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 56 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_71evaluate_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_71evaluate_f3 = 
#line 56 "root_numpy/src/evaluate.pyx"
{"evaluate_f3", (PyCFunction)__pyx_pw_13_librootnumpy_71evaluate_f3, METH_VARARGS|METH_KEYWORDS, 0};

#line 56 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_71evaluate_f3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 56 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 56 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 56 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f3 (wrapper)", 0);

#line 56 "root_numpy/src/evaluate.pyx"
  {

#line 56 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 56 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 56 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 56 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 56 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 56 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 56 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 56 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 56 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 56 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 56 "root_numpy/src/evaluate.pyx"
      }

#line 56 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 56 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 56 "root_numpy/src/evaluate.pyx"
        case  0:

#line 56 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 56 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 56 "root_numpy/src/evaluate.pyx"
        case  1:

#line 56 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 56 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_f3", 1, 2, 2, 1); 
#line 56 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 56 "root_numpy/src/evaluate.pyx"
        }

#line 56 "root_numpy/src/evaluate.pyx"
      }

#line 56 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 56 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_f3") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 56 "root_numpy/src/evaluate.pyx"
      }

#line 56 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 56 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 56 "root_numpy/src/evaluate.pyx"
    } else {

#line 56 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 56 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 56 "root_numpy/src/evaluate.pyx"
    }

#line 56 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 56 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 56 "root_numpy/src/evaluate.pyx"
  }

#line 56 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_f3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 56 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 56 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 56 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_70evaluate_f3(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 56 "root_numpy/src/evaluate.pyx"


#line 56 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 56 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 56 "root_numpy/src/evaluate.pyx"
}

#line 56 "root_numpy/src/evaluate.pyx"


#line 56 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_70evaluate_f3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TF3 *__pyx_v__func
#line 56 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 56 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 56 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 56 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 56 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 56 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 56 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 56 "root_numpy/src/evaluate.pyx"
;

#line 56 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_f3", 0);

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 56 "root_numpy/src/evaluate.pyx"
  {

#line 56 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 56 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "root_numpy/src/evaluate.pyx"
  }

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":58
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 58 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TF3 *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":59
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 59 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":60
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 60 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 60 "root_numpy/src/evaluate.pyx"
  {

#line 60 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 60 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 60 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 60 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 60 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 60 "root_numpy/src/evaluate.pyx"
    }

#line 60 "root_numpy/src/evaluate.pyx"
  }

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 60 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":62
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i][0], array[i][1], array[i][2])
 *     return values
 */

#line 62 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 62 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":63
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1], array[i][2])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 63 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = __pyx_v_i;

#line 63 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = -1;

#line 63 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_12 < 0) {

#line 63 "root_numpy/src/evaluate.pyx"
      __pyx_t_12 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 63 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 0;
    } else 
#line 63 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_13 = 0;

#line 63 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_13 != -1)) {

#line 63 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_13);

#line 63 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 63 "root_numpy/src/evaluate.pyx"
    }

#line 63 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval(__pyx_t_9, __pyx_t_10, __pyx_t_11);

#line 63 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":64
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1], array[i][2])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 64 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 64 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 64 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 64 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":56
 * 
 * 
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 */

#line 56 "root_numpy/src/evaluate.pyx"


#line 56 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 56 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 56 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 56 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 56 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_f3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 56 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 56 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 56 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":67
 * 
 * 
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 67 "root_numpy/src/evaluate.pyx"


#line 67 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 67 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_73evaluate_formula_1d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_73evaluate_formula_1d = 
#line 67 "root_numpy/src/evaluate.pyx"
{"evaluate_formula_1d", (PyCFunction)__pyx_pw_13_librootnumpy_73evaluate_formula_1d, METH_VARARGS|METH_KEYWORDS, 0};

#line 67 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_73evaluate_formula_1d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 67 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 67 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 67 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_1d (wrapper)", 0);

#line 67 "root_numpy/src/evaluate.pyx"
  {

#line 67 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 67 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 67 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 67 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 67 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 67 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 67 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 67 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 67 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 67 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 67 "root_numpy/src/evaluate.pyx"
      }

#line 67 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 67 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 67 "root_numpy/src/evaluate.pyx"
        case  0:

#line 67 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 67 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 67 "root_numpy/src/evaluate.pyx"
        case  1:

#line 67 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 67 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_formula_1d", 1, 2, 2, 1); 
#line 67 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 67 "root_numpy/src/evaluate.pyx"
        }

#line 67 "root_numpy/src/evaluate.pyx"
      }

#line 67 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 67 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_formula_1d") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 67 "root_numpy/src/evaluate.pyx"
      }

#line 67 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 67 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 67 "root_numpy/src/evaluate.pyx"
    } else {

#line 67 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 67 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 67 "root_numpy/src/evaluate.pyx"
    }

#line 67 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 67 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 67 "root_numpy/src/evaluate.pyx"
  }

#line 67 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_formula_1d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 67 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 67 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 67 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 67 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_72evaluate_formula_1d(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 67 "root_numpy/src/evaluate.pyx"


#line 67 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 67 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 67 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 67 "root_numpy/src/evaluate.pyx"
}

#line 67 "root_numpy/src/evaluate.pyx"


#line 67 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_72evaluate_formula_1d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TFormula *__pyx_v__func
#line 67 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 67 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 67 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 67 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 67 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 67 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 67 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 67 "root_numpy/src/evaluate.pyx"
;

#line 67 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_1d", 0);

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 67 "root_numpy/src/evaluate.pyx"
  {

#line 67 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 67 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 67 "root_numpy/src/evaluate.pyx"
  }

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":69
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 69 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 69 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TFormula *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":70
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 70 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":71
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 71 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 71 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 71 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 71 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 71 "root_numpy/src/evaluate.pyx"
  {

#line 71 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 71 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 71 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 71 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 71 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 71 "root_numpy/src/evaluate.pyx"
    }

#line 71 "root_numpy/src/evaluate.pyx"
  }

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 71 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":73
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i])
 *     return values
 */

#line 73 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 73 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":74
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 74 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 74 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 74 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_9 < 0) {

#line 74 "root_numpy/src/evaluate.pyx"
      __pyx_t_9 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 74 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else 
#line 74 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_10 = 0;

#line 74 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 74 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 74 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 74 "root_numpy/src/evaluate.pyx"
    }

#line 74 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 74 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 74 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_11 < 0) {

#line 74 "root_numpy/src/evaluate.pyx"
      __pyx_t_11 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 74 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
    } else 
#line 74 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_10 = 0;

#line 74 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 74 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 74 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 74 "root_numpy/src/evaluate.pyx"
    }

#line 74 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides)));

#line 74 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":75
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 75 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 75 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 75 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 75 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":67
 * 
 * 
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 67 "root_numpy/src/evaluate.pyx"


#line 67 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 67 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 67 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 67 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 67 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_1d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 67 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 67 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 67 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":78
 * 
 * 
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 78 "root_numpy/src/evaluate.pyx"


#line 78 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 78 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_75evaluate_formula_2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_75evaluate_formula_2d = 
#line 78 "root_numpy/src/evaluate.pyx"
{"evaluate_formula_2d", (PyCFunction)__pyx_pw_13_librootnumpy_75evaluate_formula_2d, METH_VARARGS|METH_KEYWORDS, 0};

#line 78 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_75evaluate_formula_2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 78 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 78 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 78 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_2d (wrapper)", 0);

#line 78 "root_numpy/src/evaluate.pyx"
  {

#line 78 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 78 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 78 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 78 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 78 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 78 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 78 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 78 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 78 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "root_numpy/src/evaluate.pyx"
      }

#line 78 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 78 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 78 "root_numpy/src/evaluate.pyx"
        case  0:

#line 78 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 78 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 78 "root_numpy/src/evaluate.pyx"
        case  1:

#line 78 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 78 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_formula_2d", 1, 2, 2, 1); 
#line 78 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 78 "root_numpy/src/evaluate.pyx"
        }

#line 78 "root_numpy/src/evaluate.pyx"
      }

#line 78 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 78 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_formula_2d") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 78 "root_numpy/src/evaluate.pyx"
      }

#line 78 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 78 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 78 "root_numpy/src/evaluate.pyx"
    } else {

#line 78 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 78 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 78 "root_numpy/src/evaluate.pyx"
    }

#line 78 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 78 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 78 "root_numpy/src/evaluate.pyx"
  }

#line 78 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_formula_2d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 78 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 78 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 78 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_74evaluate_formula_2d(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 78 "root_numpy/src/evaluate.pyx"


#line 78 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 78 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 78 "root_numpy/src/evaluate.pyx"
}

#line 78 "root_numpy/src/evaluate.pyx"


#line 78 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_74evaluate_formula_2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TFormula *__pyx_v__func
#line 78 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 78 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 78 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 78 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 78 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 78 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 78 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 78 "root_numpy/src/evaluate.pyx"
;

#line 78 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  long __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_2d", 0);

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 78 "root_numpy/src/evaluate.pyx"
  {

#line 78 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 78 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/evaluate.pyx"
  }

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":80
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 80 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 80 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TFormula *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":81
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 81 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":82
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 82 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 82 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 82 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 82 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 82 "root_numpy/src/evaluate.pyx"
  {

#line 82 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 82 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 82 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 82 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 82 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 82 "root_numpy/src/evaluate.pyx"
    }

#line 82 "root_numpy/src/evaluate.pyx"
  }

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 82 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":84
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i][0], array[i][1])
 *     return values
 */

#line 84 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 84 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":85
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 85 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 85 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 85 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 85 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 85 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 85 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 85 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 85 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 85 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 85 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 85 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 85 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 85 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 85 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 85 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 85 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = -1;

#line 85 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_11 < 0) {

#line 85 "root_numpy/src/evaluate.pyx"
      __pyx_t_11 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 85 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_12 = 0;
    } else 
#line 85 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_12 = 0;

#line 85 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_12 != -1)) {

#line 85 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_12);

#line 85 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 85 "root_numpy/src/evaluate.pyx"
    }

#line 85 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval(__pyx_t_9, __pyx_t_10);

#line 85 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":86
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 86 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 86 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 86 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":78
 * 
 * 
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 78 "root_numpy/src/evaluate.pyx"


#line 78 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 78 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 78 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 78 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 78 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 78 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 78 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 78 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":89
 * 
 * 
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 89 "root_numpy/src/evaluate.pyx"


#line 89 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 89 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_77evaluate_formula_3d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_77evaluate_formula_3d = 
#line 89 "root_numpy/src/evaluate.pyx"
{"evaluate_formula_3d", (PyCFunction)__pyx_pw_13_librootnumpy_77evaluate_formula_3d, METH_VARARGS|METH_KEYWORDS, 0};

#line 89 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_77evaluate_formula_3d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 89 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 89 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 89 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_3d (wrapper)", 0);

#line 89 "root_numpy/src/evaluate.pyx"
  {

#line 89 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 89 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 89 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 89 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 89 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 89 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 89 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 89 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 89 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 89 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 89 "root_numpy/src/evaluate.pyx"
      }

#line 89 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 89 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 89 "root_numpy/src/evaluate.pyx"
        case  0:

#line 89 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 89 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 89 "root_numpy/src/evaluate.pyx"
        case  1:

#line 89 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 89 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_formula_3d", 1, 2, 2, 1); 
#line 89 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 89 "root_numpy/src/evaluate.pyx"
        }

#line 89 "root_numpy/src/evaluate.pyx"
      }

#line 89 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 89 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_formula_3d") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 89 "root_numpy/src/evaluate.pyx"
      }

#line 89 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 89 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 89 "root_numpy/src/evaluate.pyx"
    } else {

#line 89 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 89 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 89 "root_numpy/src/evaluate.pyx"
    }

#line 89 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 89 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 89 "root_numpy/src/evaluate.pyx"
  }

#line 89 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_formula_3d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 89 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_3d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 89 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 89 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 89 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_76evaluate_formula_3d(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 89 "root_numpy/src/evaluate.pyx"


#line 89 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 89 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 89 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 89 "root_numpy/src/evaluate.pyx"
}

#line 89 "root_numpy/src/evaluate.pyx"


#line 89 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_76evaluate_formula_3d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TFormula *__pyx_v__func
#line 89 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 89 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 89 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 89 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 89 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 89 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 89 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 89 "root_numpy/src/evaluate.pyx"
;

#line 89 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  long __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_3d", 0);

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 89 "root_numpy/src/evaluate.pyx"
  {

#line 89 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 89 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "root_numpy/src/evaluate.pyx"
  }

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":91
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 91 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 91 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TFormula *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":92
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 92 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":93
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 93 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 93 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 93 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 93 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 93 "root_numpy/src/evaluate.pyx"
  {

#line 93 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 93 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 93 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 93 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 93 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 93 "root_numpy/src/evaluate.pyx"
    }

#line 93 "root_numpy/src/evaluate.pyx"
  }

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 93 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":95
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i][0], array[i][1], array[i][2])
 *     return values
 */

#line 95 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 95 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":96
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1], array[i][2])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = __pyx_v_i;

#line 96 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = -1;

#line 96 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_12 < 0) {

#line 96 "root_numpy/src/evaluate.pyx"
      __pyx_t_12 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 96 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_12 < 0)) __pyx_t_13 = 0;
    } else 
#line 96 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_12 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_13 = 0;

#line 96 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_13 != -1)) {

#line 96 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_13);

#line 96 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "root_numpy/src/evaluate.pyx"
    }

#line 96 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_12, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval(__pyx_t_9, __pyx_t_10, __pyx_t_11);

#line 96 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":97
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1], array[i][2])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 97 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 97 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 97 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 97 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":89
 * 
 * 
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 89 "root_numpy/src/evaluate.pyx"


#line 89 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 89 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 89 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 89 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 89 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_3d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 89 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 89 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 89 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":100
 * 
 * 
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 100 "root_numpy/src/evaluate.pyx"


#line 100 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 100 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_79evaluate_formula_4d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_79evaluate_formula_4d = 
#line 100 "root_numpy/src/evaluate.pyx"
{"evaluate_formula_4d", (PyCFunction)__pyx_pw_13_librootnumpy_79evaluate_formula_4d, METH_VARARGS|METH_KEYWORDS, 0};

#line 100 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_79evaluate_formula_4d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_func = 0
#line 100 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 100 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 100 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_4d (wrapper)", 0);

#line 100 "root_numpy/src/evaluate.pyx"
  {

#line 100 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_func,&__pyx_n_s_array,0};

#line 100 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 100 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 100 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 100 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 100 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 100 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 100 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 100 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 100 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 100 "root_numpy/src/evaluate.pyx"
      }

#line 100 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 100 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 100 "root_numpy/src/evaluate.pyx"
        case  0:

#line 100 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_func)) != 0)) kw_args--;
        else 
#line 100 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 100 "root_numpy/src/evaluate.pyx"
        case  1:

#line 100 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 100 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_formula_4d", 1, 2, 2, 1); 
#line 100 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 100 "root_numpy/src/evaluate.pyx"
        }

#line 100 "root_numpy/src/evaluate.pyx"
      }

#line 100 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 100 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_formula_4d") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 100 "root_numpy/src/evaluate.pyx"
      }

#line 100 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 100 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 100 "root_numpy/src/evaluate.pyx"
    } else {

#line 100 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 100 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 100 "root_numpy/src/evaluate.pyx"
    }

#line 100 "root_numpy/src/evaluate.pyx"
    __pyx_v_func = values[0];

#line 100 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 100 "root_numpy/src/evaluate.pyx"
  }

#line 100 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_formula_4d", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 100 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_4d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 100 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 100 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 100 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_78evaluate_formula_4d(__pyx_self, __pyx_v_func, __pyx_v_array);

#line 100 "root_numpy/src/evaluate.pyx"


#line 100 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 100 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 100 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 100 "root_numpy/src/evaluate.pyx"
}

#line 100 "root_numpy/src/evaluate.pyx"


#line 100 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_78evaluate_formula_4d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_func, PyArrayObject *__pyx_v_array) {
  TFormula *__pyx_v__func
#line 100 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 100 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 100 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 100 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 100 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 100 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 100 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 100 "root_numpy/src/evaluate.pyx"
;

#line 100 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  long __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_formula_4d", 0);

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 100 "root_numpy/src/evaluate.pyx"
  {

#line 100 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 100 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "root_numpy/src/evaluate.pyx"
  }

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_array.diminfo[1].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_array.diminfo[1].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/src/evaluate.pyx":102
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 102 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_func); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 102 "root_numpy/src/evaluate.pyx"
  __pyx_v__func = ((TFormula *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":103
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 103 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":104
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 104 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 104 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 104 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 104 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 104 "root_numpy/src/evaluate.pyx"
  {

#line 104 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 104 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 104 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 104 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 104 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 104 "root_numpy/src/evaluate.pyx"
    }

#line 104 "root_numpy/src/evaluate.pyx"
  }

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 104 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":106
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _func.Eval(array[i][0], array[i][1], array[i][2], array[i][3])
 *     return values
 */

#line 106 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 106 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":107
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1], array[i][2], array[i][3])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_6, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_array), __pyx_v_i, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_2, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 107 "root_numpy/src/evaluate.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_13 = __pyx_v_i;

#line 107 "root_numpy/src/evaluate.pyx"
    __pyx_t_14 = -1;

#line 107 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_13 < 0) {

#line 107 "root_numpy/src/evaluate.pyx"
      __pyx_t_13 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 107 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_14 = 0;
    } else 
#line 107 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_14 = 0;

#line 107 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_14 != -1)) {

#line 107 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_14);

#line 107 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 107 "root_numpy/src/evaluate.pyx"
    }

#line 107 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__func->Eval(__pyx_t_9, __pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 107 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":108
 *     for i from 0 <= i < size:
 *         values[i] = _func.Eval(array[i][0], array[i][1], array[i][2], array[i][3])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 108 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 108 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 108 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 108 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":100
 * 
 * 
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 100 "root_numpy/src/evaluate.pyx"


#line 100 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 100 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 100 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 100 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 100 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_formula_4d", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 100 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 100 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 100 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":111
 * 
 * 
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 */

#line 111 "root_numpy/src/evaluate.pyx"


#line 111 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 111 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_81evaluate_graph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_81evaluate_graph = 
#line 111 "root_numpy/src/evaluate.pyx"
{"evaluate_graph", (PyCFunction)__pyx_pw_13_librootnumpy_81evaluate_graph, METH_VARARGS|METH_KEYWORDS, 0};

#line 111 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_81evaluate_graph(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0
#line 111 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 111 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 111 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_graph (wrapper)", 0);

#line 111 "root_numpy/src/evaluate.pyx"
  {

#line 111 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_graph,&__pyx_n_s_array,0};

#line 111 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 111 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 111 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 111 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 111 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 111 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 111 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 111 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 111 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 111 "root_numpy/src/evaluate.pyx"
      }

#line 111 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 111 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 111 "root_numpy/src/evaluate.pyx"
        case  0:

#line 111 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_graph)) != 0)) kw_args--;
        else 
#line 111 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 111 "root_numpy/src/evaluate.pyx"
        case  1:

#line 111 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 111 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_graph", 1, 2, 2, 1); 
#line 111 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 111 "root_numpy/src/evaluate.pyx"
        }

#line 111 "root_numpy/src/evaluate.pyx"
      }

#line 111 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 111 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_graph") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 111 "root_numpy/src/evaluate.pyx"
      }

#line 111 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 111 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 111 "root_numpy/src/evaluate.pyx"
    } else {

#line 111 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 111 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 111 "root_numpy/src/evaluate.pyx"
    }

#line 111 "root_numpy/src/evaluate.pyx"
    __pyx_v_graph = values[0];

#line 111 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 111 "root_numpy/src/evaluate.pyx"
  }

#line 111 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_graph", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 111 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 111 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 111 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 111 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_80evaluate_graph(__pyx_self, __pyx_v_graph, __pyx_v_array);

#line 111 "root_numpy/src/evaluate.pyx"


#line 111 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 111 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 111 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 111 "root_numpy/src/evaluate.pyx"
}

#line 111 "root_numpy/src/evaluate.pyx"


#line 111 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_80evaluate_graph(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_graph, PyArrayObject *__pyx_v_array) {
  TGraph *__pyx_v__graph
#line 111 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 111 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 111 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 111 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 111 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 111 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 111 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 111 "root_numpy/src/evaluate.pyx"
;

#line 111 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_graph", 0);

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 111 "root_numpy/src/evaluate.pyx"
  {

#line 111 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 111 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/evaluate.pyx"
  }

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":113
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 113 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_graph); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 113 "root_numpy/src/evaluate.pyx"
  __pyx_v__graph = ((TGraph *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":114
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 114 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":115
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 115 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 115 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 115 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 115 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 115 "root_numpy/src/evaluate.pyx"
  {

#line 115 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 115 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 115 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 115 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 115 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 115 "root_numpy/src/evaluate.pyx"
    }

#line 115 "root_numpy/src/evaluate.pyx"
  }

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 115 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":117
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _graph.Eval(array[i])
 *     return values
 */

#line 117 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 117 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":118
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _graph.Eval(array[i])             # <<<<<<<<<<<<<<
 *     return values
 * 
 */

#line 118 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 118 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 118 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_9 < 0) {

#line 118 "root_numpy/src/evaluate.pyx"
      __pyx_t_9 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 118 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else 
#line 118 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_10 = 0;

#line 118 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 118 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 118 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 118 "root_numpy/src/evaluate.pyx"
    }

#line 118 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 118 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 118 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_11 < 0) {

#line 118 "root_numpy/src/evaluate.pyx"
      __pyx_t_11 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 118 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
    } else 
#line 118 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_10 = 0;

#line 118 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 118 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 118 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 118 "root_numpy/src/evaluate.pyx"
    }

#line 118 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__graph->Eval((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides)));

#line 118 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":119
 *     for i from 0 <= i < size:
 *         values[i] = _graph.Eval(array[i])
 *     return values             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 119 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 119 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 119 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 119 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":111
 * 
 * 
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 */

#line 111 "root_numpy/src/evaluate.pyx"


#line 111 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 111 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 111 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 111 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 111 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 111 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 111 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 111 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/evaluate.pyx":122
 * 
 * 
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 */

#line 122 "root_numpy/src/evaluate.pyx"


#line 122 "root_numpy/src/evaluate.pyx"
/* Python wrapper */

#line 122 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_83evaluate_spline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_librootnumpy_83evaluate_spline = 
#line 122 "root_numpy/src/evaluate.pyx"
{"evaluate_spline", (PyCFunction)__pyx_pw_13_librootnumpy_83evaluate_spline, METH_VARARGS|METH_KEYWORDS, 0};

#line 122 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pw_13_librootnumpy_83evaluate_spline(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_spline = 0
#line 122 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_array = 0
#line 122 "root_numpy/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 122 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_spline (wrapper)", 0);

#line 122 "root_numpy/src/evaluate.pyx"
  {

#line 122 "root_numpy/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_spline,&__pyx_n_s_array,0};

#line 122 "root_numpy/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 122 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 122 "root_numpy/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 122 "root_numpy/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 122 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 122 "root_numpy/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 122 "root_numpy/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 122 "root_numpy/src/evaluate.pyx"
        case  0: break;
        default: 
#line 122 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 122 "root_numpy/src/evaluate.pyx"
      }

#line 122 "root_numpy/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 122 "root_numpy/src/evaluate.pyx"
      switch (pos_args) {

#line 122 "root_numpy/src/evaluate.pyx"
        case  0:

#line 122 "root_numpy/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_spline)) != 0)) kw_args--;
        else 
#line 122 "root_numpy/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 122 "root_numpy/src/evaluate.pyx"
        case  1:

#line 122 "root_numpy/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_array)) != 0)) kw_args--;

#line 122 "root_numpy/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_spline", 1, 2, 2, 1); 
#line 122 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 122 "root_numpy/src/evaluate.pyx"
        }

#line 122 "root_numpy/src/evaluate.pyx"
      }

#line 122 "root_numpy/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 122 "root_numpy/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_spline") < 0)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 122 "root_numpy/src/evaluate.pyx"
      }

#line 122 "root_numpy/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 122 "root_numpy/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 122 "root_numpy/src/evaluate.pyx"
    } else {

#line 122 "root_numpy/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 122 "root_numpy/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 122 "root_numpy/src/evaluate.pyx"
    }

#line 122 "root_numpy/src/evaluate.pyx"
    __pyx_v_spline = values[0];

#line 122 "root_numpy/src/evaluate.pyx"
    __pyx_v_array = ((PyArrayObject *)values[1]);

#line 122 "root_numpy/src/evaluate.pyx"
  }

#line 122 "root_numpy/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_spline", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 122 "root_numpy/src/evaluate.pyx"
{__pyx_filename = __pyx_f[7]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_L3_error:;

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_spline", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "root_numpy/src/evaluate.pyx"
  return NULL;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 122 "root_numpy/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_array), __pyx_ptype_5numpy_ndarray, 1, "array", 0))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 122 "root_numpy/src/evaluate.pyx"
__pyx_pf_13_librootnumpy_82evaluate_spline(__pyx_self, __pyx_v_spline, __pyx_v_array);

#line 122 "root_numpy/src/evaluate.pyx"


#line 122 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 122 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 122 "root_numpy/src/evaluate.pyx"
}

#line 122 "root_numpy/src/evaluate.pyx"


#line 122 "root_numpy/src/evaluate.pyx"
static PyObject *__pyx_pf_13_librootnumpy_82evaluate_spline(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_spline, PyArrayObject *__pyx_v_array) {
  TSpline *__pyx_v__spline
#line 122 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_size
#line 122 "root_numpy/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_values = 0
#line 122 "root_numpy/src/evaluate.pyx"
;
  long __pyx_v_i
#line 122 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_array
#line 122 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_array
#line 122 "root_numpy/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_values
#line 122 "root_numpy/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_values
#line 122 "root_numpy/src/evaluate.pyx"
;

#line 122 "root_numpy/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  long __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_spline", 0);

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.pybuffer.buf = NULL;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_values.refcount = 0;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.data = NULL;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_values.rcbuffer = &__pyx_pybuffer_values;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.pybuffer.buf = NULL;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffer_array.refcount = 0;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.data = NULL;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.rcbuffer = &__pyx_pybuffer_array;

#line 122 "root_numpy/src/evaluate.pyx"
  {

#line 122 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 122 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_array.rcbuffer->pybuffer, (PyObject*)__pyx_v_array, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 122 "root_numpy/src/evaluate.pyx"
  }

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_pybuffernd_array.diminfo[0].strides = __pyx_pybuffernd_array.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_array.diminfo[0].shape = __pyx_pybuffernd_array.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/evaluate.pyx":124
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)             # <<<<<<<<<<<<<<
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 */

#line 124 "root_numpy/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_spline); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 124 "root_numpy/src/evaluate.pyx"
  __pyx_v__spline = ((TSpline *)__pyx_t_1);

  /* "root_numpy/src/evaluate.pyx":125
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 *     cdef long size = array.shape[0]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 */

#line 125 "root_numpy/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_array->dimensions[0]);

  /* "root_numpy/src/evaluate.pyx":126
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     for i from 0 <= i < size:
 */

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 126 "root_numpy/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 126 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 126 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 126 "root_numpy/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 126 "root_numpy/src/evaluate.pyx"
  {

#line 126 "root_numpy/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 126 "root_numpy/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_values.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 126 "root_numpy/src/evaluate.pyx"
      __pyx_v_values = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_values.rcbuffer->pybuffer.buf = NULL;

#line 126 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 126 "root_numpy/src/evaluate.pyx"
__pyx_pybuffernd_values.diminfo[0].strides = __pyx_pybuffernd_values.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_values.diminfo[0].shape = __pyx_pybuffernd_values.rcbuffer->pybuffer.shape[0];

#line 126 "root_numpy/src/evaluate.pyx"
    }

#line 126 "root_numpy/src/evaluate.pyx"
  }

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_v_values = ((PyArrayObject *)__pyx_t_6);

#line 126 "root_numpy/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/src/evaluate.pyx":128
 *     cdef np.ndarray[np.double_t, ndim=1] values = np.empty(size, dtype=np.double)
 *     cdef long i
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         values[i] = _spline.Eval(array[i])
 *     return values
 */

#line 128 "root_numpy/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 128 "root_numpy/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/src/evaluate.pyx":129
 *     cdef long i
 *     for i from 0 <= i < size:
 *         values[i] = _spline.Eval(array[i])             # <<<<<<<<<<<<<<
 *     return values
 */

#line 129 "root_numpy/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 129 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 129 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_9 < 0) {

#line 129 "root_numpy/src/evaluate.pyx"
      __pyx_t_9 += __pyx_pybuffernd_array.diminfo[0].shape;

#line 129 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_9 < 0)) __pyx_t_10 = 0;
    } else 
#line 129 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_9 >= __pyx_pybuffernd_array.diminfo[0].shape)) __pyx_t_10 = 0;

#line 129 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 129 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 129 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 129 "root_numpy/src/evaluate.pyx"
    }

#line 129 "root_numpy/src/evaluate.pyx"
    __pyx_t_11 = __pyx_v_i;

#line 129 "root_numpy/src/evaluate.pyx"
    __pyx_t_10 = -1;

#line 129 "root_numpy/src/evaluate.pyx"
    if (__pyx_t_11 < 0) {

#line 129 "root_numpy/src/evaluate.pyx"
      __pyx_t_11 += __pyx_pybuffernd_values.diminfo[0].shape;

#line 129 "root_numpy/src/evaluate.pyx"
      if (unlikely(__pyx_t_11 < 0)) __pyx_t_10 = 0;
    } else 
#line 129 "root_numpy/src/evaluate.pyx"
if (unlikely(__pyx_t_11 >= __pyx_pybuffernd_values.diminfo[0].shape)) __pyx_t_10 = 0;

#line 129 "root_numpy/src/evaluate.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 129 "root_numpy/src/evaluate.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 129 "root_numpy/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[7]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 129 "root_numpy/src/evaluate.pyx"
    }

#line 129 "root_numpy/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_values.rcbuffer->pybuffer.buf, __pyx_t_11, __pyx_pybuffernd_values.diminfo[0].strides) = __pyx_v__spline->Eval((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_array.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_array.diminfo[0].strides)));

#line 129 "root_numpy/src/evaluate.pyx"
  }

  /* "root_numpy/src/evaluate.pyx":130
 *     for i from 0 <= i < size:
 *         values[i] = _spline.Eval(array[i])
 *     return values             # <<<<<<<<<<<<<<
 */

#line 130 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 130 "root_numpy/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_values));

#line 130 "root_numpy/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_values);

#line 130 "root_numpy/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/evaluate.pyx":122
 * 
 * 
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 */

#line 122 "root_numpy/src/evaluate.pyx"


#line 122 "root_numpy/src/evaluate.pyx"
  /* function exit code */

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 122 "root_numpy/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 122 "root_numpy/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 122 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 122 "root_numpy/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_AddTraceback("_librootnumpy.evaluate_spline", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_r = NULL;

#line 122 "root_numpy/src/evaluate.pyx"
  goto __pyx_L2;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_L0:;

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_array.rcbuffer->pybuffer);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_values.rcbuffer->pybuffer);

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_L2:;

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_values);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "root_numpy/src/evaluate.pyx"
  return __pyx_r;

#line 122 "root_numpy/src/evaluate.pyx"
}

/* "root_numpy/src/innerjoin.pyx":11
 * # need to INCREF it
 * 
 * cpdef _blockwise_inner_join(data, left, fk, right,             # <<<<<<<<<<<<<<
 *                             force_repeat, fk_name):
 *     # foreign key is given by array of scalar not array of array
 */

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_pw_13_librootnumpy_85_blockwise_inner_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_f_13_librootnumpy__blockwise_inner_join(PyObject *__pyx_v_data, PyObject *__pyx_v_left, PyObject *__pyx_v_fk, PyObject *__pyx_v_right, PyObject *__pyx_v_force_repeat, PyObject *__pyx_v_fk_name, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_v_scalar_mode = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_i_fk_name = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_repeat_columns = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_repeat_indices = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_stretch_columns = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_stretch_indices = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_right_indices = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_new_dtype = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_c = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_ret = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_x = NULL
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_indices
#line 11 "root_numpy/src/innerjoin.pyx"
;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyArrayObject *__pyx_t_14 = NULL;
  PyArrayObject *__pyx_t_15 = NULL;
  PyArrayObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_blockwise_inner_join", 0);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_force_repeat);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_fk_name);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.pybuffer.buf = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.refcount = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.data = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.rcbuffer = &__pyx_pybuffer_repeat_indices;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.pybuffer.buf = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.refcount = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.data = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.rcbuffer = &__pyx_pybuffer_stretch_indices;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.pybuffer.buf = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.refcount = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.data = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.rcbuffer = &__pyx_pybuffer_right_indices;

  /* "root_numpy/src/innerjoin.pyx":14
 *                             force_repeat, fk_name):
 *     # foreign key is given by array of scalar not array of array
 *     scalar_mode = fk.dtype != 'O'             # <<<<<<<<<<<<<<
 * 
 *     # determine fk_name to be fk1 fk2 ....
 */

#line 14 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_fk, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 14 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_n_s_O, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 14 "root_numpy/src/innerjoin.pyx"
  __pyx_v_scalar_mode = __pyx_t_2;

#line 14 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":18
 *     # determine fk_name to be fk1 fk2 ....
 *     # whichever is the first one that doesn't collide
 *     if fk_name is None:             # <<<<<<<<<<<<<<
 *         i_fk_name = 0
 *         fk_name = 'fk'
 */

#line 18 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = (__pyx_v_fk_name == Py_None);

#line 18 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = (__pyx_t_3 != 0);

#line 18 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

    /* "root_numpy/src/innerjoin.pyx":19
 *     # whichever is the first one that doesn't collide
 *     if fk_name is None:
 *         i_fk_name = 0             # <<<<<<<<<<<<<<
 *         fk_name = 'fk'
 *         while fk_name in left or fk_name in right:
 */

#line 19 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_int_0);

#line 19 "root_numpy/src/innerjoin.pyx"
    __pyx_v_i_fk_name = __pyx_int_0;

    /* "root_numpy/src/innerjoin.pyx":20
 *     if fk_name is None:
 *         i_fk_name = 0
 *         fk_name = 'fk'             # <<<<<<<<<<<<<<
 *         while fk_name in left or fk_name in right:
 *             i_fk_name += 1
 */

#line 20 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_n_s_fk);

#line 20 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF_SET(__pyx_v_fk_name, __pyx_n_s_fk);

    /* "root_numpy/src/innerjoin.pyx":21
 *         i_fk_name = 0
 *         fk_name = 'fk'
 *         while fk_name in left or fk_name in right:             # <<<<<<<<<<<<<<
 *             i_fk_name += 1
 *             fk_name = 'fk%d' % i_fk_name
 */

#line 21 "root_numpy/src/innerjoin.pyx"
    while (1) {

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = (__Pyx_PySequence_Contains(__pyx_v_fk_name, __pyx_v_left, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = (__pyx_t_3 != 0);

#line 21 "root_numpy/src/innerjoin.pyx"
      if (!__pyx_t_5) {

#line 21 "root_numpy/src/innerjoin.pyx"
      } else {

#line 21 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = __pyx_t_5;

#line 21 "root_numpy/src/innerjoin.pyx"
        goto __pyx_L6_bool_binop_done;

#line 21 "root_numpy/src/innerjoin.pyx"
      }

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_v_fk_name, __pyx_v_right, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = (__pyx_t_5 != 0);

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __pyx_t_3;

#line 21 "root_numpy/src/innerjoin.pyx"
      __pyx_L6_bool_binop_done:;

#line 21 "root_numpy/src/innerjoin.pyx"
      if (!__pyx_t_4) break;

      /* "root_numpy/src/innerjoin.pyx":22
 *         fk_name = 'fk'
 *         while fk_name in left or fk_name in right:
 *             i_fk_name += 1             # <<<<<<<<<<<<<<
 *             fk_name = 'fk%d' % i_fk_name
 * 
 */

#line 22 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_i_fk_name, __pyx_int_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 22 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_v_i_fk_name, __pyx_t_2);

#line 22 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = 0;

      /* "root_numpy/src/innerjoin.pyx":23
 *         while fk_name in left or fk_name in right:
 *             i_fk_name += 1
 *             fk_name = 'fk%d' % i_fk_name             # <<<<<<<<<<<<<<
 * 
 *     force_repeat = [] if force_repeat is None else force_repeat
 */

#line 23 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_fk_d, __pyx_v_i_fk_name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 23 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_v_fk_name, __pyx_t_2);

#line 23 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = 0;

#line 23 "root_numpy/src/innerjoin.pyx"
    }

#line 23 "root_numpy/src/innerjoin.pyx"
    goto __pyx_L3;

#line 23 "root_numpy/src/innerjoin.pyx"
  }

#line 23 "root_numpy/src/innerjoin.pyx"
  __pyx_L3:;

  /* "root_numpy/src/innerjoin.pyx":25
 *             fk_name = 'fk%d' % i_fk_name
 * 
 *     force_repeat = [] if force_repeat is None else force_repeat             # <<<<<<<<<<<<<<
 * 
 *     if scalar_mode:
 */

#line 25 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = (__pyx_v_force_repeat == Py_None);

#line 25 "root_numpy/src/innerjoin.pyx"
  if ((__pyx_t_4 != 0)) {

#line 25 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 25 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_t_1;

#line 25 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = 0;

#line 25 "root_numpy/src/innerjoin.pyx"
  } else {

#line 25 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_v_force_repeat);

#line 25 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_v_force_repeat;

#line 25 "root_numpy/src/innerjoin.pyx"
  }

#line 25 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF_SET(__pyx_v_force_repeat, __pyx_t_2);

#line 25 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":27
 *     force_repeat = [] if force_repeat is None else force_repeat
 * 
 *     if scalar_mode:             # <<<<<<<<<<<<<<
 *         # auto repeat everything on the left in scalar mode
 *         # not really repeat since there would be exactly one copy
 */

#line 27 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_scalar_mode); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

    /* "root_numpy/src/innerjoin.pyx":30
 *         # auto repeat everything on the left in scalar mode
 *         # not really repeat since there would be exactly one copy
 *         force_repeat += left             # <<<<<<<<<<<<<<
 * 
 *     repeat_columns = [c for c in left if data.dtype[c] != 'O' or c in force_repeat]
 */

#line 30 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyNumber_InPlaceAdd(__pyx_v_force_repeat, __pyx_v_left); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 30 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF_SET(__pyx_v_force_repeat, __pyx_t_2);

#line 30 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

#line 30 "root_numpy/src/innerjoin.pyx"
    goto __pyx_L8;

#line 30 "root_numpy/src/innerjoin.pyx"
  }

#line 30 "root_numpy/src/innerjoin.pyx"
  __pyx_L8:;

  /* "root_numpy/src/innerjoin.pyx":32
 *         force_repeat += left
 * 
 *     repeat_columns = [c for c in left if data.dtype[c] != 'O' or c in force_repeat]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] repeat_indices = \
 *         np.array([data.dtype.names.index(x) for x in repeat_columns], np.int)
 */

#line 32 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 32 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_left)) || PyTuple_CheckExact(__pyx_v_left)) {

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = __pyx_v_left; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 32 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 32 "root_numpy/src/innerjoin.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_v_left); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
  }

#line 32 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 32 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 32 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 32 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 32 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 32 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
        #else

#line 32 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
        #endif

#line 32 "root_numpy/src/innerjoin.pyx"
      } else {

#line 32 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 32 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 32 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
        #else

#line 32 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
        #endif

#line 32 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 32 "root_numpy/src/innerjoin.pyx"
{

#line 32 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = __pyx_t_7(__pyx_t_1);

#line 32 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_8)) {

#line 32 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 32 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 32 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 32 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
        }

#line 32 "root_numpy/src/innerjoin.pyx"
        break;

#line 32 "root_numpy/src/innerjoin.pyx"
      }

#line 32 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 32 "root_numpy/src/innerjoin.pyx"
    }

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_8);

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_9 = PyObject_GetItem(__pyx_t_8, __pyx_v_c); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_t_9, __pyx_n_s_O, Py_NE)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_3) {

#line 32 "root_numpy/src/innerjoin.pyx"
    } else {

#line 32 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __pyx_t_3;

#line 32 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L12_bool_binop_done;

#line 32 "root_numpy/src/innerjoin.pyx"
    }

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = (__Pyx_PySequence_Contains(__pyx_v_c, __pyx_v_force_repeat, Py_EQ)); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = (__pyx_t_3 != 0);

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __pyx_t_5;

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_L12_bool_binop_done:;

#line 32 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_4) {

#line 32 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_v_c))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L11;

#line 32 "root_numpy/src/innerjoin.pyx"
    }

#line 32 "root_numpy/src/innerjoin.pyx"
    __pyx_L11:;

#line 32 "root_numpy/src/innerjoin.pyx"
  }

#line 32 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 32 "root_numpy/src/innerjoin.pyx"
  __pyx_v_repeat_columns = ((PyObject*)__pyx_t_2);

#line 32 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":34
 *     repeat_columns = [c for c in left if data.dtype[c] != 'O' or c in force_repeat]
 *     cdef np.ndarray[np.int_t] repeat_indices = \
 *         np.array([data.dtype.names.index(x) for x in repeat_columns], np.int)             # <<<<<<<<<<<<<<
 * 
 *     stretch_columns = [c for c in left if c not in repeat_columns]
 */

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = __pyx_v_repeat_columns; __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 34 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;

#line 34 "root_numpy/src/innerjoin.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_10); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
    #else

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
    #endif

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_names); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_12);

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_index); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_11))) {

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_12)) {

#line 34 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_12);

#line 34 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 34 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_11, function);

#line 34 "root_numpy/src/innerjoin.pyx"
      }

#line 34 "root_numpy/src/innerjoin.pyx"
    }

#line 34 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_12) {

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_x); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
    } else {

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 34 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __Pyx_GIVEREF(__pyx_t_12); __pyx_t_12 = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 34 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_v_x);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_13, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    }

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_10))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  }

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_9))) {

#line 34 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);

#line 34 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_8)) {

#line 34 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 34 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_9, function);

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = 1;

#line 34 "root_numpy/src/innerjoin.pyx"
    }

#line 34 "root_numpy/src/innerjoin.pyx"
  }

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_11);

#line 34 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_8) {

#line 34 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
  }

#line 34 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_11, 0+__pyx_t_6, __pyx_t_1);

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 34 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_11, 1+__pyx_t_6, __pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_10);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = ((PyArrayObject *)__pyx_t_2);

#line 34 "root_numpy/src/innerjoin.pyx"
  {

#line 34 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 34 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_14, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 34 "root_numpy/src/innerjoin.pyx"
      __pyx_v_repeat_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.buf = NULL;

#line 34 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 34 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_repeat_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.shape[0];

#line 34 "root_numpy/src/innerjoin.pyx"
    }

#line 34 "root_numpy/src/innerjoin.pyx"
  }

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = 0;

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_v_repeat_indices = ((PyArrayObject *)__pyx_t_2);

#line 34 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":36
 *         np.array([data.dtype.names.index(x) for x in repeat_columns], np.int)
 * 
 *     stretch_columns = [c for c in left if c not in repeat_columns]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] stretch_indices = \
 *         np.array([data.dtype.names.index(x) for x in stretch_columns], np.int)
 */

#line 36 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 36 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_left)) || PyTuple_CheckExact(__pyx_v_left)) {

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_9 = __pyx_v_left; __Pyx_INCREF(__pyx_t_9); __pyx_t_6 = 0;

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 36 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 36 "root_numpy/src/innerjoin.pyx"
__pyx_t_9 = PyObject_GetIter(__pyx_v_left); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_9);

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
  }

#line 36 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 36 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 36 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_9))) {

#line 36 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_9)) break;

#line 36 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 36 "root_numpy/src/innerjoin.pyx"
        __pyx_t_11 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_11); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
        #else

#line 36 "root_numpy/src/innerjoin.pyx"
        __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
        #endif

#line 36 "root_numpy/src/innerjoin.pyx"
      } else {

#line 36 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_9)) break;

#line 36 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 36 "root_numpy/src/innerjoin.pyx"
        __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_11); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
        #else

#line 36 "root_numpy/src/innerjoin.pyx"
        __pyx_t_11 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
        #endif

#line 36 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 36 "root_numpy/src/innerjoin.pyx"
{

#line 36 "root_numpy/src/innerjoin.pyx"
      __pyx_t_11 = __pyx_t_7(__pyx_t_9);

#line 36 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_11)) {

#line 36 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 36 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 36 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 36 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
        }

#line 36 "root_numpy/src/innerjoin.pyx"
        break;

#line 36 "root_numpy/src/innerjoin.pyx"
      }

#line 36 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_11);

#line 36 "root_numpy/src/innerjoin.pyx"
    }

#line 36 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_11);

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_11 = 0;

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = (__Pyx_PySequence_Contains(__pyx_v_c, __pyx_v_repeat_columns, Py_NE)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = (__pyx_t_4 != 0);

#line 36 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_5) {

#line 36 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_v_c))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L18;

#line 36 "root_numpy/src/innerjoin.pyx"
    }

#line 36 "root_numpy/src/innerjoin.pyx"
    __pyx_L18:;

#line 36 "root_numpy/src/innerjoin.pyx"
  }

#line 36 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 36 "root_numpy/src/innerjoin.pyx"
  __pyx_v_stretch_columns = ((PyObject*)__pyx_t_2);

#line 36 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":38
 *     stretch_columns = [c for c in left if c not in repeat_columns]
 *     cdef np.ndarray[np.int_t] stretch_indices = \
 *         np.array([data.dtype.names.index(x) for x in stretch_columns], np.int)             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.int_t] right_indices = \
 */

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_array); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_11);

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = PyList_New(0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = __pyx_v_stretch_columns; __Pyx_INCREF(__pyx_t_10); __pyx_t_6 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 38 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_10)) break;

#line 38 "root_numpy/src/innerjoin.pyx"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
    #else

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PySequence_ITEM(__pyx_t_10, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
    #endif

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_names); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_13);

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_13)) {

#line 38 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_13);

#line 38 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 38 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_8, function);

#line 38 "root_numpy/src/innerjoin.pyx"
      }

#line 38 "root_numpy/src/innerjoin.pyx"
    }

#line 38 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_13) {

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_x); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
    } else {

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_12 = PyTuple_New(1+1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_12);

#line 38 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_13); __Pyx_GIVEREF(__pyx_t_13); __pyx_t_13 = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 38 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_12, 0+1, __pyx_v_x);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_12, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    }

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_9, (PyObject*)__pyx_t_1))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  }

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_10);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_int); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_11))) {

#line 38 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_11);

#line 38 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_10)) {

#line 38 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_10);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 38 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_11, function);

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = 1;

#line 38 "root_numpy/src/innerjoin.pyx"
    }

#line 38 "root_numpy/src/innerjoin.pyx"
  }

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 38 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_10) {

#line 38 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10); __Pyx_GIVEREF(__pyx_t_10); __pyx_t_10 = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
  }

#line 38 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_6, __pyx_t_9);

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 38 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_6, __pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_1);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_8, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_15 = ((PyArrayObject *)__pyx_t_2);

#line 38 "root_numpy/src/innerjoin.pyx"
  {

#line 38 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 38 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_15, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 38 "root_numpy/src/innerjoin.pyx"
      __pyx_v_stretch_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.buf = NULL;

#line 38 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 38 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_stretch_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.shape[0];

#line 38 "root_numpy/src/innerjoin.pyx"
    }

#line 38 "root_numpy/src/innerjoin.pyx"
  }

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_15 = 0;

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_v_stretch_indices = ((PyArrayObject *)__pyx_t_2);

#line 38 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":41
 * 
 *     cdef np.ndarray[np.int_t] right_indices = \
 *         np.array([data.dtype.names.index(x) for x in right], np.int)             # <<<<<<<<<<<<<<
 * 
 *     # making new dtype
 */

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_11);

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = PyList_New(0); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_11);

#line 41 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_right)) || PyTuple_CheckExact(__pyx_v_right)) {

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = __pyx_v_right; __Pyx_INCREF(__pyx_t_1); __pyx_t_6 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 41 "root_numpy/src/innerjoin.pyx"
__pyx_t_1 = PyObject_GetIter(__pyx_v_right); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 41 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 41 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_1))) {

#line 41 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_1)) break;

#line 41 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 41 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
        #else

#line 41 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
        #endif

#line 41 "root_numpy/src/innerjoin.pyx"
      } else {

#line 41 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 41 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 41 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_6); __Pyx_INCREF(__pyx_t_9); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
        #else

#line 41 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = PySequence_ITEM(__pyx_t_1, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
        #endif

#line 41 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 41 "root_numpy/src/innerjoin.pyx"
{

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __pyx_t_7(__pyx_t_1);

#line 41 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_9)) {

#line 41 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 41 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 41 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 41 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
        }

#line 41 "root_numpy/src/innerjoin.pyx"
        break;

#line 41 "root_numpy/src/innerjoin.pyx"
      }

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_9 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_names); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_12);

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_index); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_10))) {

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_12)) {

#line 41 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_12);

#line 41 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 41 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_10, function);

#line 41 "root_numpy/src/innerjoin.pyx"
      }

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_12) {

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_x); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
    } else {

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 41 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12); __Pyx_GIVEREF(__pyx_t_12); __pyx_t_12 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 41 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_v_x);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_13, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_11, (PyObject*)__pyx_t_9))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_int); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {

#line 41 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);

#line 41 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_1)) {

#line 41 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_1);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 41 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_8, function);

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = 1;

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_10);

#line 41 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_1) {

#line 41 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_1); __Pyx_GIVEREF(__pyx_t_1); __pyx_t_1 = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_6, __pyx_t_11);

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_11);

#line 41 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_6, __pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_11 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_16 = ((PyArrayObject *)__pyx_t_2);

#line 41 "root_numpy/src/innerjoin.pyx"
  {

#line 41 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 41 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_16, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 41 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.buf = NULL;

#line 41 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 41 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_right_indices.diminfo[0].strides = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_indices.diminfo[0].shape = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.shape[0];

#line 41 "root_numpy/src/innerjoin.pyx"
    }

#line 41 "root_numpy/src/innerjoin.pyx"
  }

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_16 = 0;

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_indices = ((PyArrayObject *)__pyx_t_2);

#line 41 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":44
 * 
 *     # making new dtype
 *     new_dtype = []             # <<<<<<<<<<<<<<
 *     for c in left: # preserve order
 *         if c in repeat_columns:
 */

#line 44 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 44 "root_numpy/src/innerjoin.pyx"
  __pyx_v_new_dtype = ((PyObject*)__pyx_t_2);

#line 44 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":45
 *     # making new dtype
 *     new_dtype = []
 *     for c in left: # preserve order             # <<<<<<<<<<<<<<
 *         if c in repeat_columns:
 *             new_dtype.append((c, data.dtype[c]))
 */

#line 45 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_left)) || PyTuple_CheckExact(__pyx_v_left)) {

#line 45 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_v_left; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;

#line 45 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 45 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 45 "root_numpy/src/innerjoin.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_left); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 45 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/innerjoin.pyx"
  }

#line 45 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 45 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 45 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 45 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 45 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 45 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/innerjoin.pyx"
        #else

#line 45 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/innerjoin.pyx"
        #endif

#line 45 "root_numpy/src/innerjoin.pyx"
      } else {

#line 45 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 45 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 45 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/innerjoin.pyx"
        #else

#line 45 "root_numpy/src/innerjoin.pyx"
        __pyx_t_8 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/innerjoin.pyx"
        #endif

#line 45 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 45 "root_numpy/src/innerjoin.pyx"
{

#line 45 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = __pyx_t_7(__pyx_t_2);

#line 45 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_8)) {

#line 45 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 45 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 45 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 45 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/innerjoin.pyx"
        }

#line 45 "root_numpy/src/innerjoin.pyx"
        break;

#line 45 "root_numpy/src/innerjoin.pyx"
      }

#line 45 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 45 "root_numpy/src/innerjoin.pyx"
    }

#line 45 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_8);

#line 45 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = 0;

    /* "root_numpy/src/innerjoin.pyx":46
 *     new_dtype = []
 *     for c in left: # preserve order
 *         if c in repeat_columns:             # <<<<<<<<<<<<<<
 *             new_dtype.append((c, data.dtype[c]))
 *         elif c in stretch_columns:
 */

#line 46 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = (__Pyx_PySequence_Contains(__pyx_v_c, __pyx_v_repeat_columns, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 46 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = (__pyx_t_5 != 0);

#line 46 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_4) {

      /* "root_numpy/src/innerjoin.pyx":47
 *     for c in left: # preserve order
 *         if c in repeat_columns:
 *             new_dtype.append((c, data.dtype[c]))             # <<<<<<<<<<<<<<
 *         elif c in stretch_columns:
 *             new_dtype.append((c, data[c][0].dtype))
 */

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_data, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = PyObject_GetItem(__pyx_t_8, __pyx_v_c); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_c);

#line 47 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_c);

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_c);

#line 47 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_10);

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = 0;

#line 47 "root_numpy/src/innerjoin.pyx"
      __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_8); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 47 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L25;

#line 47 "root_numpy/src/innerjoin.pyx"
    }

    /* "root_numpy/src/innerjoin.pyx":48
 *         if c in repeat_columns:
 *             new_dtype.append((c, data.dtype[c]))
 *         elif c in stretch_columns:             # <<<<<<<<<<<<<<
 *             new_dtype.append((c, data[c][0].dtype))
 *     for c in right: # preserve order
 */

#line 48 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = (__Pyx_PySequence_Contains(__pyx_v_c, __pyx_v_stretch_columns, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 48 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = (__pyx_t_4 != 0);

#line 48 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_5) {

      /* "root_numpy/src/innerjoin.pyx":49
 *             new_dtype.append((c, data.dtype[c]))
 *         elif c in stretch_columns:
 *             new_dtype.append((c, data[c][0].dtype))             # <<<<<<<<<<<<<<
 *     for c in right: # preserve order
 *         new_dtype.append((c, data[c][0].dtype))
 */

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = PyObject_GetItem(__pyx_v_data, __pyx_v_c); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_c);

#line 49 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_c);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_c);

#line 49 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_8);

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_8);

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_8 = 0;

#line 49 "root_numpy/src/innerjoin.pyx"
      __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_10); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 49 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L25;

#line 49 "root_numpy/src/innerjoin.pyx"
    }

#line 49 "root_numpy/src/innerjoin.pyx"
    __pyx_L25:;

    /* "root_numpy/src/innerjoin.pyx":45
 *     # making new dtype
 *     new_dtype = []
 *     for c in left: # preserve order             # <<<<<<<<<<<<<<
 *         if c in repeat_columns:
 *             new_dtype.append((c, data.dtype[c]))
 */

#line 45 "root_numpy/src/innerjoin.pyx"
  }

#line 45 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":50
 *         elif c in stretch_columns:
 *             new_dtype.append((c, data[c][0].dtype))
 *     for c in right: # preserve order             # <<<<<<<<<<<<<<
 *         new_dtype.append((c, data[c][0].dtype))
 * 
 */

#line 50 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_right)) || PyTuple_CheckExact(__pyx_v_right)) {

#line 50 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_v_right; __Pyx_INCREF(__pyx_t_2); __pyx_t_6 = 0;

#line 50 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = NULL;

#line 50 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_6 = -1; 
#line 50 "root_numpy/src/innerjoin.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_right); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 50 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/innerjoin.pyx"
  }

#line 50 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 50 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_7)) {

#line 50 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 50 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 50 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 50 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_10); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/innerjoin.pyx"
        #else

#line 50 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/innerjoin.pyx"
        #endif

#line 50 "root_numpy/src/innerjoin.pyx"
      } else {

#line 50 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 50 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 50 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_10); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/innerjoin.pyx"
        #else

#line 50 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/innerjoin.pyx"
        #endif

#line 50 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 50 "root_numpy/src/innerjoin.pyx"
{

#line 50 "root_numpy/src/innerjoin.pyx"
      __pyx_t_10 = __pyx_t_7(__pyx_t_2);

#line 50 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_10)) {

#line 50 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 50 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 50 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 50 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "root_numpy/src/innerjoin.pyx"
        }

#line 50 "root_numpy/src/innerjoin.pyx"
        break;

#line 50 "root_numpy/src/innerjoin.pyx"
      }

#line 50 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_10);

#line 50 "root_numpy/src/innerjoin.pyx"
    }

#line 50 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_c, __pyx_t_10);

#line 50 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = 0;

    /* "root_numpy/src/innerjoin.pyx":51
 *             new_dtype.append((c, data[c][0].dtype))
 *     for c in right: # preserve order
 *         new_dtype.append((c, data[c][0].dtype))             # <<<<<<<<<<<<<<
 * 
 *     new_dtype.append((fk_name, fk[0].dtype))
 */

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = PyObject_GetItem(__pyx_v_data, __pyx_v_c); if (unlikely(__pyx_t_10 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_dtype); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_10);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_8);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_v_c);

#line 51 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_c);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_v_c);

#line 51 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_10);

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_t_10);

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = 0;

#line 51 "root_numpy/src/innerjoin.pyx"
    __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_8); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "root_numpy/src/innerjoin.pyx":50
 *         elif c in stretch_columns:
 *             new_dtype.append((c, data[c][0].dtype))
 *     for c in right: # preserve order             # <<<<<<<<<<<<<<
 *         new_dtype.append((c, data[c][0].dtype))
 * 
 */

#line 50 "root_numpy/src/innerjoin.pyx"
  }

#line 50 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":53
 *         new_dtype.append((c, data[c][0].dtype))
 * 
 *     new_dtype.append((fk_name, fk[0].dtype))             # <<<<<<<<<<<<<<
 *     ret = None
 * 
 */

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_fk, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dtype); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_fk_name);

#line 53 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_fk_name);

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_v_fk_name);

#line 53 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_8);

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = 0;

#line 53 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_new_dtype, __pyx_t_2); if (unlikely(__pyx_t_17 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 53 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "root_numpy/src/innerjoin.pyx":54
 * 
 *     new_dtype.append((fk_name, fk[0].dtype))
 *     ret = None             # <<<<<<<<<<<<<<
 * 
 *     if scalar_mode: # scalar key mode
 */

#line 54 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(Py_None);

#line 54 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ret = Py_None;

  /* "root_numpy/src/innerjoin.pyx":56
 *     ret = None
 * 
 *     if scalar_mode: # scalar key mode             # <<<<<<<<<<<<<<
 *         ret = _scalar_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,
 */

#line 56 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_scalar_mode); if (unlikely(__pyx_t_5 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_5) {

    /* "root_numpy/src/innerjoin.pyx":58
 *     if scalar_mode: # scalar key mode
 *         ret = _scalar_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,             # <<<<<<<<<<<<<<
 *             repeat_columns, stretch_columns,
 *             repeat_indices, stretch_indices, right_indices)
 */

#line 58 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_v_fk) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fk, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "root_numpy/src/innerjoin.pyx":57
 * 
 *     if scalar_mode: # scalar key mode
 *         ret = _scalar_fk_inner_join(             # <<<<<<<<<<<<<<
 *             data, right, fk, fk_name, new_dtype,
 *             repeat_columns, stretch_columns,
 */

#line 57 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_f_13_librootnumpy__scalar_fk_inner_join(((PyArrayObject *)__pyx_v_data), __pyx_v_right, ((PyArrayObject *)__pyx_v_fk), __pyx_v_fk_name, __pyx_v_new_dtype, __pyx_v_repeat_columns, __pyx_v_stretch_columns, ((PyArrayObject *)__pyx_v_repeat_indices), ((PyArrayObject *)__pyx_v_stretch_indices), ((PyArrayObject *)__pyx_v_right_indices)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 57 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 57 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_2);

#line 57 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

#line 57 "root_numpy/src/innerjoin.pyx"
    goto __pyx_L28;

#line 57 "root_numpy/src/innerjoin.pyx"
  }

#line 57 "root_numpy/src/innerjoin.pyx"
  /*else*/ {

    /* "root_numpy/src/innerjoin.pyx":63
 *     else: # vector key mode
 *         ret = _vector_fk_inner_join(
 *             data, right, fk, fk_name, new_dtype,             # <<<<<<<<<<<<<<
 *             repeat_columns, stretch_columns,
 *             repeat_indices, stretch_indices, right_indices)
 */

#line 63 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_v_data) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_data, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 63 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_v_fk) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_fk, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "root_numpy/src/innerjoin.pyx":62
 *             repeat_indices, stretch_indices, right_indices)
 *     else: # vector key mode
 *         ret = _vector_fk_inner_join(             # <<<<<<<<<<<<<<
 *             data, right, fk, fk_name, new_dtype,
 *             repeat_columns, stretch_columns,
 */

#line 62 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_f_13_librootnumpy__vector_fk_inner_join(((PyArrayObject *)__pyx_v_data), __pyx_v_right, ((PyArrayObject *)__pyx_v_fk), __pyx_v_fk_name, __pyx_v_new_dtype, __pyx_v_repeat_columns, __pyx_v_stretch_columns, ((PyArrayObject *)__pyx_v_repeat_indices), ((PyArrayObject *)__pyx_v_stretch_indices), ((PyArrayObject *)__pyx_v_right_indices)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 62 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 62 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF_SET(__pyx_v_ret, __pyx_t_2);

#line 62 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

#line 62 "root_numpy/src/innerjoin.pyx"
  }

#line 62 "root_numpy/src/innerjoin.pyx"
  __pyx_L28:;

  /* "root_numpy/src/innerjoin.pyx":66
 *             repeat_columns, stretch_columns,
 *             repeat_indices, stretch_indices, right_indices)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 66 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 66 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_ret);

#line 66 "root_numpy/src/innerjoin.pyx"
  __pyx_r = __pyx_v_ret;

#line 66 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/innerjoin.pyx":11
 * # need to INCREF it
 * 
 * cpdef _blockwise_inner_join(data, left, fk, right,             # <<<<<<<<<<<<<<
 *                             force_repeat, fk_name):
 *     # foreign key is given by array of scalar not array of array
 */

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L1_error:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_8);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_9);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_10);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_12);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 11 "root_numpy/src/innerjoin.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._blockwise_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_r = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L2;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L0:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L2:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_scalar_mode);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_i_fk_name);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_repeat_columns);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_repeat_indices);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_stretch_columns);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_stretch_indices);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_right_indices);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_new_dtype);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_c);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_ret);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_x);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_force_repeat);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_fk_name);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 11 "root_numpy/src/innerjoin.pyx"
}

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
/* Python wrapper */

#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_pw_13_librootnumpy_85_blockwise_inner_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/

#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_pw_13_librootnumpy_85_blockwise_inner_join(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_data = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_left = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_fk = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_right = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_force_repeat = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_fk_name = 0
#line 11 "root_numpy/src/innerjoin.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyDeclarations

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_blockwise_inner_join (wrapper)", 0);

#line 11 "root_numpy/src/innerjoin.pyx"
  {

#line 11 "root_numpy/src/innerjoin.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_data,&__pyx_n_s_left,&__pyx_n_s_fk,&__pyx_n_s_right,&__pyx_n_s_force_repeat,&__pyx_n_s_fk_name,0};

#line 11 "root_numpy/src/innerjoin.pyx"
    PyObject* values[6] = {0,0,0,0,0,0};

#line 11 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__pyx_kwds)) {

#line 11 "root_numpy/src/innerjoin.pyx"
      Py_ssize_t kw_args;

#line 11 "root_numpy/src/innerjoin.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 11 "root_numpy/src/innerjoin.pyx"
      switch (pos_args) {
        case  6: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 11 "root_numpy/src/innerjoin.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 11 "root_numpy/src/innerjoin.pyx"
        case  0: break;
        default: 
#line 11 "root_numpy/src/innerjoin.pyx"
goto __pyx_L5_argtuple_error;

#line 11 "root_numpy/src/innerjoin.pyx"
      }

#line 11 "root_numpy/src/innerjoin.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 11 "root_numpy/src/innerjoin.pyx"
      switch (pos_args) {

#line 11 "root_numpy/src/innerjoin.pyx"
        case  0:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_data)) != 0)) kw_args--;
        else 
#line 11 "root_numpy/src/innerjoin.pyx"
goto __pyx_L5_argtuple_error;

#line 11 "root_numpy/src/innerjoin.pyx"
        case  1:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_left)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 1); 
#line 11 "root_numpy/src/innerjoin.pyx"
{__pyx_filename = __pyx_f[8]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
        case  2:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fk)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 2); 
#line 11 "root_numpy/src/innerjoin.pyx"
{__pyx_filename = __pyx_f[8]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
        case  3:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_right)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 3); 
#line 11 "root_numpy/src/innerjoin.pyx"
{__pyx_filename = __pyx_f[8]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
        case  4:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[4] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_force_repeat)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 4); 
#line 11 "root_numpy/src/innerjoin.pyx"
{__pyx_filename = __pyx_f[8]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
        case  5:

#line 11 "root_numpy/src/innerjoin.pyx"
        if (likely((values[5] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_fk_name)) != 0)) kw_args--;

#line 11 "root_numpy/src/innerjoin.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, 5); 
#line 11 "root_numpy/src/innerjoin.pyx"
{__pyx_filename = __pyx_f[8]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/innerjoin.pyx"
        }

#line 11 "root_numpy/src/innerjoin.pyx"
      }

#line 11 "root_numpy/src/innerjoin.pyx"
      if (unlikely(kw_args > 0)) {

#line 11 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_blockwise_inner_join") < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/innerjoin.pyx"
      }

#line 11 "root_numpy/src/innerjoin.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 6) {

#line 11 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L5_argtuple_error;

#line 11 "root_numpy/src/innerjoin.pyx"
    } else {

#line 11 "root_numpy/src/innerjoin.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);

#line 11 "root_numpy/src/innerjoin.pyx"
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);

#line 11 "root_numpy/src/innerjoin.pyx"
    }

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_data = values[0];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_left = values[1];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_fk = values[2];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_right = values[3];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_force_repeat = values[4];

#line 11 "root_numpy/src/innerjoin.pyx"
    __pyx_v_fk_name = values[5];

#line 11 "root_numpy/src/innerjoin.pyx"
  }

#line 11 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_blockwise_inner_join", 1, 6, 6, PyTuple_GET_SIZE(__pyx_args)); 
#line 11 "root_numpy/src/innerjoin.pyx"
{__pyx_filename = __pyx_f[8]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L3_error:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._blockwise_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/innerjoin.pyx"
  return NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = 
#line 11 "root_numpy/src/innerjoin.pyx"
__pyx_pf_13_librootnumpy_84_blockwise_inner_join(__pyx_self, __pyx_v_data, __pyx_v_left, __pyx_v_fk, __pyx_v_right, __pyx_v_force_repeat, __pyx_v_fk_name);

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 11 "root_numpy/src/innerjoin.pyx"
}

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_pf_13_librootnumpy_84_blockwise_inner_join(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_data, PyObject *__pyx_v_left, PyObject *__pyx_v_fk, PyObject *__pyx_v_right, PyObject *__pyx_v_force_repeat, PyObject *__pyx_v_fk_name) {

#line 11 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_blockwise_inner_join", 0);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = __pyx_f_13_librootnumpy__blockwise_inner_join(__pyx_v_data, __pyx_v_left, __pyx_v_fk, __pyx_v_right, __pyx_v_force_repeat, __pyx_v_fk_name, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_r = __pyx_t_1;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 11 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L0;

#line 11 "root_numpy/src/innerjoin.pyx"


#line 11 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L1_error:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_1);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._blockwise_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_r = NULL;

#line 11 "root_numpy/src/innerjoin.pyx"
  __pyx_L0:;

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 11 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 11 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 11 "root_numpy/src/innerjoin.pyx"
}

/* "root_numpy/src/innerjoin.pyx":69
 * 
 * 
 * cdef _vector_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name,
 *                            new_dtype,
 */

#line 69 "root_numpy/src/innerjoin.pyx"


#line 69 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_f_13_librootnumpy__vector_fk_inner_join(PyArrayObject *__pyx_v_data, PyObject *__pyx_v_right, PyArrayObject *__pyx_v_fk, PyObject *__pyx_v_fk_name, PyObject *__pyx_v_new_dtype, PyObject *__pyx_v_repeat_columns, PyObject *__pyx_v_stretch_columns, PyArrayObject *__pyx_v_repeat_indices, PyArrayObject *__pyx_v_stretch_indices, PyArrayObject *__pyx_v_right_indices) {
  long __pyx_v_ndata
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_first_right = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_good_fk_index = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nresult
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_data
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_max_fks
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_good_index = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_fks = NULL
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_ret = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_repeat_result_indices = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_stretch_result_indices = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_right_result_indices = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  int __pyx_v_fk_result_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nrepeat
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nstretch
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nright
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_left_good_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_right_good_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_land
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_source
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_repeat
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_stretch
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_right
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_ret
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_fk
#line 69 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_this_n_good_fk
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_tmp_good_fk_index = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_tmp_fk = 0
#line 69 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_x = NULL
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_good_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_good_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_result_indices
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_tmp_good_fk_index
#line 69 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_tmp_good_fk_index
#line 69 "root_numpy/src/innerjoin.pyx"
;

#line 69 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  long __pyx_t_7;
  PyArrayObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyArrayObject *__pyx_t_17 = NULL;
  PyArrayObject *__pyx_t_18 = NULL;
  PyArrayObject *__pyx_t_19 = NULL;
  PyArrayObject *__pyx_t_20 = NULL;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  long __pyx_t_26;
  long __pyx_t_27;
  long __pyx_t_28;
  long __pyx_t_29;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_vector_fk_inner_join", 0);

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_good_index.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_good_index.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_good_index.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_good_index.rcbuffer = &__pyx_pybuffer_good_index;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_result_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_result_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_result_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_result_indices.rcbuffer = &__pyx_pybuffer_repeat_result_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_result_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_result_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_result_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_result_indices.rcbuffer = &__pyx_pybuffer_stretch_result_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_result_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_result_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_result_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_result_indices.rcbuffer = &__pyx_pybuffer_right_result_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_tmp_good_fk_index.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_tmp_good_fk_index.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_tmp_good_fk_index.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_tmp_good_fk_index.rcbuffer = &__pyx_pybuffer_tmp_good_fk_index;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.rcbuffer = &__pyx_pybuffer_repeat_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.rcbuffer = &__pyx_pybuffer_stretch_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.pybuffer.buf = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.refcount = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.data = NULL;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.rcbuffer = &__pyx_pybuffer_right_indices;

#line 69 "root_numpy/src/innerjoin.pyx"
  {

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 69 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_repeat_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 69 "root_numpy/src/innerjoin.pyx"
  }

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.shape[0];

#line 69 "root_numpy/src/innerjoin.pyx"
  {

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 69 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_stretch_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 69 "root_numpy/src/innerjoin.pyx"
  }

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.shape[0];

#line 69 "root_numpy/src/innerjoin.pyx"
  {

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 69 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_right_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 69 "root_numpy/src/innerjoin.pyx"
  }

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.diminfo[0].strides = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_indices.diminfo[0].shape = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/innerjoin.pyx":76
 *                            np.ndarray[np.int_t] stretch_indices,
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 */

#line 76 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 76 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ndata = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":77
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 *     cdef long nresult = 0
 */

#line 77 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_right, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 77 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 77 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_data), __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 77 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 77 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 77 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 77 "root_numpy/src/innerjoin.pyx"
  __pyx_v_first_right = ((PyArrayObject *)__pyx_t_3);

#line 77 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":78
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')             # <<<<<<<<<<<<<<
 *     cdef long nresult = 0
 *     cdef long i_data = 0
 */

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_ndata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = NULL;

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 78 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 78 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_5)) {

#line 78 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 78 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 78 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 78 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 78 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 78 "root_numpy/src/innerjoin.pyx"
    }

#line 78 "root_numpy/src/innerjoin.pyx"
  }

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 78 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_5) {

#line 78 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 78 "root_numpy/src/innerjoin.pyx"
  }

#line 78 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_t_2);

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_n_s_O);

#line 78 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_n_s_O);

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_n_s_O);

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 78 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_v_good_fk_index = ((PyArrayObject *)__pyx_t_3);

#line 78 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":79
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 *     cdef long nresult = 0             # <<<<<<<<<<<<<<
 *     cdef long i_data = 0
 *     cdef long max_fks
 */

#line 79 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nresult = 0;

  /* "root_numpy/src/innerjoin.pyx":80
 *     cdef np.ndarray good_fk_index = np.empty(ndata, 'O')
 *     cdef long nresult = 0
 *     cdef long i_data = 0             # <<<<<<<<<<<<<<
 *     cdef long max_fks
 *     cdef np.ndarray[np.int_t] good_index
 */

#line 80 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_data = 0;

  /* "root_numpy/src/innerjoin.pyx":84
 *     cdef np.ndarray[np.int_t] good_index
 * 
 *     for i_data from 0 <= i_data < ndata:             # <<<<<<<<<<<<<<
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 */

#line 84 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __pyx_v_ndata;

#line 84 "root_numpy/src/innerjoin.pyx"
  for (__pyx_v_i_data = 0; __pyx_v_i_data < __pyx_t_7; __pyx_v_i_data++) {

    /* "root_numpy/src/innerjoin.pyx":85
 * 
 *     for i_data from 0 <= i_data < ndata:
 *         max_fks = len(first_right[i_data])             # <<<<<<<<<<<<<<
 *         fks = fk[i_data]
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 */

#line 85 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_first_right), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 85 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 85 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 85 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 85 "root_numpy/src/innerjoin.pyx"
    __pyx_v_max_fks = __pyx_t_1;

    /* "root_numpy/src/innerjoin.pyx":86
 *     for i_data from 0 <= i_data < ndata:
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]             # <<<<<<<<<<<<<<
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 *         nresult += len(good_index)
 */

#line 86 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 86; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 86 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 86 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_fks, __pyx_t_3);

#line 86 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/innerjoin.pyx":87
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))             # <<<<<<<<<<<<<<
 *         nresult += len(good_index)
 *         good_fk_index[i_data] = good_index
 */

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_flatnonzero); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_fks, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_max_fks); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_fks, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyNumber_And(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = NULL;

#line 87 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);

#line 87 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_5)) {

#line 87 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 87 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_5);

#line 87 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 87 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_6, function);

#line 87 "root_numpy/src/innerjoin.pyx"
      }

#line 87 "root_numpy/src/innerjoin.pyx"
    }

#line 87 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_5) {

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 87 "root_numpy/src/innerjoin.pyx"
    } else {

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 87 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 87 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_2);

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_t_2);

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    }

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);

#line 87 "root_numpy/src/innerjoin.pyx"
    {

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 87 "root_numpy/src/innerjoin.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer);

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);

#line 87 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 87 "root_numpy/src/innerjoin.pyx"
        PyErr_Fetch(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);

#line 87 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer, (PyObject*)__pyx_v_good_index, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 87 "root_numpy/src/innerjoin.pyx"
          Py_XDECREF(__pyx_t_10); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_12);

#line 87 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 87 "root_numpy/src/innerjoin.pyx"
        } else {

#line 87 "root_numpy/src/innerjoin.pyx"
          PyErr_Restore(__pyx_t_10, __pyx_t_11, __pyx_t_12);

#line 87 "root_numpy/src/innerjoin.pyx"
        }

#line 87 "root_numpy/src/innerjoin.pyx"
      }

#line 87 "root_numpy/src/innerjoin.pyx"
      __pyx_pybuffernd_good_index.diminfo[0].strides = __pyx_pybuffernd_good_index.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_good_index.diminfo[0].shape = __pyx_pybuffernd_good_index.rcbuffer->pybuffer.shape[0];

#line 87 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 87 "root_numpy/src/innerjoin.pyx"
    }

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_8 = 0;

#line 87 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_good_index, ((PyArrayObject *)__pyx_t_3));

#line 87 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/innerjoin.pyx":88
 *         fks = fk[i_data]
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 *         nresult += len(good_index)             # <<<<<<<<<<<<<<
 *         good_fk_index[i_data] = good_index
 * 
 */

#line 88 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_good_index)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 88 "root_numpy/src/innerjoin.pyx"
    __pyx_v_nresult = (__pyx_v_nresult + __pyx_t_1);

    /* "root_numpy/src/innerjoin.pyx":89
 *         good_index = np.flatnonzero((fks >= 0) & (fks < max_fks))
 *         nresult += len(good_index)
 *         good_fk_index[i_data] = good_index             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray ret = np.empty(nresult, new_dtype)
 */

#line 89 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_SetItemInt(((PyObject *)__pyx_v_good_fk_index), __pyx_v_i_data, ((PyObject *)__pyx_v_good_index), long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":91
 *         good_fk_index[i_data] = good_index
 * 
 *     cdef np.ndarray ret = np.empty(nresult, new_dtype)             # <<<<<<<<<<<<<<
 * 
 *     # find where each of repeat/stretch/right lands
 */

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_nresult); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = NULL;

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 91 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);

#line 91 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_2)) {

#line 91 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 91 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 91 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 91 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 91 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 91 "root_numpy/src/innerjoin.pyx"
    }

#line 91 "root_numpy/src/innerjoin.pyx"
  }

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 91 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_2) {

#line 91 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;

#line 91 "root_numpy/src/innerjoin.pyx"
  }

#line 91 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_1, __pyx_t_6);

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_new_dtype);

#line 91 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_1, __pyx_v_new_dtype);

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_v_new_dtype);

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 91 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ret = ((PyArrayObject *)__pyx_t_3);

#line 91 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":95
 *     # find where each of repeat/stretch/right lands
 *     cdef np.ndarray[np.int_t, ndim=1] repeat_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in repeat_columns], np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] stretch_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)
 */

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 95 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_repeat_columns)) || PyTuple_CheckExact(__pyx_v_repeat_columns)) {

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __pyx_v_repeat_columns; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 95 "root_numpy/src/innerjoin.pyx"
__pyx_t_6 = PyObject_GetIter(__pyx_v_repeat_columns); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 95 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_13)) {

#line 95 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_6))) {

#line 95 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;

#line 95 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 95 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
        #else

#line 95 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
        #endif

#line 95 "root_numpy/src/innerjoin.pyx"
      } else {

#line 95 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;

#line 95 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 95 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
        #else

#line 95 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
        #endif

#line 95 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 95 "root_numpy/src/innerjoin.pyx"
{

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __pyx_t_13(__pyx_t_6);

#line 95 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 95 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 95 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 95 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 95 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
        }

#line 95 "root_numpy/src/innerjoin.pyx"
        break;

#line 95 "root_numpy/src/innerjoin.pyx"
      }

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_names); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_15);

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_index); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_14))) {

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_15)) {

#line 95 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_15);

#line 95 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 95 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_14, function);

#line 95 "root_numpy/src/innerjoin.pyx"
      }

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_15) {

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_14, __pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
    } else {

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 95 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __Pyx_GIVEREF(__pyx_t_15); __pyx_t_15 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 95 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_x);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 95 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);

#line 95 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_6)) {

#line 95 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_6);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 95 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_14);

#line 95 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_6) {

#line 95 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_14, 0+__pyx_t_1, __pyx_t_4);

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 95 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_14, 1+__pyx_t_1, __pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = ((PyArrayObject *)__pyx_t_3);

#line 95 "root_numpy/src/innerjoin.pyx"
  {

#line 95 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 95 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 95 "root_numpy/src/innerjoin.pyx"
      __pyx_v_repeat_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 95 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 95 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_repeat_result_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.shape[0];

#line 95 "root_numpy/src/innerjoin.pyx"
    }

#line 95 "root_numpy/src/innerjoin.pyx"
  }

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = 0;

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_v_repeat_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 95 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":97
 *         np.array([ret.dtype.names.index(x) for x in repeat_columns], np.int)
 *     cdef np.ndarray[np.int_t, ndim=1] stretch_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t, ndim=1] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)
 */

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_14);

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 97 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_stretch_columns)) || PyTuple_CheckExact(__pyx_v_stretch_columns)) {

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __pyx_v_stretch_columns; __Pyx_INCREF(__pyx_t_2); __pyx_t_1 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 97 "root_numpy/src/innerjoin.pyx"
__pyx_t_2 = PyObject_GetIter(__pyx_v_stretch_columns); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 97 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_13)) {

#line 97 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_2))) {

#line 97 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_2)) break;

#line 97 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 97 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
        #else

#line 97 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
        #endif

#line 97 "root_numpy/src/innerjoin.pyx"
      } else {

#line 97 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_2)) break;

#line 97 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 97 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
        #else

#line 97 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
        #endif

#line 97 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 97 "root_numpy/src/innerjoin.pyx"
{

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __pyx_t_13(__pyx_t_2);

#line 97 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_4)) {

#line 97 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 97 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 97 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 97 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
        }

#line 97 "root_numpy/src/innerjoin.pyx"
        break;

#line 97 "root_numpy/src/innerjoin.pyx"
      }

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_names); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_16);

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_index); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_16 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_16)) {

#line 97 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_16);

#line 97 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 97 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_6, function);

#line 97 "root_numpy/src/innerjoin.pyx"
      }

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_16) {

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_x); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
    } else {

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 97 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_16); __Pyx_GIVEREF(__pyx_t_16); __pyx_t_16 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 97 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_v_x);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_15, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_int); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_14))) {

#line 97 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);

#line 97 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_2)) {

#line 97 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 97 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_14, function);

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 97 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_2) {

#line 97 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_1, __pyx_t_5);

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 97 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_1, __pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_3);

#line 97 "root_numpy/src/innerjoin.pyx"
  {

#line 97 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 97 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 97 "root_numpy/src/innerjoin.pyx"
      __pyx_v_stretch_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 97 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 97 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_stretch_result_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.shape[0];

#line 97 "root_numpy/src/innerjoin.pyx"
    }

#line 97 "root_numpy/src/innerjoin.pyx"
  }

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_18 = 0;

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_v_stretch_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 97 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":99
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)
 *     cdef np.ndarray[np.int_t, ndim=1] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)             # <<<<<<<<<<<<<<
 * 
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 */

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_14);

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_array); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = PyList_New(0); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_14);

#line 99 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_right)) || PyTuple_CheckExact(__pyx_v_right)) {

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __pyx_v_right; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 99 "root_numpy/src/innerjoin.pyx"
__pyx_t_4 = PyObject_GetIter(__pyx_v_right); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 99 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_13)) {

#line 99 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_4))) {

#line 99 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 99 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 99 "root_numpy/src/innerjoin.pyx"
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
        #else

#line 99 "root_numpy/src/innerjoin.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
        #endif

#line 99 "root_numpy/src/innerjoin.pyx"
      } else {

#line 99 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 99 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 99 "root_numpy/src/innerjoin.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
        #else

#line 99 "root_numpy/src/innerjoin.pyx"
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
        #endif

#line 99 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 99 "root_numpy/src/innerjoin.pyx"
{

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = __pyx_t_13(__pyx_t_4);

#line 99 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_5)) {

#line 99 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 99 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 99 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 99 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
        }

#line 99 "root_numpy/src/innerjoin.pyx"
        break;

#line 99 "root_numpy/src/innerjoin.pyx"
      }

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_names); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_15);

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_15)) {

#line 99 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_15);

#line 99 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 99 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_2, function);

#line 99 "root_numpy/src/innerjoin.pyx"
      }

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_15) {

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_x); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
    } else {

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 99 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __Pyx_GIVEREF(__pyx_t_15); __pyx_t_15 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 99 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_x);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_16, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_14, (PyObject*)__pyx_t_5))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 99 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);

#line 99 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 99 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 99 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 99 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

#line 99 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_1, __pyx_t_14);

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_14);

#line 99 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_1, __pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_14 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_19 = ((PyArrayObject *)__pyx_t_3);

#line 99 "root_numpy/src/innerjoin.pyx"
  {

#line 99 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 99 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_19, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 99 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 99 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 99 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_right_result_indices.diminfo[0].strides = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_result_indices.diminfo[0].shape = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.shape[0];

#line 99 "root_numpy/src/innerjoin.pyx"
    }

#line 99 "root_numpy/src/innerjoin.pyx"
  }

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_19 = 0;

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 99 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":101
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)
 * 
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)             # <<<<<<<<<<<<<<
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nstretch = len(stretch_indices)
 */

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_ret), __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_names); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_index); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = NULL;

#line 101 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {

#line 101 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);

#line 101 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_2)) {

#line 101 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 101 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_2);

#line 101 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 101 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 101 "root_numpy/src/innerjoin.pyx"
    }

#line 101 "root_numpy/src/innerjoin.pyx"
  }

#line 101 "root_numpy/src/innerjoin.pyx"
  if (!__pyx_t_2) {

#line 101 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_fk_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 101 "root_numpy/src/innerjoin.pyx"
  } else {

#line 101 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 101 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_v_fk_name);

#line 101 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_fk_name);

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_v_fk_name);

#line 101 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 101 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  }

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 101 "root_numpy/src/innerjoin.pyx"
  __pyx_v_fk_result_index = __pyx_t_9;

  /* "root_numpy/src/innerjoin.pyx":102
 * 
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 *     cdef long nrepeat = len(repeat_indices)             # <<<<<<<<<<<<<<
 *     cdef long nstretch = len(stretch_indices)
 *     cdef long nright = len(right_indices)
 */

#line 102 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_repeat_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 102 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nrepeat = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":103
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nstretch = len(stretch_indices)             # <<<<<<<<<<<<<<
 *     cdef long nright = len(right_indices)
 *     cdef long left_good_index = 0
 */

#line 103 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_stretch_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 103 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nstretch = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":104
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nstretch = len(stretch_indices)
 *     cdef long nright = len(right_indices)             # <<<<<<<<<<<<<<
 *     cdef long left_good_index = 0
 *     cdef long right_good_index = 0
 */

#line 104 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_right_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 104 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nright = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":105
 *     cdef long nstretch = len(stretch_indices)
 *     cdef long nright = len(right_indices)
 *     cdef long left_good_index = 0             # <<<<<<<<<<<<<<
 *     cdef long right_good_index = 0
 *     cdef long i_land = 0
 */

#line 105 "root_numpy/src/innerjoin.pyx"
  __pyx_v_left_good_index = 0;

  /* "root_numpy/src/innerjoin.pyx":106
 *     cdef long nright = len(right_indices)
 *     cdef long left_good_index = 0
 *     cdef long right_good_index = 0             # <<<<<<<<<<<<<<
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 */

#line 106 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_good_index = 0;

  /* "root_numpy/src/innerjoin.pyx":107
 *     cdef long left_good_index = 0
 *     cdef long right_good_index = 0
 *     cdef long i_land = 0             # <<<<<<<<<<<<<<
 *     cdef long i_source = 0
 *     cdef long i_repeat = 0
 */

#line 107 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_land = 0;

  /* "root_numpy/src/innerjoin.pyx":108
 *     cdef long right_good_index = 0
 *     cdef long i_land = 0
 *     cdef long i_source = 0             # <<<<<<<<<<<<<<
 *     cdef long i_repeat = 0
 *     cdef long i_stretch = 0
 */

#line 108 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_source = 0;

  /* "root_numpy/src/innerjoin.pyx":109
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 *     cdef long i_repeat = 0             # <<<<<<<<<<<<<<
 *     cdef long i_stretch = 0
 *     cdef long i_right = 0
 */

#line 109 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_repeat = 0;

  /* "root_numpy/src/innerjoin.pyx":110
 *     cdef long i_source = 0
 *     cdef long i_repeat = 0
 *     cdef long i_stretch = 0             # <<<<<<<<<<<<<<
 *     cdef long i_right = 0
 *     cdef long i_ret = 0
 */

#line 110 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_stretch = 0;

  /* "root_numpy/src/innerjoin.pyx":111
 *     cdef long i_repeat = 0
 *     cdef long i_stretch = 0
 *     cdef long i_right = 0             # <<<<<<<<<<<<<<
 *     cdef long i_ret = 0
 *     cdef long i_fk = 0
 */

#line 111 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_right = 0;

  /* "root_numpy/src/innerjoin.pyx":112
 *     cdef long i_stretch = 0
 *     cdef long i_right = 0
 *     cdef long i_ret = 0             # <<<<<<<<<<<<<<
 *     cdef long i_fk = 0
 *     cdef long this_n_good_fk = 0
 */

#line 112 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_ret = 0;

  /* "root_numpy/src/innerjoin.pyx":113
 *     cdef long i_right = 0
 *     cdef long i_ret = 0
 *     cdef long i_fk = 0             # <<<<<<<<<<<<<<
 *     cdef long this_n_good_fk = 0
 *     cdef np.ndarray[np.int_t] tmp_good_fk_index
 */

#line 113 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_fk = 0;

  /* "root_numpy/src/innerjoin.pyx":114
 *     cdef long i_ret = 0
 *     cdef long i_fk = 0
 *     cdef long this_n_good_fk = 0             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] tmp_good_fk_index
 *     cdef np.ndarray tmp_fk
 */

#line 114 "root_numpy/src/innerjoin.pyx"
  __pyx_v_this_n_good_fk = 0;

  /* "root_numpy/src/innerjoin.pyx":118
 *     cdef np.ndarray tmp_fk
 * 
 *     for i_data from 0 <= i_data < ndata:             # <<<<<<<<<<<<<<
 *         tmp_good_fk_index = good_fk_index[i_data]
 *         tmp_fk = fk[i_data]
 */

#line 118 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __pyx_v_ndata;

#line 118 "root_numpy/src/innerjoin.pyx"
  for (__pyx_v_i_data = 0; __pyx_v_i_data < __pyx_t_7; __pyx_v_i_data++) {

    /* "root_numpy/src/innerjoin.pyx":119
 * 
 *     for i_data from 0 <= i_data < ndata:
 *         tmp_good_fk_index = good_fk_index[i_data]             # <<<<<<<<<<<<<<
 *         tmp_fk = fk[i_data]
 *         this_n_good_fk = len(tmp_good_fk_index)
 */

#line 119 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_good_fk_index), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 119 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 119 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 119 "root_numpy/src/innerjoin.pyx"
    __pyx_t_20 = ((PyArrayObject *)__pyx_t_3);

#line 119 "root_numpy/src/innerjoin.pyx"
    {

#line 119 "root_numpy/src/innerjoin.pyx"
      __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 119 "root_numpy/src/innerjoin.pyx"
      __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer);

#line 119 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = __Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer, (PyObject*)__pyx_t_20, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack);

#line 119 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 < 0)) {

#line 119 "root_numpy/src/innerjoin.pyx"
        PyErr_Fetch(&__pyx_t_12, &__pyx_t_11, &__pyx_t_10);

#line 119 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer, (PyObject*)__pyx_v_tmp_good_fk_index, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 119 "root_numpy/src/innerjoin.pyx"
          Py_XDECREF(__pyx_t_12); Py_XDECREF(__pyx_t_11); Py_XDECREF(__pyx_t_10);

#line 119 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferFallbackError();

#line 119 "root_numpy/src/innerjoin.pyx"
        } else {

#line 119 "root_numpy/src/innerjoin.pyx"
          PyErr_Restore(__pyx_t_12, __pyx_t_11, __pyx_t_10);

#line 119 "root_numpy/src/innerjoin.pyx"
        }

#line 119 "root_numpy/src/innerjoin.pyx"
      }

#line 119 "root_numpy/src/innerjoin.pyx"
      __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].strides = __pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].shape = __pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer.shape[0];

#line 119 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 119 "root_numpy/src/innerjoin.pyx"
    }

#line 119 "root_numpy/src/innerjoin.pyx"
    __pyx_t_20 = 0;

#line 119 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_tmp_good_fk_index, ((PyArrayObject *)__pyx_t_3));

#line 119 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/innerjoin.pyx":120
 *     for i_data from 0 <= i_data < ndata:
 *         tmp_good_fk_index = good_fk_index[i_data]
 *         tmp_fk = fk[i_data]             # <<<<<<<<<<<<<<
 *         this_n_good_fk = len(tmp_good_fk_index)
 *         for i_fk from 0 <= i_fk < this_n_good_fk:
 */

#line 120 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 120 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 120 "root_numpy/src/innerjoin.pyx"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 120 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_tmp_fk, ((PyArrayObject *)__pyx_t_3));

#line 120 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = 0;

    /* "root_numpy/src/innerjoin.pyx":121
 *         tmp_good_fk_index = good_fk_index[i_data]
 *         tmp_fk = fk[i_data]
 *         this_n_good_fk = len(tmp_good_fk_index)             # <<<<<<<<<<<<<<
 *         for i_fk from 0 <= i_fk < this_n_good_fk:
 *             left_good_index = tmp_good_fk_index[i_fk]
 */

#line 121 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_tmp_good_fk_index)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 121 "root_numpy/src/innerjoin.pyx"
    __pyx_v_this_n_good_fk = __pyx_t_1;

    /* "root_numpy/src/innerjoin.pyx":122
 *         tmp_fk = fk[i_data]
 *         this_n_good_fk = len(tmp_good_fk_index)
 *         for i_fk from 0 <= i_fk < this_n_good_fk:             # <<<<<<<<<<<<<<
 *             left_good_index = tmp_good_fk_index[i_fk]
 *             right_good_index = tmp_fk[left_good_index]
 */

#line 122 "root_numpy/src/innerjoin.pyx"
    __pyx_t_21 = __pyx_v_this_n_good_fk;

#line 122 "root_numpy/src/innerjoin.pyx"
    for (__pyx_v_i_fk = 0; __pyx_v_i_fk < __pyx_t_21; __pyx_v_i_fk++) {

      /* "root_numpy/src/innerjoin.pyx":123
 *         this_n_good_fk = len(tmp_good_fk_index)
 *         for i_fk from 0 <= i_fk < this_n_good_fk:
 *             left_good_index = tmp_good_fk_index[i_fk]             # <<<<<<<<<<<<<<
 *             right_good_index = tmp_fk[left_good_index]
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 */

#line 123 "root_numpy/src/innerjoin.pyx"
      __pyx_t_22 = __pyx_v_i_fk;

#line 123 "root_numpy/src/innerjoin.pyx"
      __pyx_t_9 = -1;

#line 123 "root_numpy/src/innerjoin.pyx"
      if (__pyx_t_22 < 0) {

#line 123 "root_numpy/src/innerjoin.pyx"
        __pyx_t_22 += __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].shape;

#line 123 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_22 < 0)) __pyx_t_9 = 0;
      } else 
#line 123 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].shape)) __pyx_t_9 = 0;

#line 123 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_9 != -1)) {

#line 123 "root_numpy/src/innerjoin.pyx"
        __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 123 "root_numpy/src/innerjoin.pyx"
        {__pyx_filename = __pyx_f[8]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 123 "root_numpy/src/innerjoin.pyx"
      }

#line 123 "root_numpy/src/innerjoin.pyx"
      __pyx_v_left_good_index = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_tmp_good_fk_index.diminfo[0].strides));

      /* "root_numpy/src/innerjoin.pyx":124
 *         for i_fk from 0 <= i_fk < this_n_good_fk:
 *             left_good_index = tmp_good_fk_index[i_fk]
 *             right_good_index = tmp_fk[left_good_index]             # <<<<<<<<<<<<<<
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]
 */

#line 124 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_tmp_fk), __pyx_v_left_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 124 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 124 "root_numpy/src/innerjoin.pyx"
      __pyx_t_23 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_23 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 124 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 124 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_good_index = __pyx_t_23;

      /* "root_numpy/src/innerjoin.pyx":125
 *             left_good_index = tmp_good_fk_index[i_fk]
 *             right_good_index = tmp_fk[left_good_index]
 *             for i_repeat from 0 <= i_repeat < nrepeat:             # <<<<<<<<<<<<<<
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 */

#line 125 "root_numpy/src/innerjoin.pyx"
      __pyx_t_23 = __pyx_v_nrepeat;

#line 125 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_repeat = 0; __pyx_v_i_repeat < __pyx_t_23; __pyx_v_i_repeat++) {

        /* "root_numpy/src/innerjoin.pyx":126
 *             right_good_index = tmp_fk[left_good_index]
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 */

#line 126 "root_numpy/src/innerjoin.pyx"
        __pyx_t_24 = __pyx_v_i_repeat;

#line 126 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 126 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_24 < 0) {

#line 126 "root_numpy/src/innerjoin.pyx"
          __pyx_t_24 += __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape;

#line 126 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_9 = 0;
        } else 
#line 126 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 126 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 126 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 126 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/innerjoin.pyx"
        }

#line 126 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_repeat_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":127
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 *             for i_stretch from 0 <= i_stretch < nstretch:
 */

#line 127 "root_numpy/src/innerjoin.pyx"
        __pyx_t_25 = __pyx_v_i_repeat;

#line 127 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 127 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_25 < 0) {

#line 127 "root_numpy/src/innerjoin.pyx"
          __pyx_t_25 += __pyx_pybuffernd_repeat_indices.diminfo[0].shape;

#line 127 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_9 = 0;
        } else 
#line 127 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_repeat_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 127 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 127 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 127 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 127 "root_numpy/src/innerjoin.pyx"
        }

#line 127 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_repeat_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":128
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster             # <<<<<<<<<<<<<<
 *             for i_stretch from 0 <= i_stretch < nstretch:
 *                 i_land = stretch_result_indices[i_stretch]
 */

#line 128 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 128 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 128 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 128 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 128; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 128 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 128 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":129
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 *             for i_stretch from 0 <= i_stretch < nstretch:             # <<<<<<<<<<<<<<
 *                 i_land = stretch_result_indices[i_stretch]
 *                 i_source = stretch_indices[i_stretch]
 */

#line 129 "root_numpy/src/innerjoin.pyx"
      __pyx_t_23 = __pyx_v_nstretch;

#line 129 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_stretch = 0; __pyx_v_i_stretch < __pyx_t_23; __pyx_v_i_stretch++) {

        /* "root_numpy/src/innerjoin.pyx":130
 *                 ret[i_ret][i_land] = data[i_data][i_source] # TODO: make this faster
 *             for i_stretch from 0 <= i_stretch < nstretch:
 *                 i_land = stretch_result_indices[i_stretch]             # <<<<<<<<<<<<<<
 *                 i_source = stretch_indices[i_stretch]
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 */

#line 130 "root_numpy/src/innerjoin.pyx"
        __pyx_t_26 = __pyx_v_i_stretch;

#line 130 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 130 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_26 < 0) {

#line 130 "root_numpy/src/innerjoin.pyx"
          __pyx_t_26 += __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape;

#line 130 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_26 < 0)) __pyx_t_9 = 0;
        } else 
#line 130 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_26 >= __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 130 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 130 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 130 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 130 "root_numpy/src/innerjoin.pyx"
        }

#line 130 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_stretch_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":131
 *             for i_stretch from 0 <= i_stretch < nstretch:
 *                 i_land = stretch_result_indices[i_stretch]
 *                 i_source = stretch_indices[i_stretch]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 *             for i_right from 0 <= i_right < nright:
 */

#line 131 "root_numpy/src/innerjoin.pyx"
        __pyx_t_27 = __pyx_v_i_stretch;

#line 131 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 131 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_27 < 0) {

#line 131 "root_numpy/src/innerjoin.pyx"
          __pyx_t_27 += __pyx_pybuffernd_stretch_indices.diminfo[0].shape;

#line 131 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_27 < 0)) __pyx_t_9 = 0;
        } else 
#line 131 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_27 >= __pyx_pybuffernd_stretch_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 131 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 131 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 131 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 131 "root_numpy/src/innerjoin.pyx"
        }

#line 131 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.buf, __pyx_t_27, __pyx_pybuffernd_stretch_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":132
 *                 i_land = stretch_result_indices[i_stretch]
 *                 i_source = stretch_indices[i_stretch]
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster             # <<<<<<<<<<<<<<
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]
 */

#line 132 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 132 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 132 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_left_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 132 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 132 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 132 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 132 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":133
 *                 i_source = stretch_indices[i_stretch]
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 *             for i_right from 0 <= i_right < nright:             # <<<<<<<<<<<<<<
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 */

#line 133 "root_numpy/src/innerjoin.pyx"
      __pyx_t_23 = __pyx_v_nright;

#line 133 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_right = 0; __pyx_v_i_right < __pyx_t_23; __pyx_v_i_right++) {

        /* "root_numpy/src/innerjoin.pyx":134
 *                 ret[i_ret][i_land] = data[i_data][i_source][left_good_index] # TODO: make this faster
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]             # <<<<<<<<<<<<<<
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 */

#line 134 "root_numpy/src/innerjoin.pyx"
        __pyx_t_28 = __pyx_v_i_right;

#line 134 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 134 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_28 < 0) {

#line 134 "root_numpy/src/innerjoin.pyx"
          __pyx_t_28 += __pyx_pybuffernd_right_result_indices.diminfo[0].shape;

#line 134 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_28 < 0)) __pyx_t_9 = 0;
        } else 
#line 134 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_28 >= __pyx_pybuffernd_right_result_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 134 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 134 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 134 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 134 "root_numpy/src/innerjoin.pyx"
        }

#line 134 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf, __pyx_t_28, __pyx_pybuffernd_right_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":135
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 *             ret[i_ret][fk_result_index] = right_good_index
 */

#line 135 "root_numpy/src/innerjoin.pyx"
        __pyx_t_29 = __pyx_v_i_right;

#line 135 "root_numpy/src/innerjoin.pyx"
        __pyx_t_9 = -1;

#line 135 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_29 < 0) {

#line 135 "root_numpy/src/innerjoin.pyx"
          __pyx_t_29 += __pyx_pybuffernd_right_indices.diminfo[0].shape;

#line 135 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_29 < 0)) __pyx_t_9 = 0;
        } else 
#line 135 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_29 >= __pyx_pybuffernd_right_indices.diminfo[0].shape)) __pyx_t_9 = 0;

#line 135 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_9 != -1)) {

#line 135 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_9);

#line 135 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 135 "root_numpy/src/innerjoin.pyx"
        }

#line 135 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.buf, __pyx_t_29, __pyx_pybuffernd_right_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":136
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster             # <<<<<<<<<<<<<<
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 */

#line 136 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 136 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 136 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_right_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_6);

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 136 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 136 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_6, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 136 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 136 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":137
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 *             ret[i_ret][fk_result_index] = right_good_index             # <<<<<<<<<<<<<<
 *             i_ret += 1
 *     return ret
 */

#line 137 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = __Pyx_PyInt_From_long(__pyx_v_right_good_index); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 137 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_ret), __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 137 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 137 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_fk_result_index, __pyx_t_6, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 137 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 137 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "root_numpy/src/innerjoin.pyx":138
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index] # TODO: make this faster
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */

#line 138 "root_numpy/src/innerjoin.pyx"
      __pyx_v_i_ret = (__pyx_v_i_ret + 1);

#line 138 "root_numpy/src/innerjoin.pyx"
    }

#line 138 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":139
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 139 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 139 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));

#line 139 "root_numpy/src/innerjoin.pyx"
  __pyx_r = ((PyObject *)__pyx_v_ret);

#line 139 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/innerjoin.pyx":69
 * 
 * 
 * cdef _vector_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name,
 *                            new_dtype,
 */

#line 69 "root_numpy/src/innerjoin.pyx"


#line 69 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_L1_error:;

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_14);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_15);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_16);

#line 69 "root_numpy/src/innerjoin.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._vector_fk_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_r = 0;

#line 69 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L2;

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_L0:;

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_good_index.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_tmp_good_fk_index.rcbuffer->pybuffer);

#line 69 "root_numpy/src/innerjoin.pyx"
  __pyx_L2:;

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_first_right);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_good_fk_index);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_good_index);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_fks);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_repeat_result_indices);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_stretch_result_indices);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_right_result_indices);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp_good_fk_index);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_tmp_fk);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_x);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 69 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 69 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 69 "root_numpy/src/innerjoin.pyx"
}

/* "root_numpy/src/innerjoin.pyx":142
 * 
 * 
 * cdef _scalar_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name, new_dtype,
 *                            repeat_columns, stretch_columns,
 */

#line 142 "root_numpy/src/innerjoin.pyx"


#line 142 "root_numpy/src/innerjoin.pyx"
static PyObject *__pyx_f_13_librootnumpy__scalar_fk_inner_join(PyArrayObject *__pyx_v_data, PyObject *__pyx_v_right, PyArrayObject *__pyx_v_fk, PyObject *__pyx_v_fk_name, PyObject *__pyx_v_new_dtype, PyObject *__pyx_v_repeat_columns, PyObject *__pyx_v_stretch_columns, PyArrayObject *__pyx_v_repeat_indices, CYTHON_UNUSED PyArrayObject *__pyx_v_stretch_indices, PyArrayObject *__pyx_v_right_indices) {
  long __pyx_v_ndata
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_first_right = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_fk_index_good = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_max_fks
#line 142 "root_numpy/src/innerjoin.pyx"
;
  int __pyx_v_fks
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nresult
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_data
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_ret = NULL
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_repeat_result_indices = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  CYTHON_UNUSED PyArrayObject *__pyx_v_stretch_result_indices = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyArrayObject *__pyx_v_right_result_indices = 0
#line 142 "root_numpy/src/innerjoin.pyx"
;
  int __pyx_v_fk_result_index
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nrepeat
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_nright
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_repeat
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_right
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_land
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_source
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_i_ret
#line 142 "root_numpy/src/innerjoin.pyx"
;
  long __pyx_v_right_good_index
#line 142 "root_numpy/src/innerjoin.pyx"
;
  PyObject *__pyx_v_x = NULL
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_fk_index_good
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_fk_index_good
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_repeat_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_repeat_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_right_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_right_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_stretch_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_stretch_result_indices
#line 142 "root_numpy/src/innerjoin.pyx"
;

#line 142 "root_numpy/src/innerjoin.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyArrayObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  int __pyx_t_10;
  __pyx_t_5numpy_int8_t __pyx_t_11;
  int __pyx_t_12;
  long __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyArrayObject *__pyx_t_17 = NULL;
  PyArrayObject *__pyx_t_18 = NULL;
  PyArrayObject *__pyx_t_19 = NULL;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  long __pyx_t_23;
  long __pyx_t_24;
  long __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannySetupContext("_scalar_fk_inner_join", 0);

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_fk_index_good.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_fk_index_good.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_fk_index_good.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_fk_index_good.rcbuffer = &__pyx_pybuffer_fk_index_good;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_result_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_result_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_result_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_result_indices.rcbuffer = &__pyx_pybuffer_repeat_result_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_result_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_result_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_result_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_result_indices.rcbuffer = &__pyx_pybuffer_stretch_result_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_result_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_result_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_result_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_result_indices.rcbuffer = &__pyx_pybuffer_right_result_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_repeat_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.rcbuffer = &__pyx_pybuffer_repeat_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_stretch_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.rcbuffer = &__pyx_pybuffer_stretch_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.pybuffer.buf = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffer_right_indices.refcount = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.data = NULL;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.rcbuffer = &__pyx_pybuffer_right_indices;

#line 142 "root_numpy/src/innerjoin.pyx"
  {

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 142 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_repeat_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 142 "root_numpy/src/innerjoin.pyx"
  }

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_repeat_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.shape[0];

#line 142 "root_numpy/src/innerjoin.pyx"
  {

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 142 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_stretch_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 142 "root_numpy/src/innerjoin.pyx"
  }

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_stretch_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer.shape[0];

#line 142 "root_numpy/src/innerjoin.pyx"
  {

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 142 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer, (PyObject*)__pyx_v_right_indices, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 142 "root_numpy/src/innerjoin.pyx"
  }

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_pybuffernd_right_indices.diminfo[0].strides = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_indices.diminfo[0].shape = __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/src/innerjoin.pyx":148
 *                            np.ndarray[np.int_t] stretch_indices,
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata, np.int8)
 */

#line 148 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_data)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 148 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ndata = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":149
 *                            np.ndarray[np.int_t] right_indices):
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata, np.int8)
 *     cdef long max_fks
 */

#line 149 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_right, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 149 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 149 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_data), __pyx_t_2); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 149 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 149 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 149 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 149 "root_numpy/src/innerjoin.pyx"
  __pyx_v_first_right = ((PyArrayObject *)__pyx_t_3);

#line 149 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":150
 *     cdef long ndata = len(data)
 *     cdef np.ndarray first_right = data[right[0]]
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata, np.int8)             # <<<<<<<<<<<<<<
 *     cdef long max_fks
 *     cdef int fks = 0
 */

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_ndata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_int8); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = NULL;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {

#line 150 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);

#line 150 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_5)) {

#line 150 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 150 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 150 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 150 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_4, function);

#line 150 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 150 "root_numpy/src/innerjoin.pyx"
    }

#line 150 "root_numpy/src/innerjoin.pyx"
  }

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 150 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_5) {

#line 150 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __Pyx_GIVEREF(__pyx_t_5); __pyx_t_5 = NULL;

#line 150 "root_numpy/src/innerjoin.pyx"
  }

#line 150 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_2);

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 150 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = ((PyArrayObject *)__pyx_t_3);

#line 150 "root_numpy/src/innerjoin.pyx"
  {

#line 150 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 150 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer, (PyObject*)__pyx_t_8, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int8_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 150 "root_numpy/src/innerjoin.pyx"
      __pyx_v_fk_index_good = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.buf = NULL;

#line 150 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 150 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_fk_index_good.diminfo[0].strides = __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_fk_index_good.diminfo[0].shape = __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.shape[0];

#line 150 "root_numpy/src/innerjoin.pyx"
    }

#line 150 "root_numpy/src/innerjoin.pyx"
  }

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_8 = 0;

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_v_fk_index_good = ((PyArrayObject *)__pyx_t_3);

#line 150 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":152
 *     cdef np.ndarray[np.int8_t, ndim=1] fk_index_good = np.empty(ndata, np.int8)
 *     cdef long max_fks
 *     cdef int fks = 0             # <<<<<<<<<<<<<<
 *     cdef long nresult = 0
 * 
 */

#line 152 "root_numpy/src/innerjoin.pyx"
  __pyx_v_fks = 0;

  /* "root_numpy/src/innerjoin.pyx":153
 *     cdef long max_fks
 *     cdef int fks = 0
 *     cdef long nresult = 0             # <<<<<<<<<<<<<<
 * 
 *     for i_data from 0 <= i_data < ndata:
 */

#line 153 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nresult = 0;

  /* "root_numpy/src/innerjoin.pyx":155
 *     cdef long nresult = 0
 * 
 *     for i_data from 0 <= i_data < ndata:             # <<<<<<<<<<<<<<
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 */

#line 155 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __pyx_v_ndata;

#line 155 "root_numpy/src/innerjoin.pyx"
  for (__pyx_v_i_data = 0; __pyx_v_i_data < __pyx_t_9; __pyx_v_i_data++) {

    /* "root_numpy/src/innerjoin.pyx":156
 * 
 *     for i_data from 0 <= i_data < ndata:
 *         max_fks = len(first_right[i_data])             # <<<<<<<<<<<<<<
 *         fks = fk[i_data]
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)
 */

#line 156 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_first_right), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 156 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 156 "root_numpy/src/innerjoin.pyx"
    __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 156 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 156 "root_numpy/src/innerjoin.pyx"
    __pyx_v_max_fks = __pyx_t_1;

    /* "root_numpy/src/innerjoin.pyx":157
 *     for i_data from 0 <= i_data < ndata:
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]             # <<<<<<<<<<<<<<
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)
 * 
 */

#line 157 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 157 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 157 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 157 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 157 "root_numpy/src/innerjoin.pyx"
    __pyx_v_fks = __pyx_t_10;

    /* "root_numpy/src/innerjoin.pyx":158
 *         max_fks = len(first_right[i_data])
 *         fks = fk[i_data]
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)             # <<<<<<<<<<<<<<
 * 
 *     nresult = np.count_nonzero(fk_index_good)
 */

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = (__pyx_v_fks >= 0);

#line 158 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_12) {

#line 158 "root_numpy/src/innerjoin.pyx"
    } else {

#line 158 "root_numpy/src/innerjoin.pyx"
      __pyx_t_11 = __pyx_t_12;

#line 158 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L5_bool_binop_done;

#line 158 "root_numpy/src/innerjoin.pyx"
    }

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = (__pyx_v_fks < __pyx_v_max_fks);

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_11 = __pyx_t_12;

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_L5_bool_binop_done:;

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_13 = __pyx_v_i_data;

#line 158 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = -1;

#line 158 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_13 < 0) {

#line 158 "root_numpy/src/innerjoin.pyx"
      __pyx_t_13 += __pyx_pybuffernd_fk_index_good.diminfo[0].shape;

#line 158 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_13 < 0)) __pyx_t_10 = 0;
    } else 
#line 158 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_13 >= __pyx_pybuffernd_fk_index_good.diminfo[0].shape)) __pyx_t_10 = 0;

#line 158 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 158 "root_numpy/src/innerjoin.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 158 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 158 "root_numpy/src/innerjoin.pyx"
    }

#line 158 "root_numpy/src/innerjoin.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.buf, __pyx_t_13, __pyx_pybuffernd_fk_index_good.diminfo[0].strides) = __pyx_t_11;

#line 158 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":160
 *         fk_index_good[i_data] = (fks >= 0) and (fks < max_fks)
 * 
 *     nresult = np.count_nonzero(fk_index_good)             # <<<<<<<<<<<<<<
 *     ret = np.empty(nresult, new_dtype)
 * 
 */

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_count_nonzero); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 160 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {

#line 160 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);

#line 160 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 160 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 160 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 160 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 160 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_7, function);

#line 160 "root_numpy/src/innerjoin.pyx"
    }

#line 160 "root_numpy/src/innerjoin.pyx"
  }

#line 160 "root_numpy/src/innerjoin.pyx"
  if (!__pyx_t_4) {

#line 160 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)__pyx_v_fk_index_good)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 160 "root_numpy/src/innerjoin.pyx"
  } else {

#line 160 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 160 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(((PyObject *)__pyx_v_fk_index_good));

#line 160 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, ((PyObject *)__pyx_v_fk_index_good));

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_fk_index_good));

#line 160 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 160 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 160 "root_numpy/src/innerjoin.pyx"
  }

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_9 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 160 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 160 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nresult = __pyx_t_9;

  /* "root_numpy/src/innerjoin.pyx":161
 * 
 *     nresult = np.count_nonzero(fk_index_good)
 *     ret = np.empty(nresult, new_dtype)             # <<<<<<<<<<<<<<
 * 
 *     # find where each of repeat/stretch/right lands
 */

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_empty); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_nresult); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_6))) {

#line 161 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);

#line 161 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 161 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);

#line 161 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 161 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 161 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_6, function);

#line 161 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 161 "root_numpy/src/innerjoin.pyx"
    }

#line 161 "root_numpy/src/innerjoin.pyx"
  }

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 161 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

#line 161 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;

#line 161 "root_numpy/src/innerjoin.pyx"
  }

#line 161 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 0+__pyx_t_1, __pyx_t_7);

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_new_dtype);

#line 161 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_2, 1+__pyx_t_1, __pyx_v_new_dtype);

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_v_new_dtype);

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_v_ret = __pyx_t_3;

#line 161 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":165
 *     # find where each of repeat/stretch/right lands
 *     cdef np.ndarray[np.int_t] repeat_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in repeat_columns], np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] stretch_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)
 */

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 165 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_repeat_columns)) || PyTuple_CheckExact(__pyx_v_repeat_columns)) {

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = __pyx_v_repeat_columns; __Pyx_INCREF(__pyx_t_7); __pyx_t_1 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 165 "root_numpy/src/innerjoin.pyx"
__pyx_t_7 = PyObject_GetIter(__pyx_v_repeat_columns); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 165 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_14)) {

#line 165 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_7))) {

#line 165 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_7)) break;

#line 165 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 165 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
        #else

#line 165 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
        #endif

#line 165 "root_numpy/src/innerjoin.pyx"
      } else {

#line 165 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_7)) break;

#line 165 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 165 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
        #else

#line 165 "root_numpy/src/innerjoin.pyx"
        __pyx_t_4 = PySequence_ITEM(__pyx_t_7, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
        #endif

#line 165 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 165 "root_numpy/src/innerjoin.pyx"
{

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __pyx_t_14(__pyx_t_7);

#line 165 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_4)) {

#line 165 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 165 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 165 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 165 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
        }

#line 165 "root_numpy/src/innerjoin.pyx"
        break;

#line 165 "root_numpy/src/innerjoin.pyx"
      }

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_names); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_15);

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_index); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_15)) {

#line 165 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_15);

#line 165 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 165 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_5, function);

#line 165 "root_numpy/src/innerjoin.pyx"
      }

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_15) {

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_x); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
    } else {

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 165 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __Pyx_GIVEREF(__pyx_t_15); __pyx_t_15 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 165 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_x);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_16, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {

#line 165 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);

#line 165 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_7)) {

#line 165 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_7);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 165 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_2, function);

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 165 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_7) {

#line 165 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __Pyx_GIVEREF(__pyx_t_7); __pyx_t_7 = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_1, __pyx_t_6);

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 165 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_1, __pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = ((PyArrayObject *)__pyx_t_3);

#line 165 "root_numpy/src/innerjoin.pyx"
  {

#line 165 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 165 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_17, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 165 "root_numpy/src/innerjoin.pyx"
      __pyx_v_repeat_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 165 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 165 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_repeat_result_indices.diminfo[0].strides = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape = __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.shape[0];

#line 165 "root_numpy/src/innerjoin.pyx"
    }

#line 165 "root_numpy/src/innerjoin.pyx"
  }

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_17 = 0;

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_v_repeat_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 165 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":167
 *         np.array([ret.dtype.names.index(x) for x in repeat_columns], np.int)
 *     cdef np.ndarray[np.int_t] stretch_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.int_t] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)
 */

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 167 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_stretch_columns)) || PyTuple_CheckExact(__pyx_v_stretch_columns)) {

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __pyx_v_stretch_columns; __Pyx_INCREF(__pyx_t_4); __pyx_t_1 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 167 "root_numpy/src/innerjoin.pyx"
__pyx_t_4 = PyObject_GetIter(__pyx_v_stretch_columns); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 167 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_14)) {

#line 167 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_4))) {

#line 167 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_4)) break;

#line 167 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 167 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
        #else

#line 167 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
        #endif

#line 167 "root_numpy/src/innerjoin.pyx"
      } else {

#line 167 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_4)) break;

#line 167 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 167 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_6); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
        #else

#line 167 "root_numpy/src/innerjoin.pyx"
        __pyx_t_6 = PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
        #endif

#line 167 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 167 "root_numpy/src/innerjoin.pyx"
{

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = __pyx_t_14(__pyx_t_4);

#line 167 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_6)) {

#line 167 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 167 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 167 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 167 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
        }

#line 167 "root_numpy/src/innerjoin.pyx"
        break;

#line 167 "root_numpy/src/innerjoin.pyx"
      }

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_names); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_16);

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_16 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_16)) {

#line 167 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_16);

#line 167 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 167 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_7, function);

#line 167 "root_numpy/src/innerjoin.pyx"
      }

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_16) {

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_x); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
    } else {

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 167 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_16); __Pyx_GIVEREF(__pyx_t_16); __pyx_t_16 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 167 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_v_x);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_15, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_int); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 167 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);

#line 167 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 167 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 167 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 167 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_4) {

#line 167 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_1, __pyx_t_2);

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 167 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_1, __pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_6);

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_18 = ((PyArrayObject *)__pyx_t_3);

#line 167 "root_numpy/src/innerjoin.pyx"
  {

#line 167 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 167 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_18, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 167 "root_numpy/src/innerjoin.pyx"
      __pyx_v_stretch_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 167 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 167 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_stretch_result_indices.diminfo[0].strides = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_stretch_result_indices.diminfo[0].shape = __pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer.shape[0];

#line 167 "root_numpy/src/innerjoin.pyx"
    }

#line 167 "root_numpy/src/innerjoin.pyx"
  }

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_18 = 0;

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_v_stretch_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 167 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":169
 *         np.array([ret.dtype.names.index(x) for x in stretch_columns], np.int)
 *     cdef np.ndarray[np.int_t] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)             # <<<<<<<<<<<<<<
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 * 
 */

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 169 "root_numpy/src/innerjoin.pyx"
  if (likely(PyList_CheckExact(__pyx_v_right)) || PyTuple_CheckExact(__pyx_v_right)) {

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = __pyx_v_right; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
  } else {
    __pyx_t_1 = -1; 
#line 169 "root_numpy/src/innerjoin.pyx"
__pyx_t_6 = PyObject_GetIter(__pyx_v_right); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_6);

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_14 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  for (;;) {

#line 169 "root_numpy/src/innerjoin.pyx"
    if (likely(!__pyx_t_14)) {

#line 169 "root_numpy/src/innerjoin.pyx"
      if (likely(PyList_CheckExact(__pyx_t_6))) {

#line 169 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;

#line 169 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 169 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
        #else

#line 169 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
        #endif

#line 169 "root_numpy/src/innerjoin.pyx"
      } else {

#line 169 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_6)) break;

#line 169 "root_numpy/src/innerjoin.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 169 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
        #else

#line 169 "root_numpy/src/innerjoin.pyx"
        __pyx_t_2 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
        #endif

#line 169 "root_numpy/src/innerjoin.pyx"
      }
    } else 
#line 169 "root_numpy/src/innerjoin.pyx"
{

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __pyx_t_14(__pyx_t_6);

#line 169 "root_numpy/src/innerjoin.pyx"
      if (unlikely(!__pyx_t_2)) {

#line 169 "root_numpy/src/innerjoin.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 169 "root_numpy/src/innerjoin.pyx"
        if (exc_type) {

#line 169 "root_numpy/src/innerjoin.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 169 "root_numpy/src/innerjoin.pyx"
          else {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
        }

#line 169 "root_numpy/src/innerjoin.pyx"
        break;

#line 169 "root_numpy/src/innerjoin.pyx"
      }

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_names); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_15);

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_index); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_15 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
      if (likely(__pyx_t_15)) {

#line 169 "root_numpy/src/innerjoin.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(__pyx_t_15);

#line 169 "root_numpy/src/innerjoin.pyx"
        __Pyx_INCREF(function);

#line 169 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF_SET(__pyx_t_4, function);

#line 169 "root_numpy/src/innerjoin.pyx"
      }

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
    if (!__pyx_t_15) {

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_x); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
    } else {

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_16 = PyTuple_New(1+1); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_16);

#line 169 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_15); __Pyx_GIVEREF(__pyx_t_15); __pyx_t_15 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_v_x);

#line 169 "root_numpy/src/innerjoin.pyx"
      PyTuple_SET_ITEM(__pyx_t_16, 0+1, __pyx_v_x);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GIVEREF(__pyx_v_x);

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_16, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_2))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_int); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_6 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {

#line 169 "root_numpy/src/innerjoin.pyx"
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);

#line 169 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_6)) {

#line 169 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_6);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 169 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_7, function);

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_t_1 = 1;

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = PyTuple_New(2+__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 169 "root_numpy/src/innerjoin.pyx"
  if (__pyx_t_6) {

#line 169 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __Pyx_GIVEREF(__pyx_t_6); __pyx_t_6 = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_1, __pyx_t_5);

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 169 "root_numpy/src/innerjoin.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_1, __pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_5 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_2 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_19 = ((PyArrayObject *)__pyx_t_3);

#line 169 "root_numpy/src/innerjoin.pyx"
  {

#line 169 "root_numpy/src/innerjoin.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 169 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer, (PyObject*)__pyx_t_19, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {

#line 169 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_result_indices = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf = NULL;

#line 169 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 169 "root_numpy/src/innerjoin.pyx"
__pyx_pybuffernd_right_result_indices.diminfo[0].strides = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_right_result_indices.diminfo[0].shape = __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.shape[0];

#line 169 "root_numpy/src/innerjoin.pyx"
    }

#line 169 "root_numpy/src/innerjoin.pyx"
  }

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_19 = 0;

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_result_indices = ((PyArrayObject *)__pyx_t_3);

#line 169 "root_numpy/src/innerjoin.pyx"
  __pyx_t_3 = 0;

  /* "root_numpy/src/innerjoin.pyx":170
 *     cdef np.ndarray[np.int_t] right_result_indices = \
 *         np.array([ret.dtype.names.index(x) for x in right], np.int)
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)             # <<<<<<<<<<<<<<
 * 
 *     cdef long nrepeat = len(repeat_indices)
 */

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_ret, __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_names); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_4 = NULL;

#line 170 "root_numpy/src/innerjoin.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {

#line 170 "root_numpy/src/innerjoin.pyx"
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);

#line 170 "root_numpy/src/innerjoin.pyx"
    if (likely(__pyx_t_4)) {

#line 170 "root_numpy/src/innerjoin.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 170 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(__pyx_t_4);

#line 170 "root_numpy/src/innerjoin.pyx"
      __Pyx_INCREF(function);

#line 170 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF_SET(__pyx_t_7, function);

#line 170 "root_numpy/src/innerjoin.pyx"
    }

#line 170 "root_numpy/src/innerjoin.pyx"
  }

#line 170 "root_numpy/src/innerjoin.pyx"
  if (!__pyx_t_4) {

#line 170 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_v_fk_name); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 170 "root_numpy/src/innerjoin.pyx"
  } else {

#line 170 "root_numpy/src/innerjoin.pyx"
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_2);

#line 170 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_INCREF(__pyx_v_fk_name);

#line 170 "root_numpy/src/innerjoin.pyx"
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_v_fk_name);

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_GIVEREF(__pyx_v_fk_name);

#line 170 "root_numpy/src/innerjoin.pyx"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_GOTREF(__pyx_t_3);

#line 170 "root_numpy/src/innerjoin.pyx"
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  }

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 170 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 170 "root_numpy/src/innerjoin.pyx"
  __pyx_v_fk_result_index = __pyx_t_10;

  /* "root_numpy/src/innerjoin.pyx":172
 *     cdef int fk_result_index = ret.dtype.names.index(fk_name)
 * 
 *     cdef long nrepeat = len(repeat_indices)             # <<<<<<<<<<<<<<
 *     cdef long nright = len(right_indices)
 *     cdef long i_repeat = 0
 */

#line 172 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_repeat_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 172 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nrepeat = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":173
 * 
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nright = len(right_indices)             # <<<<<<<<<<<<<<
 *     cdef long i_repeat = 0
 *     cdef long i_right = 0
 */

#line 173 "root_numpy/src/innerjoin.pyx"
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_right_indices)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 173 "root_numpy/src/innerjoin.pyx"
  __pyx_v_nright = __pyx_t_1;

  /* "root_numpy/src/innerjoin.pyx":174
 *     cdef long nrepeat = len(repeat_indices)
 *     cdef long nright = len(right_indices)
 *     cdef long i_repeat = 0             # <<<<<<<<<<<<<<
 *     cdef long i_right = 0
 *     cdef long i_land = 0
 */

#line 174 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_repeat = 0;

  /* "root_numpy/src/innerjoin.pyx":175
 *     cdef long nright = len(right_indices)
 *     cdef long i_repeat = 0
 *     cdef long i_right = 0             # <<<<<<<<<<<<<<
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 */

#line 175 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_right = 0;

  /* "root_numpy/src/innerjoin.pyx":176
 *     cdef long i_repeat = 0
 *     cdef long i_right = 0
 *     cdef long i_land = 0             # <<<<<<<<<<<<<<
 *     cdef long i_source = 0
 *     cdef long i_ret = 0
 */

#line 176 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_land = 0;

  /* "root_numpy/src/innerjoin.pyx":177
 *     cdef long i_right = 0
 *     cdef long i_land = 0
 *     cdef long i_source = 0             # <<<<<<<<<<<<<<
 *     cdef long i_ret = 0
 *     cdef long right_good_index=0
 */

#line 177 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_source = 0;

  /* "root_numpy/src/innerjoin.pyx":178
 *     cdef long i_land = 0
 *     cdef long i_source = 0
 *     cdef long i_ret = 0             # <<<<<<<<<<<<<<
 *     cdef long right_good_index=0
 * 
 */

#line 178 "root_numpy/src/innerjoin.pyx"
  __pyx_v_i_ret = 0;

  /* "root_numpy/src/innerjoin.pyx":179
 *     cdef long i_source = 0
 *     cdef long i_ret = 0
 *     cdef long right_good_index=0             # <<<<<<<<<<<<<<
 * 
 *     for i_data from 0 <= i_data < ndata:
 */

#line 179 "root_numpy/src/innerjoin.pyx"
  __pyx_v_right_good_index = 0;

  /* "root_numpy/src/innerjoin.pyx":181
 *     cdef long right_good_index=0
 * 
 *     for i_data from 0 <= i_data < ndata:             # <<<<<<<<<<<<<<
 *         if fk_index_good[i_data]:
 *             right_good_index = fk[i_data]
 */

#line 181 "root_numpy/src/innerjoin.pyx"
  __pyx_t_9 = __pyx_v_ndata;

#line 181 "root_numpy/src/innerjoin.pyx"
  for (__pyx_v_i_data = 0; __pyx_v_i_data < __pyx_t_9; __pyx_v_i_data++) {

    /* "root_numpy/src/innerjoin.pyx":182
 * 
 *     for i_data from 0 <= i_data < ndata:
 *         if fk_index_good[i_data]:             # <<<<<<<<<<<<<<
 *             right_good_index = fk[i_data]
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 */

#line 182 "root_numpy/src/innerjoin.pyx"
    __pyx_t_20 = __pyx_v_i_data;

#line 182 "root_numpy/src/innerjoin.pyx"
    __pyx_t_10 = -1;

#line 182 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_20 < 0) {

#line 182 "root_numpy/src/innerjoin.pyx"
      __pyx_t_20 += __pyx_pybuffernd_fk_index_good.diminfo[0].shape;

#line 182 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__pyx_t_20 < 0)) __pyx_t_10 = 0;
    } else 
#line 182 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_fk_index_good.diminfo[0].shape)) __pyx_t_10 = 0;

#line 182 "root_numpy/src/innerjoin.pyx"
    if (unlikely(__pyx_t_10 != -1)) {

#line 182 "root_numpy/src/innerjoin.pyx"
      __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 182 "root_numpy/src/innerjoin.pyx"
      {__pyx_filename = __pyx_f[8]; __pyx_lineno = 182; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 182 "root_numpy/src/innerjoin.pyx"
    }

#line 182 "root_numpy/src/innerjoin.pyx"
    __pyx_t_12 = ((*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int8_t *, __pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_fk_index_good.diminfo[0].strides)) != 0);

#line 182 "root_numpy/src/innerjoin.pyx"
    if (__pyx_t_12) {

      /* "root_numpy/src/innerjoin.pyx":183
 *     for i_data from 0 <= i_data < ndata:
 *         if fk_index_good[i_data]:
 *             right_good_index = fk[i_data]             # <<<<<<<<<<<<<<
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]
 */

#line 183 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_fk), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 183 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 183 "root_numpy/src/innerjoin.pyx"
      __pyx_t_21 = __Pyx_PyInt_As_long(__pyx_t_3); if (unlikely((__pyx_t_21 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 183 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 183 "root_numpy/src/innerjoin.pyx"
      __pyx_v_right_good_index = __pyx_t_21;

      /* "root_numpy/src/innerjoin.pyx":184
 *         if fk_index_good[i_data]:
 *             right_good_index = fk[i_data]
 *             for i_repeat from 0 <= i_repeat < nrepeat:             # <<<<<<<<<<<<<<
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 */

#line 184 "root_numpy/src/innerjoin.pyx"
      __pyx_t_21 = __pyx_v_nrepeat;

#line 184 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_repeat = 0; __pyx_v_i_repeat < __pyx_t_21; __pyx_v_i_repeat++) {

        /* "root_numpy/src/innerjoin.pyx":185
 *             right_good_index = fk[i_data]
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 */

#line 185 "root_numpy/src/innerjoin.pyx"
        __pyx_t_22 = __pyx_v_i_repeat;

#line 185 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = -1;

#line 185 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_22 < 0) {

#line 185 "root_numpy/src/innerjoin.pyx"
          __pyx_t_22 += __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape;

#line 185 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_10 = 0;
        } else 
#line 185 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_repeat_result_indices.diminfo[0].shape)) __pyx_t_10 = 0;

#line 185 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_10 != -1)) {

#line 185 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 185 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 185 "root_numpy/src/innerjoin.pyx"
        }

#line 185 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_repeat_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":186
 *             for i_repeat from 0 <= i_repeat < nrepeat:
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 *             for i_right from 0 <= i_right < nright:
 */

#line 186 "root_numpy/src/innerjoin.pyx"
        __pyx_t_23 = __pyx_v_i_repeat;

#line 186 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = -1;

#line 186 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_23 < 0) {

#line 186 "root_numpy/src/innerjoin.pyx"
          __pyx_t_23 += __pyx_pybuffernd_repeat_indices.diminfo[0].shape;

#line 186 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_23 < 0)) __pyx_t_10 = 0;
        } else 
#line 186 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_repeat_indices.diminfo[0].shape)) __pyx_t_10 = 0;

#line 186 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_10 != -1)) {

#line 186 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 186 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 186; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 186 "root_numpy/src/innerjoin.pyx"
        }

#line 186 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_repeat_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":187
 *                 i_land = repeat_result_indices[i_repeat]
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source]             # <<<<<<<<<<<<<<
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]
 */

#line 187 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 187 "root_numpy/src/innerjoin.pyx"
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 187 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ret, __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 187 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 187 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 187 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":188
 *                 i_source = repeat_indices[i_repeat]
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 *             for i_right from 0 <= i_right < nright:             # <<<<<<<<<<<<<<
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 */

#line 188 "root_numpy/src/innerjoin.pyx"
      __pyx_t_21 = __pyx_v_nright;

#line 188 "root_numpy/src/innerjoin.pyx"
      for (__pyx_v_i_right = 0; __pyx_v_i_right < __pyx_t_21; __pyx_v_i_right++) {

        /* "root_numpy/src/innerjoin.pyx":189
 *                 ret[i_ret][i_land] = data[i_data][i_source]
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]             # <<<<<<<<<<<<<<
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 */

#line 189 "root_numpy/src/innerjoin.pyx"
        __pyx_t_24 = __pyx_v_i_right;

#line 189 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = -1;

#line 189 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_24 < 0) {

#line 189 "root_numpy/src/innerjoin.pyx"
          __pyx_t_24 += __pyx_pybuffernd_right_result_indices.diminfo[0].shape;

#line 189 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_24 < 0)) __pyx_t_10 = 0;
        } else 
#line 189 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_24 >= __pyx_pybuffernd_right_result_indices.diminfo[0].shape)) __pyx_t_10 = 0;

#line 189 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_10 != -1)) {

#line 189 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 189 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 189 "root_numpy/src/innerjoin.pyx"
        }

#line 189 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_land = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer.buf, __pyx_t_24, __pyx_pybuffernd_right_result_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":190
 *             for i_right from 0 <= i_right < nright:
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]             # <<<<<<<<<<<<<<
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 *             ret[i_ret][fk_result_index] = right_good_index
 */

#line 190 "root_numpy/src/innerjoin.pyx"
        __pyx_t_25 = __pyx_v_i_right;

#line 190 "root_numpy/src/innerjoin.pyx"
        __pyx_t_10 = -1;

#line 190 "root_numpy/src/innerjoin.pyx"
        if (__pyx_t_25 < 0) {

#line 190 "root_numpy/src/innerjoin.pyx"
          __pyx_t_25 += __pyx_pybuffernd_right_indices.diminfo[0].shape;

#line 190 "root_numpy/src/innerjoin.pyx"
          if (unlikely(__pyx_t_25 < 0)) __pyx_t_10 = 0;
        } else 
#line 190 "root_numpy/src/innerjoin.pyx"
if (unlikely(__pyx_t_25 >= __pyx_pybuffernd_right_indices.diminfo[0].shape)) __pyx_t_10 = 0;

#line 190 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__pyx_t_10 != -1)) {

#line 190 "root_numpy/src/innerjoin.pyx"
          __Pyx_RaiseBufferIndexError(__pyx_t_10);

#line 190 "root_numpy/src/innerjoin.pyx"
          {__pyx_filename = __pyx_f[8]; __pyx_lineno = 190; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 190 "root_numpy/src/innerjoin.pyx"
        }

#line 190 "root_numpy/src/innerjoin.pyx"
        __pyx_v_i_source = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_right_indices.rcbuffer->pybuffer.buf, __pyx_t_25, __pyx_pybuffernd_right_indices.diminfo[0].strides));

        /* "root_numpy/src/innerjoin.pyx":191
 *                 i_land = right_result_indices[i_right]
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]             # <<<<<<<<<<<<<<
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 */

#line 191 "root_numpy/src/innerjoin.pyx"
        __pyx_t_7 = __Pyx_GetItemInt(((PyObject *)__pyx_v_data), __pyx_v_i_data, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 191 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_7, __pyx_v_i_source, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 191 "root_numpy/src/innerjoin.pyx"
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_right_good_index, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_7);

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 191 "root_numpy/src/innerjoin.pyx"
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ret, __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_GOTREF(__pyx_t_3);

#line 191 "root_numpy/src/innerjoin.pyx"
        if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_i_land, __pyx_t_7, long, 1, __Pyx_PyInt_From_long, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 191 "root_numpy/src/innerjoin.pyx"
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 191 "root_numpy/src/innerjoin.pyx"
      }

      /* "root_numpy/src/innerjoin.pyx":192
 *                 i_source = right_indices[i_right]
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 *             ret[i_ret][fk_result_index] = right_good_index             # <<<<<<<<<<<<<<
 *             i_ret += 1
 *     return ret
 */

#line 192 "root_numpy/src/innerjoin.pyx"
      __pyx_t_7 = __Pyx_PyInt_From_long(__pyx_v_right_good_index); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 192 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_7);

#line 192 "root_numpy/src/innerjoin.pyx"
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_ret, __pyx_v_i_ret, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 192 "root_numpy/src/innerjoin.pyx"
      __Pyx_GOTREF(__pyx_t_3);

#line 192 "root_numpy/src/innerjoin.pyx"
      if (unlikely(__Pyx_SetItemInt(__pyx_t_3, __pyx_v_fk_result_index, __pyx_t_7, int, 1, __Pyx_PyInt_From_int, 0, 1, 1) < 0)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 192 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 192 "root_numpy/src/innerjoin.pyx"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "root_numpy/src/innerjoin.pyx":193
 *                 ret[i_ret][i_land] = data[i_data][i_source][right_good_index]
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1             # <<<<<<<<<<<<<<
 *     return ret
 */

#line 193 "root_numpy/src/innerjoin.pyx"
      __pyx_v_i_ret = (__pyx_v_i_ret + 1);

#line 193 "root_numpy/src/innerjoin.pyx"
      goto __pyx_L15;

#line 193 "root_numpy/src/innerjoin.pyx"
    }

#line 193 "root_numpy/src/innerjoin.pyx"
    __pyx_L15:;

#line 193 "root_numpy/src/innerjoin.pyx"
  }

  /* "root_numpy/src/innerjoin.pyx":194
 *             ret[i_ret][fk_result_index] = right_good_index
 *             i_ret += 1
 *     return ret             # <<<<<<<<<<<<<<
 */

#line 194 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 194 "root_numpy/src/innerjoin.pyx"
  __Pyx_INCREF(__pyx_v_ret);

#line 194 "root_numpy/src/innerjoin.pyx"
  __pyx_r = __pyx_v_ret;

#line 194 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L0;

  /* "root_numpy/src/innerjoin.pyx":142
 * 
 * 
 * cdef _scalar_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name, new_dtype,
 *                            repeat_columns, stretch_columns,
 */

#line 142 "root_numpy/src/innerjoin.pyx"


#line 142 "root_numpy/src/innerjoin.pyx"
  /* function exit code */

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_L1_error:;

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_7);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_15);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_t_16);

#line 142 "root_numpy/src/innerjoin.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_AddTraceback("_librootnumpy._scalar_fk_inner_join", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_r = 0;

#line 142 "root_numpy/src/innerjoin.pyx"
  goto __pyx_L2;

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_L0:;

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_fk_index_good.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_repeat_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_right_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_stretch_result_indices.rcbuffer->pybuffer);

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_L2:;

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_first_right);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_fk_index_good);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_ret);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_repeat_result_indices);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_stretch_result_indices);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_right_result_indices);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XDECREF(__pyx_v_x);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_RefNannyFinishContext();

#line 142 "root_numpy/src/innerjoin.pyx"
  return __pyx_r;

#line 142 "root_numpy/src/innerjoin.pyx"
}

/* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 91 "array.pxd"


#line 91 "array.pxd"
/* Python wrapper */

#line 91 "array.pxd"
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 91 "array.pxd"
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 91 "array.pxd"
  int __pyx_r;

#line 91 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 91 "array.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 91 "array.pxd"
__pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 91 "array.pxd"


#line 91 "array.pxd"
  /* function exit code */

#line 91 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 91 "array.pxd"
  return __pyx_r;

#line 91 "array.pxd"
}

#line 91 "array.pxd"


#line 91 "array.pxd"
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL
#line 91 "array.pxd"
;

#line 91 "array.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 91 "array.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 91 "array.pxd"
  if (__pyx_v_info != NULL) {

#line 91 "array.pxd"
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 91 "array.pxd"
    __Pyx_GIVEREF(__pyx_v_info->obj);

#line 91 "array.pxd"
  }

  /* "array.pxd":96
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */

#line 96 "array.pxd"
  __pyx_t_1 = PyInt_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 96 "array.pxd"
  __pyx_v_item_count = __pyx_t_1;

#line 96 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":98
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */

#line 98 "array.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":99
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */

#line 99 "array.pxd"
  __pyx_t_2 = __pyx_v_self->data.as_chars;

#line 99 "array.pxd"
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":100
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */

#line 100 "array.pxd"
  __pyx_v_info->readonly = 0;

  /* "array.pxd":101
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */

#line 101 "array.pxd"
  __pyx_v_info->ndim = 1;

  /* "array.pxd":102
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */

#line 102 "array.pxd"
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;

#line 102 "array.pxd"
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":103
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 */

#line 103 "array.pxd"
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 103 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "array.pxd"
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 103 "array.pxd"
  __Pyx_GOTREF(__pyx_t_4);

#line 103 "array.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "array.pxd"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 103 "array.pxd"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 103 "array.pxd"
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":105
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */

#line 105 "array.pxd"
  __pyx_v_info->shape = ((Py_ssize_t *)PyMem_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":106
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */

#line 106 "array.pxd"
  __pyx_t_6 = ((!(__pyx_v_info->shape != 0)) != 0);

#line 106 "array.pxd"
  if (__pyx_t_6) {

    /* "array.pxd":107
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */

#line 107 "array.pxd"
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[9]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 107 "array.pxd"
  }

  /* "array.pxd":108
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */

#line 108 "array.pxd"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "array.pxd"
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":109
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */

#line 109 "array.pxd"
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":111
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */

#line 111 "array.pxd"
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":112
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */

#line 112 "array.pxd"
  __pyx_t_3 = __pyx_v_self->ob_descr->typecode;

#line 112 "array.pxd"
  (__pyx_v_info->format[0]) = __pyx_t_3;

  /* "array.pxd":113
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */

#line 113 "array.pxd"
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":114
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */

#line 114 "array.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 114 "array.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 114 "array.pxd"
  __Pyx_GOTREF(__pyx_v_info->obj);

#line 114 "array.pxd"
  __Pyx_DECREF(__pyx_v_info->obj);

#line 114 "array.pxd"
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 91 "array.pxd"


#line 91 "array.pxd"
  /* function exit code */

#line 91 "array.pxd"
  __pyx_r = 0;

#line 91 "array.pxd"
  goto __pyx_L0;

#line 91 "array.pxd"
  __pyx_L1_error:;

#line 91 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 91 "array.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 91 "array.pxd"
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 91 "array.pxd"
  __pyx_r = -1;

#line 91 "array.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

#line 91 "array.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 91 "array.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

#line 91 "array.pxd"
  }

#line 91 "array.pxd"
  goto __pyx_L2;

#line 91 "array.pxd"
  __pyx_L0:;

#line 91 "array.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

#line 91 "array.pxd"
    __Pyx_GOTREF(Py_None);

#line 91 "array.pxd"
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

#line 91 "array.pxd"
  }

#line 91 "array.pxd"
  __pyx_L2:;

#line 91 "array.pxd"
  __Pyx_XDECREF(__pyx_v_item_count);

#line 91 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 91 "array.pxd"
  return __pyx_r;

#line 91 "array.pxd"
}

/* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyMem_Free(info.shape)
 * 
 */

#line 116 "array.pxd"


#line 116 "array.pxd"
/* Python wrapper */

#line 116 "array.pxd"
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 116 "array.pxd"
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 116 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 116 "array.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 116 "array.pxd"
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 116 "array.pxd"


#line 116 "array.pxd"
  /* function exit code */

#line 116 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 116 "array.pxd"
}

#line 116 "array.pxd"


#line 116 "array.pxd"
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations

#line 116 "array.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "array.pxd":117
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyMem_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */

#line 117 "array.pxd"
  PyMem_Free(__pyx_v_info->shape);

  /* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyMem_Free(info.shape)
 * 
 */

#line 116 "array.pxd"


#line 116 "array.pxd"
  /* function exit code */

#line 116 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 116 "array.pxd"
}

/* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

#line 128 "array.pxd"


#line 128 "array.pxd"
static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = NULL
#line 128 "array.pxd"
;

#line 128 "array.pxd"
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 128 "array.pxd"
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":132
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */

#line 132 "array.pxd"
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 132 "array.pxd"
  __pyx_v_op = ((arrayobject *)__pyx_t_1);

#line 132 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":133
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */

#line 133 "array.pxd"
  __pyx_t_3 = (__pyx_v_zero != 0);

#line 133 "array.pxd"
  if (__pyx_t_3) {

#line 133 "array.pxd"
  } else {

#line 133 "array.pxd"
    __pyx_t_2 = __pyx_t_3;

#line 133 "array.pxd"
    goto __pyx_L4_bool_binop_done;

#line 133 "array.pxd"
  }

#line 133 "array.pxd"
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);

#line 133 "array.pxd"
  __pyx_t_4 = (__pyx_t_3 != 0);

#line 133 "array.pxd"
  __pyx_t_2 = __pyx_t_4;

#line 133 "array.pxd"
  __pyx_L4_bool_binop_done:;

#line 133 "array.pxd"
  if (__pyx_t_2) {

    /* "array.pxd":134
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */

#line 134 "array.pxd"
    memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize));

#line 134 "array.pxd"
    goto __pyx_L3;

#line 134 "array.pxd"
  }

#line 134 "array.pxd"
  __pyx_L3:;

  /* "array.pxd":135
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */

#line 135 "array.pxd"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 135 "array.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_op));

#line 135 "array.pxd"
  __pyx_r = __pyx_v_op;

#line 135 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

#line 128 "array.pxd"


#line 128 "array.pxd"
  /* function exit code */

#line 128 "array.pxd"
  __pyx_L1_error:;

#line 128 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 128 "array.pxd"
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 128 "array.pxd"
  __pyx_r = 0;

#line 128 "array.pxd"
  __pyx_L0:;

#line 128 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_op);

#line 128 "array.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 128 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 128 "array.pxd"
  return __pyx_r;

#line 128 "array.pxd"
}

/* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

#line 137 "array.pxd"


#line 137 "array.pxd"
static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = NULL
#line 137 "array.pxd"
;

#line 137 "array.pxd"
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 137 "array.pxd"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":139
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */

#line 139 "array.pxd"
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 139 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 139 "array.pxd"
  __pyx_v_op = ((arrayobject *)__pyx_t_1);

#line 139 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":140
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */

#line 140 "array.pxd"
  memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize));

  /* "array.pxd":141
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */

#line 141 "array.pxd"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 141 "array.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_op));

#line 141 "array.pxd"
  __pyx_r = __pyx_v_op;

#line 141 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

#line 137 "array.pxd"


#line 137 "array.pxd"
  /* function exit code */

#line 137 "array.pxd"
  __pyx_L1_error:;

#line 137 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 137 "array.pxd"
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 137 "array.pxd"
  __pyx_r = 0;

#line 137 "array.pxd"
  __pyx_L0:;

#line 137 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_op);

#line 137 "array.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 137 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 137 "array.pxd"
  return __pyx_r;

#line 137 "array.pxd"
}

/* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

#line 143 "array.pxd"


#line 143 "array.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize
#line 143 "array.pxd"
;
  Py_ssize_t __pyx_v_origsize
#line 143 "array.pxd"
;

#line 143 "array.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 143 "array.pxd"
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "array.pxd":147
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */

#line 147 "array.pxd"
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;

#line 147 "array.pxd"
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":148
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */

#line 148 "array.pxd"
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":149
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */

#line 149 "array.pxd"
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "array.pxd":150
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

#line 150 "array.pxd"
  memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize));

  /* "array.pxd":151
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */

#line 151 "array.pxd"
  __pyx_r = 0;

#line 151 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

#line 143 "array.pxd"


#line 143 "array.pxd"
  /* function exit code */

#line 143 "array.pxd"
  __pyx_L1_error:;

#line 143 "array.pxd"
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 143 "array.pxd"
  __pyx_r = -1;

#line 143 "array.pxd"
  __pyx_L0:;

#line 143 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 143 "array.pxd"
  return __pyx_r;

#line 143 "array.pxd"
}

/* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

#line 153 "array.pxd"


#line 153 "array.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {

#line 153 "array.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 153 "array.pxd"
  __Pyx_RefNannySetupContext("extend", 0);

  /* "array.pxd":155
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */

#line 155 "array.pxd"
  __pyx_t_1 = ((__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode) != 0);

#line 155 "array.pxd"
  if (__pyx_t_1) {

    /* "array.pxd":156
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */

#line 156 "array.pxd"
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 156 "array.pxd"
    goto __pyx_L3;

#line 156 "array.pxd"
  }

#line 156 "array.pxd"
  __pyx_L3:;

  /* "array.pxd":157
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */

#line 157 "array.pxd"
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 157 "array.pxd"
  __pyx_r = __pyx_t_2;

#line 157 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

#line 153 "array.pxd"


#line 153 "array.pxd"
  /* function exit code */

#line 153 "array.pxd"
  __pyx_L1_error:;

#line 153 "array.pxd"
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 153 "array.pxd"
  __pyx_r = -1;

#line 153 "array.pxd"
  __pyx_L0:;

#line 153 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 153 "array.pxd"
  return __pyx_r;

#line 153 "array.pxd"
}

/* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

#line 159 "array.pxd"


#line 159 "array.pxd"
static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 159 "array.pxd"
  __Pyx_RefNannySetupContext("zero", 0);

  /* "array.pxd":161
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */

#line 161 "array.pxd"
  memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize));

  /* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

#line 159 "array.pxd"


#line 159 "array.pxd"
  /* function exit code */

#line 159 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 159 "array.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
/* Python wrapper */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
__pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_i
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_ndim
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_endian_detector
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_little_endian
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_t
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  char *__pyx_v_f
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyArray_Descr *__pyx_v_descr = 0
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_offset
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_hasfields
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL) {

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(__pyx_v_info->obj);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = 0;

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */

#line 203 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_endian_detector = 1;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */

#line 204 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 206 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */

#line 208 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);

#line 208 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */

#line 209 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_copy_shape = 1;

#line 209 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L4;

#line 209 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 209 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_copy_shape = 0;

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L4:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L6_bool_binop_done;

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L6_bool_binop_done:;

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    {__pyx_filename = __pyx_f[10]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L9_bool_binop_done;

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L9_bool_binop_done:;

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    {__pyx_filename = __pyx_f[10]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */

#line 221 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */

#line 223 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (__pyx_v_copy_shape != 0);

#line 223 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */

#line 226 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */

#line 227 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */

#line 228 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __pyx_v_ndim;

#line 228 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 228 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_i = __pyx_t_5;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */

#line 229 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L11;

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */

#line 232 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */

#line 233 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));

#line 233 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 233 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L11:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */

#line 234 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */

#line 235 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */

#line 236 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */

#line 239 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_f = NULL;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */

#line 240 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);

#line 240 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_INCREF(__pyx_t_3);

#line 240 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);

#line 240 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_3 = 0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */

#line 244 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L15_bool_binop_done;

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L15_bool_binop_done:;

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(Py_None);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(Py_None);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = Py_None;

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L14;

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L14:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */

#line 254 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __pyx_v_descr->type_num;

#line 254 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_t = __pyx_t_4;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_2) {

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L20_next_or;

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = (__pyx_v_little_endian != 0);

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_2) {

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L19_bool_binop_done;

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L20_next_or:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_2) {

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L19_bool_binop_done;

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L19_bool_binop_done:;

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_1) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    switch (__pyx_v_t) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_BYTE:

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_b;

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_UBYTE:

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_B;

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_SHORT:

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_h;

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */

#line 261 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_USHORT:

#line 261 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_H;

#line 261 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */

#line 262 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_INT:

#line 262 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_i;

#line 262 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */

#line 263 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_UINT:

#line 263 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_I;

#line 263 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */

#line 264 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONG:

#line 264 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_l;

#line 264 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */

#line 265 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_ULONG:

#line 265 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_L;

#line 265 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */

#line 266 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONGLONG:

#line 266 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_q;

#line 266 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */

#line 267 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_ULONGLONG:

#line 267 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_Q;

#line 267 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */

#line 268 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_FLOAT:

#line 268 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_f;

#line 268 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */

#line 269 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_DOUBLE:

#line 269 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_d;

#line 269 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */

#line 270 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONGDOUBLE:

#line 270 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_g;

#line 270 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */

#line 271 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CFLOAT:

#line 271 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_Zf;

#line 271 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */

#line 272 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CDOUBLE:

#line 272 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_Zd;

#line 272 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */

#line 273 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CLONGDOUBLE:

#line 273 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_Zg;

#line 273 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_OBJECT:

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_O;

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      default:

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GIVEREF(__pyx_t_6);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = 0;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */

#line 277 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->format = __pyx_v_f;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = 0;

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */

#line 280 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->format = ((char *)malloc(255));

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */

#line 281 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_info->format[0]) = '^';

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */

#line 282 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_offset = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */

#line 283 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 283 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_f = __pyx_t_7;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */

#line 286 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_f[0]) = '\x00';

#line 286 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = -1;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L2;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(Py_None);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L2:;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
/* Python wrapper */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 289 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);

#line 289 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    free(__pyx_v_info->format);

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L3;

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L3:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */

#line 291 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);

#line 291 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */

#line 292 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    free(__pyx_v_info->strides);

#line 292 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L4;

#line 292 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 292 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L4:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_endian_detector
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_little_endian
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_fields = 0
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_childname = NULL
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_new_offset = NULL
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_t = NULL
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */

#line 790 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_endian_detector = 1;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */

#line 791 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (unlikely(__pyx_v_descr->names == Py_None)) {

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    {__pyx_filename = __pyx_f[10]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  for (;;) {

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    #else

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    #endif

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (likely(__pyx_v_fields != Py_None)) {

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyObject* sequence = __pyx_v_fields;

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      Py_ssize_t size = Py_SIZE(sequence);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #else

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      Py_ssize_t size = PySequence_Size(sequence);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #endif

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (unlikely(size != 2)) {

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        {__pyx_filename = __pyx_f[10]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_INCREF(__pyx_t_3);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_INCREF(__pyx_t_4);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #else

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #endif

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[10]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_7) {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L8_next_or;

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = (__pyx_v_little_endian != 0);

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_7) {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __pyx_t_7;

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L7_bool_binop_done;

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L8_next_or:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_7) {

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __pyx_t_7;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L7_bool_binop_done;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = __pyx_t_7;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L7_bool_binop_done:;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      {__pyx_filename = __pyx_f[10]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    while (1) {

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (!__pyx_t_6) break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */

#line 814 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_f[0]) = 120;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */

#line 815 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */

#line 816 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_8 = 0;

#line 816 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);

#line 816 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */

#line 818 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_8 = 0;

#line 818 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */

#line 820 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);

#line 820 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = 0;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */

#line 822 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);

#line 822 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

        /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_4);

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        {__pyx_filename = __pyx_f[10]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 98;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 66;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 104;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 72;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 105;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 73;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 108;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 76;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 113;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 81;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 102;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 100;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 103;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 102;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 100;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 103;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 79;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      /*else*/ {

        /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_4);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GIVEREF(__pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = 0;

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        {__pyx_filename = __pyx_f[10]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_L15:;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */

#line 845 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

#line 845 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L13;

#line 845 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 845 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    /*else*/ {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_t_9;

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L13:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 850 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_v_f;

#line 850 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = NULL;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_child);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_fields);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_childname);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_new_offset);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_t);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr
#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (__pyx_v_base == Py_None);

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */

#line 969 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_baseptr = NULL;

#line 969 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L3;

#line 969 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 969 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */

#line 971 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    Py_INCREF(__pyx_v_base);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */

#line 972 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);

#line 972 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 972 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L3:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */

#line 973 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */

#line 974 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 977 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);

#line 977 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(Py_None);

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = Py_None;

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = ((PyObject *)__pyx_v_arr->base);

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__string")
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
static std::string __pyx_convert_string_from_py_std__string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length
#line 13 "string.from_py"
;
  char *__pyx_v_data
#line 13 "string.from_py"
;

#line 13 "string.from_py"
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 13 "string.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */

#line 15 "string.from_py"
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[11]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "string.from_py"
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 16 "string.from_py"
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);

#line 16 "string.from_py"
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__string")
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
  /* function exit code */

#line 13 "string.from_py"
  __pyx_L1_error:;

#line 13 "string.from_py"
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 13 "string.from_py"
  __pyx_L0:;

#line 13 "string.from_py"
  __Pyx_RefNannyFinishContext();

#line 13 "string.from_py"
  return __pyx_r;

#line 13 "string.from_py"
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 31 "string.to_py"


#line 31 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__string(std::string const &__pyx_v_s) {

#line 31 "string.to_py"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 31 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */

#line 32 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 32 "string.to_py"
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 32 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 32 "string.to_py"
  __pyx_t_1 = 0;

#line 32 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 31 "string.to_py"


#line 31 "string.to_py"
  /* function exit code */

#line 31 "string.to_py"
  __pyx_L1_error:;

#line 31 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 31 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 31 "string.to_py"
  __pyx_r = 0;

#line 31 "string.to_py"
  __pyx_L0:;

#line 31 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 31 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 31 "string.to_py"
  return __pyx_r;

#line 31 "string.to_py"
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 37 "string.to_py"


#line 37 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__string(std::string const &__pyx_v_s) {

#line 37 "string.to_py"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 37 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */

#line 38 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 38 "string.to_py"
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 38 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 38 "string.to_py"
  __pyx_t_1 = 0;

#line 38 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 37 "string.to_py"


#line 37 "string.to_py"
  /* function exit code */

#line 37 "string.to_py"
  __pyx_L1_error:;

#line 37 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 37 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 37 "string.to_py"
  __pyx_r = 0;

#line 37 "string.to_py"
  __pyx_L0:;

#line 37 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 37 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 37 "string.to_py"
  return __pyx_r;

#line 37 "string.to_py"
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 43 "string.to_py"


#line 43 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__string(std::string const &__pyx_v_s) {

#line 43 "string.to_py"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 43 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */

#line 44 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 44 "string.to_py"
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 44 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 44 "string.to_py"
  __pyx_t_1 = 0;

#line 44 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 43 "string.to_py"


#line 43 "string.to_py"
  /* function exit code */

#line 43 "string.to_py"
  __pyx_L1_error:;

#line 43 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 43 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 43 "string.to_py"
  __pyx_r = 0;

#line 43 "string.to_py"
  __pyx_L0:;

#line 43 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 43 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 43 "string.to_py"
  return __pyx_r;

#line 43 "string.to_py"
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 49 "string.to_py"


#line 49 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__string(std::string const &__pyx_v_s) {

#line 49 "string.to_py"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 49 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */

#line 50 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 50 "string.to_py"
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 50 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 50 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 50 "string.to_py"
  __pyx_t_1 = 0;

#line 50 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

#line 49 "string.to_py"


#line 49 "string.to_py"
  /* function exit code */

#line 49 "string.to_py"
  __pyx_L1_error:;

#line 49 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 49 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 49 "string.to_py"
  __pyx_r = 0;

#line 49 "string.to_py"
  __pyx_L0:;

#line 49 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 49 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 49 "string.to_py"
  return __pyx_r;

#line 49 "string.to_py"
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

#line 55 "string.to_py"


#line 55 "string.to_py"
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__string(std::string const &__pyx_v_s) {

#line 55 "string.to_py"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 55 "string.to_py"
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */

#line 56 "string.to_py"
  __Pyx_XDECREF(__pyx_r);

#line 56 "string.to_py"
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[12]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "string.to_py"
  __Pyx_GOTREF(__pyx_t_1);

#line 56 "string.to_py"
  __pyx_r = __pyx_t_1;

#line 56 "string.to_py"
  __pyx_t_1 = 0;

#line 56 "string.to_py"
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

#line 55 "string.to_py"


#line 55 "string.to_py"
  /* function exit code */

#line 55 "string.to_py"
  __pyx_L1_error:;

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 55 "string.to_py"
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 55 "string.to_py"
  __pyx_r = 0;

#line 55 "string.to_py"
  __pyx_L0:;

#line 55 "string.to_py"
  __Pyx_XGIVEREF(__pyx_r);

#line 55 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 55 "string.to_py"
  return __pyx_r;

#line 55 "string.to_py"
}

#line 55 "string.to_py"


#line 55 "string.to_py"
static PyMethodDef __pyx_methods[] = {

#line 55 "string.to_py"
  {"_blockwise_inner_join", (PyCFunction)__pyx_pw_13_librootnumpy_85_blockwise_inner_join, METH_VARARGS|METH_KEYWORDS, 0},

#line 55 "string.to_py"
  {0, 0, 0, 0}

#line 55 "string.to_py"
};

#line 55 "string.to_py"


#line 55 "string.to_py"
#if PY_MAJOR_VERSION >= 3

#line 55 "string.to_py"
static struct PyModuleDef __pyx_moduledef = {

#line 55 "string.to_py"
  #if PY_VERSION_HEX < 0x03020000

#line 55 "string.to_py"
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },

#line 55 "string.to_py"
  #else

#line 55 "string.to_py"
    PyModuleDef_HEAD_INIT,

#line 55 "string.to_py"
  #endif

#line 55 "string.to_py"
    "_librootnumpy",

#line 55 "string.to_py"
    0, /* m_doc */

#line 55 "string.to_py"
    -1, /* m_size */

#line 55 "string.to_py"
    __pyx_methods /* m_methods */,

#line 55 "string.to_py"
    NULL, /* m_reload */

#line 55 "string.to_py"
    NULL, /* m_traverse */

#line 55 "string.to_py"
    NULL, /* m_clear */

#line 55 "string.to_py"
    NULL /* m_free */

#line 55 "string.to_py"
};

#line 55 "string.to_py"
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_, __pyx_k_, sizeof(__pyx_k_), 0, 0, 1, 0},
  {&__pyx_kp_s_0___1, __pyx_k_0___1, sizeof(__pyx_k_0___1), 0, 0, 1, 0},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_n_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 1},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_I, __pyx_k_I, sizeof(__pyx_k_I), 0, 0, 1, 1},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_L, __pyx_k_L, sizeof(__pyx_k_L), 0, 0, 1, 1},
  {&__pyx_n_s_Long64_t, __pyx_k_Long64_t, sizeof(__pyx_k_Long64_t), 0, 0, 1, 1},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 1, 1},
  {&__pyx_n_s_OrderedDict, __pyx_k_OrderedDict, sizeof(__pyx_k_OrderedDict), 0, 0, 1, 1},
  {&__pyx_n_s_RootNumpyUnconvertibleWarning, __pyx_k_RootNumpyUnconvertibleWarning, sizeof(__pyx_k_RootNumpyUnconvertibleWarning), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_S, __pyx_k_S, sizeof(__pyx_k_S), 0, 0, 1, 1},
  {&__pyx_n_s_SPECIAL_TYPEDEFS, __pyx_k_SPECIAL_TYPEDEFS, sizeof(__pyx_k_SPECIAL_TYPEDEFS), 0, 0, 1, 1},
  {&__pyx_n_s_TNtuple, __pyx_k_TNtuple, sizeof(__pyx_k_TNtuple), 0, 0, 1, 1},
  {&__pyx_n_s_TTree, __pyx_k_TTree, sizeof(__pyx_k_TTree), 0, 0, 1, 1},
  {&__pyx_n_s_TYPES, __pyx_k_TYPES, sizeof(__pyx_k_TYPES), 0, 0, 1, 1},
  {&__pyx_n_s_TYPES_NUMPY2ROOT, __pyx_k_TYPES_NUMPY2ROOT, sizeof(__pyx_k_TYPES_NUMPY2ROOT), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ULong64_t, __pyx_k_ULong64_t, sizeof(__pyx_k_ULong64_t), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 0},
  {&__pyx_n_s_arr, __pyx_k_arr, sizeof(__pyx_k_arr), 0, 0, 1, 1},
  {&__pyx_n_s_arr_2, __pyx_k_arr_2, sizeof(__pyx_k_arr_2), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_array2root, __pyx_k_array2root, sizeof(__pyx_k_array2root), 0, 0, 1, 1},
  {&__pyx_n_s_array2tree_toCObj, __pyx_k_array2tree_toCObj, sizeof(__pyx_k_array2tree_toCObj), 0, 0, 1, 1},
  {&__pyx_n_s_array_c, __pyx_k_array_c, sizeof(__pyx_k_array_c), 0, 0, 1, 1},
  {&__pyx_n_s_array_d, __pyx_k_array_d, sizeof(__pyx_k_array_d), 0, 0, 1, 1},
  {&__pyx_n_s_array_f, __pyx_k_array_f, sizeof(__pyx_k_array_f), 0, 0, 1, 1},
  {&__pyx_n_s_array_i, __pyx_k_array_i, sizeof(__pyx_k_array_i), 0, 0, 1, 1},
  {&__pyx_n_s_array_l, __pyx_k_array_l, sizeof(__pyx_k_array_l), 0, 0, 1, 1},
  {&__pyx_n_s_array_s, __pyx_k_array_s, sizeof(__pyx_k_array_s), 0, 0, 1, 1},
  {&__pyx_n_s_atexit, __pyx_k_atexit, sizeof(__pyx_k_atexit), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_bin_idx, __pyx_k_bin_idx, sizeof(__pyx_k_bin_idx), 0, 0, 1, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_kp_s_branch_0_has_no_leaves, __pyx_k_branch_0_has_no_leaves, sizeof(__pyx_k_branch_0_has_no_leaves), 0, 0, 1, 0},
  {&__pyx_n_s_branches, __pyx_k_branches, sizeof(__pyx_k_branches), 0, 0, 1, 1},
  {&__pyx_kp_s_branches_is_an_empty_list, __pyx_k_branches_is_an_empty_list, sizeof(__pyx_k_branches_is_an_empty_list), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_access_tree_in_current_fi, __pyx_k_cannot_access_tree_in_current_fi, sizeof(__pyx_k_cannot_access_tree_in_current_fi), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_convert_leaf_0_of_branch, __pyx_k_cannot_convert_leaf_0_of_branch, sizeof(__pyx_k_cannot_convert_leaf_0_of_branch), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_open_current_file, __pyx_k_cannot_open_current_file, sizeof(__pyx_k_cannot_open_current_file), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_open_file_0, __pyx_k_cannot_open_file_0, sizeof(__pyx_k_cannot_open_file_0), 0, 0, 1, 0},
  {&__pyx_kp_s_cannot_read_0, __pyx_k_cannot_read_0, sizeof(__pyx_k_cannot_read_0), 0, 0, 1, 0},
  {&__pyx_n_s_chain, __pyx_k_chain, sizeof(__pyx_k_chain), 0, 0, 1, 1},
  {&__pyx_kp_s_chain_is_empty, __pyx_k_chain_is_empty, sizeof(__pyx_k_chain_is_empty), 0, 0, 1, 0},
  {&__pyx_n_s_char, __pyx_k_char, sizeof(__pyx_k_char), 0, 0, 1, 1},
  {&__pyx_n_s_cleanup, __pyx_k_cleanup, sizeof(__pyx_k_cleanup), 0, 0, 1, 1},
  {&__pyx_n_s_clsname, __pyx_k_clsname, sizeof(__pyx_k_clsname), 0, 0, 1, 1},
  {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
  {&__pyx_kp_s_converter_for_r_not_implemented, __pyx_k_converter_for_r_not_implemented, sizeof(__pyx_k_converter_for_r_not_implemented), 0, 0, 1, 0},
  {&__pyx_kp_s_could_not_compile_selection_form, __pyx_k_could_not_compile_selection_form, sizeof(__pyx_k_could_not_compile_selection_form), 0, 0, 1, 0},
  {&__pyx_n_s_count_nonzero, __pyx_k_count_nonzero, sizeof(__pyx_k_count_nonzero), 0, 0, 1, 1},
  {&__pyx_n_s_ctype, __pyx_k_ctype, sizeof(__pyx_k_ctype), 0, 0, 1, 1},
  {&__pyx_n_s_ctypename, __pyx_k_ctypename, sizeof(__pyx_k_ctypename), 0, 0, 1, 1},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dtypecode, __pyx_k_dtypecode, sizeof(__pyx_k_dtypecode), 0, 0, 1, 1},
  {&__pyx_kp_s_duplicate_branches_requested, __pyx_k_duplicate_branches_requested, sizeof(__pyx_k_duplicate_branches_requested), 0, 0, 1, 0},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_f1, __pyx_k_evaluate_f1, sizeof(__pyx_k_evaluate_f1), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_f2, __pyx_k_evaluate_f2, sizeof(__pyx_k_evaluate_f2), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_f3, __pyx_k_evaluate_f3, sizeof(__pyx_k_evaluate_f3), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_formula_1d, __pyx_k_evaluate_formula_1d, sizeof(__pyx_k_evaluate_formula_1d), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_formula_2d, __pyx_k_evaluate_formula_2d, sizeof(__pyx_k_evaluate_formula_2d), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_formula_3d, __pyx_k_evaluate_formula_3d, sizeof(__pyx_k_evaluate_formula_3d), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_formula_4d, __pyx_k_evaluate_formula_4d, sizeof(__pyx_k_evaluate_formula_4d), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_graph, __pyx_k_evaluate_graph, sizeof(__pyx_k_evaluate_graph), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_h1, __pyx_k_evaluate_h1, sizeof(__pyx_k_evaluate_h1), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_h2, __pyx_k_evaluate_h2, sizeof(__pyx_k_evaluate_h2), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_h3, __pyx_k_evaluate_h3, sizeof(__pyx_k_evaluate_h3), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_spline, __pyx_k_evaluate_spline, sizeof(__pyx_k_evaluate_spline), 0, 0, 1, 1},
  {&__pyx_n_s_extern_ordereddict, __pyx_k_extern_ordereddict, sizeof(__pyx_k_extern_ordereddict), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_f1, __pyx_k_f1, sizeof(__pyx_k_f1), 0, 0, 1, 1},
  {&__pyx_n_s_f1_2, __pyx_k_f1_2, sizeof(__pyx_k_f1_2), 0, 0, 1, 1},
  {&__pyx_n_s_f2, __pyx_k_f2, sizeof(__pyx_k_f2), 0, 0, 1, 1},
  {&__pyx_n_s_f2_2, __pyx_k_f2_2, sizeof(__pyx_k_f2_2), 0, 0, 1, 1},
  {&__pyx_n_s_f3, __pyx_k_f3, sizeof(__pyx_k_f3), 0, 0, 1, 1},
  {&__pyx_n_s_f3_2, __pyx_k_f3_2, sizeof(__pyx_k_f3_2), 0, 0, 1, 1},
  {&__pyx_kp_s_field_0_of_type_1_is_not_compati, __pyx_k_field_0_of_type_1_is_not_compati, sizeof(__pyx_k_field_0_of_type_1_is_not_compati), 0, 0, 1, 0},
  {&__pyx_n_s_fields, __pyx_k_fields, sizeof(__pyx_k_fields), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_kp_s_file_0_is_not_writable, __pyx_k_file_0_is_not_writable, sizeof(__pyx_k_file_0_is_not_writable), 0, 0, 1, 0},
  {&__pyx_n_s_filename, __pyx_k_filename, sizeof(__pyx_k_filename), 0, 0, 1, 1},
  {&__pyx_n_s_fill_g1, __pyx_k_fill_g1, sizeof(__pyx_k_fill_g1), 0, 0, 1, 1},
  {&__pyx_n_s_fill_g2, __pyx_k_fill_g2, sizeof(__pyx_k_fill_g2), 0, 0, 1, 1},
  {&__pyx_n_s_fill_h1, __pyx_k_fill_h1, sizeof(__pyx_k_fill_h1), 0, 0, 1, 1},
  {&__pyx_n_s_fill_h2, __pyx_k_fill_h2, sizeof(__pyx_k_fill_h2), 0, 0, 1, 1},
  {&__pyx_n_s_fill_h3, __pyx_k_fill_h3, sizeof(__pyx_k_fill_h3), 0, 0, 1, 1},
  {&__pyx_n_s_fill_p1, __pyx_k_fill_p1, sizeof(__pyx_k_fill_p1), 0, 0, 1, 1},
  {&__pyx_n_s_fill_p2, __pyx_k_fill_p2, sizeof(__pyx_k_fill_p2), 0, 0, 1, 1},
  {&__pyx_n_s_fill_p3, __pyx_k_fill_p3, sizeof(__pyx_k_fill_p3), 0, 0, 1, 1},
  {&__pyx_kp_s_fixed, __pyx_k_fixed, sizeof(__pyx_k_fixed), 0, 0, 1, 0},
  {&__pyx_n_s_fk, __pyx_k_fk, sizeof(__pyx_k_fk), 0, 0, 1, 1},
  {&__pyx_kp_s_fk_d, __pyx_k_fk_d, sizeof(__pyx_k_fk_d), 0, 0, 1, 0},
  {&__pyx_n_s_fk_name, __pyx_k_fk_name, sizeof(__pyx_k_fk_name), 0, 0, 1, 1},
  {&__pyx_n_s_flatnonzero, __pyx_k_flatnonzero, sizeof(__pyx_k_flatnonzero), 0, 0, 1, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_float64, __pyx_k_float64, sizeof(__pyx_k_float64), 0, 0, 1, 1},
  {&__pyx_n_s_fn, __pyx_k_fn, sizeof(__pyx_k_fn), 0, 0, 1, 1},
  {&__pyx_n_s_fname, __pyx_k_fname, sizeof(__pyx_k_fname), 0, 0, 1, 1},
  {&__pyx_n_s_fnames, __pyx_k_fnames, sizeof(__pyx_k_fnames), 0, 0, 1, 1},
  {&__pyx_n_s_force_repeat, __pyx_k_force_repeat, sizeof(__pyx_k_force_repeat), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_func, __pyx_k_func, sizeof(__pyx_k_func), 0, 0, 1, 1},
  {&__pyx_n_s_func_2, __pyx_k_func_2, sizeof(__pyx_k_func_2), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_graph, __pyx_k_graph, sizeof(__pyx_k_graph), 0, 0, 1, 1},
  {&__pyx_n_s_graph_2, __pyx_k_graph_2, sizeof(__pyx_k_graph_2), 0, 0, 1, 1},
  {&__pyx_n_s_h1, __pyx_k_h1, sizeof(__pyx_k_h1), 0, 0, 1, 1},
  {&__pyx_n_s_h1_2, __pyx_k_h1_2, sizeof(__pyx_k_h1_2), 0, 0, 1, 1},
  {&__pyx_n_s_h2, __pyx_k_h2, sizeof(__pyx_k_h2), 0, 0, 1, 1},
  {&__pyx_n_s_h2_2, __pyx_k_h2_2, sizeof(__pyx_k_h2_2), 0, 0, 1, 1},
  {&__pyx_n_s_h3, __pyx_k_h3, sizeof(__pyx_k_h3), 0, 0, 1, 1},
  {&__pyx_n_s_h3_2, __pyx_k_h3_2, sizeof(__pyx_k_h3_2), 0, 0, 1, 1},
  {&__pyx_n_s_hist, __pyx_k_hist, sizeof(__pyx_k_hist), 0, 0, 1, 1},
  {&__pyx_n_s_hist_2, __pyx_k_hist_2, sizeof(__pyx_k_hist_2), 0, 0, 1, 1},
  {&__pyx_kp_s_home_endw_workspace_root_numpy, __pyx_k_home_endw_workspace_root_numpy, sizeof(__pyx_k_home_endw_workspace_root_numpy), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_k_home_endw_workspace_root_numpy_2, sizeof(__pyx_k_home_endw_workspace_root_numpy_2), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_k_home_endw_workspace_root_numpy_3, sizeof(__pyx_k_home_endw_workspace_root_numpy_3), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_k_home_endw_workspace_root_numpy_4, sizeof(__pyx_k_home_endw_workspace_root_numpy_4), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_k_home_endw_workspace_root_numpy_5, sizeof(__pyx_k_home_endw_workspace_root_numpy_5), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_k_home_endw_workspace_root_numpy_6, sizeof(__pyx_k_home_endw_workspace_root_numpy_6), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_k_home_endw_workspace_root_numpy_7, sizeof(__pyx_k_home_endw_workspace_root_numpy_7), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_include_weight, __pyx_k_include_weight, sizeof(__pyx_k_include_weight), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_indices, __pyx_k_indices, sizeof(__pyx_k_indices), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_int16, __pyx_k_int16, sizeof(__pyx_k_int16), 0, 0, 1, 1},
  {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
  {&__pyx_n_s_int64, __pyx_k_int64, sizeof(__pyx_k_int64), 0, 0, 1, 1},
  {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
  {&__pyx_n_s_intree, __pyx_k_intree, sizeof(__pyx_k_intree), 0, 0, 1, 1},
  {&__pyx_n_s_it, __pyx_k_it, sizeof(__pyx_k_it), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_l, __pyx_k_l, sizeof(__pyx_k_l), 0, 0, 1, 1},
  {&__pyx_kp_s_leaf_list_for_branch_0_is_empty, __pyx_k_leaf_list_for_branch_0_is_empty, sizeof(__pyx_k_leaf_list_for_branch_0_is_empty), 0, 0, 1, 0},
  {&__pyx_n_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 1},
  {&__pyx_n_s_librootnumpy, __pyx_k_librootnumpy, sizeof(__pyx_k_librootnumpy), 0, 0, 1, 1},
  {&__pyx_n_s_list_branches, __pyx_k_list_branches, sizeof(__pyx_k_list_branches), 0, 0, 1, 1},
  {&__pyx_n_s_list_structures, __pyx_k_list_structures, sizeof(__pyx_k_list_structures), 0, 0, 1, 1},
  {&__pyx_n_s_list_trees, __pyx_k_list_trees, sizeof(__pyx_k_list_trees), 0, 0, 1, 1},
  {&__pyx_n_s_long, __pyx_k_long, sizeof(__pyx_k_long), 0, 0, 1, 1},
  {&__pyx_kp_s_long_long, __pyx_k_long_long, sizeof(__pyx_k_long_long), 0, 0, 1, 0},
  {&__pyx_n_s_longlong, __pyx_k_longlong, sizeof(__pyx_k_longlong), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mat, __pyx_k_mat, sizeof(__pyx_k_mat), 0, 0, 1, 1},
  {&__pyx_n_s_matrix, __pyx_k_matrix, sizeof(__pyx_k_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_matrix_d, __pyx_k_matrix_d, sizeof(__pyx_k_matrix_d), 0, 0, 1, 1},
  {&__pyx_n_s_matrix_f, __pyx_k_matrix_f, sizeof(__pyx_k_matrix_f), 0, 0, 1, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_kp_s_multiple_trees_found_0, __pyx_k_multiple_trees_found_0, sizeof(__pyx_k_multiple_trees_found_0), 0, 0, 1, 0},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_n_samples, __pyx_k_n_samples, sizeof(__pyx_k_n_samples), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_names, __pyx_k_names, sizeof(__pyx_k_names), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_kp_s_no_converter_for_0, __pyx_k_no_converter_for_0, sizeof(__pyx_k_no_converter_for_0), 0, 0, 1, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_outtree, __pyx_k_outtree, sizeof(__pyx_k_outtree), 0, 0, 1, 1},
  {&__pyx_n_s_profile, __pyx_k_profile, sizeof(__pyx_k_profile), 0, 0, 1, 1},
  {&__pyx_n_s_profile_2, __pyx_k_profile_2, sizeof(__pyx_k_profile_2), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_kp_s_read_failure_in_current_tree, __pyx_k_read_failure_in_current_tree, sizeof(__pyx_k_read_failure_in_current_tree), 0, 0, 1, 0},
  {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
  {&__pyx_n_s_resize, __pyx_k_resize, sizeof(__pyx_k_resize), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_n_s_return_indices, __pyx_k_return_indices, sizeof(__pyx_k_return_indices), 0, 0, 1, 1},
  {&__pyx_n_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 1},
  {&__pyx_n_s_root2array_fromCObj, __pyx_k_root2array_fromCObj, sizeof(__pyx_k_root2array_fromCObj), 0, 0, 1, 1},
  {&__pyx_n_s_root2array_fromFname, __pyx_k_root2array_fromFname, sizeof(__pyx_k_root2array_fromFname), 0, 0, 1, 1},
  {&__pyx_n_s_root_arr, __pyx_k_root_arr, sizeof(__pyx_k_root_arr), 0, 0, 1, 1},
  {&__pyx_n_s_root_mat, __pyx_k_root_mat, sizeof(__pyx_k_root_mat), 0, 0, 1, 1},
  {&__pyx_n_s_rpartition, __pyx_k_rpartition, sizeof(__pyx_k_rpartition), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_sample_f1, __pyx_k_sample_f1, sizeof(__pyx_k_sample_f1), 0, 0, 1, 1},
  {&__pyx_n_s_sample_f2, __pyx_k_sample_f2, sizeof(__pyx_k_sample_f2), 0, 0, 1, 1},
  {&__pyx_n_s_sample_f3, __pyx_k_sample_f3, sizeof(__pyx_k_sample_f3), 0, 0, 1, 1},
  {&__pyx_n_s_sample_h1, __pyx_k_sample_h1, sizeof(__pyx_k_sample_h1), 0, 0, 1, 1},
  {&__pyx_n_s_sample_h2, __pyx_k_sample_h2, sizeof(__pyx_k_sample_h2), 0, 0, 1, 1},
  {&__pyx_n_s_sample_h3, __pyx_k_sample_h3, sizeof(__pyx_k_sample_h3), 0, 0, 1, 1},
  {&__pyx_n_s_selection, __pyx_k_selection, sizeof(__pyx_k_selection), 0, 0, 1, 1},
  {&__pyx_n_s_short, __pyx_k_short, sizeof(__pyx_k_short), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_spline, __pyx_k_spline, sizeof(__pyx_k_spline), 0, 0, 1, 1},
  {&__pyx_n_s_spline_2, __pyx_k_spline_2, sizeof(__pyx_k_spline_2), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_b_string, __pyx_k_string, sizeof(__pyx_k_string), 0, 0, 0, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_kp_s_the_branch_or_expression_0_is_no, __pyx_k_the_branch_or_expression_0_is_no, sizeof(__pyx_k_the_branch_or_expression_0_is_no), 0, 0, 1, 0},
  {&__pyx_kp_s_the_chain_is_not_initialized, __pyx_k_the_chain_is_not_initialized, sizeof(__pyx_k_the_chain_is_not_initialized), 0, 0, 1, 0},
  {&__pyx_n_s_tree, __pyx_k_tree, sizeof(__pyx_k_tree), 0, 0, 1, 1},
  {&__pyx_kp_s_tree_0_not_found_in_1, __pyx_k_tree_0_not_found_in_1, sizeof(__pyx_k_tree_0_not_found_in_1), 0, 0, 1, 0},
  {&__pyx_kp_s_tree_has_no_branches, __pyx_k_tree_has_no_branches, sizeof(__pyx_k_tree_has_no_branches), 0, 0, 1, 0},
  {&__pyx_kp_s_tree_index_in_chain_is_out_of_bo, __pyx_k_tree_index_in_chain_is_out_of_bo, sizeof(__pyx_k_tree_index_in_chain_is_out_of_bo), 0, 0, 1, 0},
  {&__pyx_kp_s_tree_must_be_PyCObject, __pyx_k_tree_must_be_PyCObject, sizeof(__pyx_k_tree_must_be_PyCObject), 0, 0, 1, 0},
  {&__pyx_n_s_treename, __pyx_k_treename, sizeof(__pyx_k_treename), 0, 0, 1, 1},
  {&__pyx_n_s_ttree, __pyx_k_ttree, sizeof(__pyx_k_ttree), 0, 0, 1, 1},
  {&__pyx_n_s_uint16, __pyx_k_uint16, sizeof(__pyx_k_uint16), 0, 0, 1, 1},
  {&__pyx_n_s_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 0, 1, 1},
  {&__pyx_n_s_uint64, __pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 0, 1, 1},
  {&__pyx_n_s_uint8, __pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 0, 1, 1},
  {&__pyx_n_s_ulonglong, __pyx_k_ulonglong, sizeof(__pyx_k_ulonglong), 0, 0, 1, 1},
  {&__pyx_kp_s_unable_to_access_tree_0_in_1, __pyx_k_unable_to_access_tree_0_in_1, sizeof(__pyx_k_unable_to_access_tree_0_in_1), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_convert_any_branches_i, __pyx_k_unable_to_convert_any_branches_i, sizeof(__pyx_k_unable_to_convert_any_branches_i), 0, 0, 1, 0},
  {&__pyx_kp_s_unable_to_get_keys_in_0, __pyx_k_unable_to_get_keys_in_0, sizeof(__pyx_k_unable_to_get_keys_in_0), 0, 0, 1, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_kp_s_unsigned_char, __pyx_k_unsigned_char, sizeof(__pyx_k_unsigned_char), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_int, __pyx_k_unsigned_int, sizeof(__pyx_k_unsigned_int), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_long, __pyx_k_unsigned_long, sizeof(__pyx_k_unsigned_long), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_long_long, __pyx_k_unsigned_long_long, sizeof(__pyx_k_unsigned_long_long), 0, 0, 1, 0},
  {&__pyx_kp_s_unsigned_short, __pyx_k_unsigned_short, sizeof(__pyx_k_unsigned_short), 0, 0, 1, 0},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_kp_s_vary, __pyx_k_vary, sizeof(__pyx_k_vary), 0, 0, 1, 0},
  {&__pyx_kp_b_vector_bool, __pyx_k_vector_bool, sizeof(__pyx_k_vector_bool), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_char, __pyx_k_vector_char, sizeof(__pyx_k_vector_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_double, __pyx_k_vector_double, sizeof(__pyx_k_vector_double), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_float, __pyx_k_vector_float, sizeof(__pyx_k_vector_float), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_int, __pyx_k_vector_int, sizeof(__pyx_k_vector_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_long, __pyx_k_vector_long, sizeof(__pyx_k_vector_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_long_long, __pyx_k_vector_long_long, sizeof(__pyx_k_vector_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_short, __pyx_k_vector_short, sizeof(__pyx_k_vector_short), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_string, __pyx_k_vector_string, sizeof(__pyx_k_vector_string), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_char, __pyx_k_vector_unsigned_char, sizeof(__pyx_k_vector_unsigned_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_int, __pyx_k_vector_unsigned_int, sizeof(__pyx_k_vector_unsigned_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_long, __pyx_k_vector_unsigned_long, sizeof(__pyx_k_vector_unsigned_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_long_long, __pyx_k_vector_unsigned_long_long, sizeof(__pyx_k_vector_unsigned_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_unsigned_short, __pyx_k_vector_unsigned_short, sizeof(__pyx_k_vector_unsigned_short), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_bool, __pyx_k_vector_vector_bool, sizeof(__pyx_k_vector_vector_bool), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_char, __pyx_k_vector_vector_char, sizeof(__pyx_k_vector_vector_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_double, __pyx_k_vector_vector_double, sizeof(__pyx_k_vector_vector_double), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_float, __pyx_k_vector_vector_float, sizeof(__pyx_k_vector_vector_float), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_int, __pyx_k_vector_vector_int, sizeof(__pyx_k_vector_vector_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_long, __pyx_k_vector_vector_long, sizeof(__pyx_k_vector_vector_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_long_long, __pyx_k_vector_vector_long_long, sizeof(__pyx_k_vector_vector_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_short, __pyx_k_vector_vector_short, sizeof(__pyx_k_vector_vector_short), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_string, __pyx_k_vector_vector_string, sizeof(__pyx_k_vector_vector_string), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_char, __pyx_k_vector_vector_unsigned_char, sizeof(__pyx_k_vector_vector_unsigned_char), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_int, __pyx_k_vector_vector_unsigned_int, sizeof(__pyx_k_vector_vector_unsigned_int), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_long, __pyx_k_vector_vector_unsigned_long, sizeof(__pyx_k_vector_vector_unsigned_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_long_long, __pyx_k_vector_vector_unsigned_long_long, sizeof(__pyx_k_vector_vector_unsigned_long_long), 0, 0, 0, 0},
  {&__pyx_kp_b_vector_vector_unsigned_short, __pyx_k_vector_vector_unsigned_short, sizeof(__pyx_k_vector_vector_unsigned_short), 0, 0, 0, 0},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_warnings_2, __pyx_k_warnings_2, sizeof(__pyx_k_warnings_2), 0, 0, 1, 1},
  {&__pyx_n_s_weight_name, __pyx_k_weight_name, sizeof(__pyx_k_weight_name), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_z, __pyx_k_z, sizeof(__pyx_k_z), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 631; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 669; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "root_numpy/src/tree.pyx":168
 *     cdef np.npy_intp dims[1]
 *     dims[0] = numele;
 *     cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *     cdef np.ndarray tmp = np.PyArray_EMPTY(1, dims, np.NPY_OBJECT, 0)
 *     cdef PyObject* tmpobj = <PyObject*> tmp # borrow ref
 */

#line 168 "root_numpy/src/tree.pyx"
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 168 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__2);

#line 168 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "root_numpy/src/tree.pyx":306
 *         cdef T* fa
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 306 "root_numpy/src/tree.pyx"
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 306 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__3);

#line 306 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "root_numpy/src/tree.pyx":346
 *         cdef unsigned long numele
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 346 "root_numpy/src/tree.pyx"
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 346 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__4);

#line 346 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "root_numpy/src/tree.pyx":394
 *         cdef unsigned long numele
 *         # these are defined solely for the outer array wrapper
 *         cdef int objsize = np.dtype('O').itemsize             # <<<<<<<<<<<<<<
 *         cdef int objtypecode = np.NPY_OBJECT
 *         numele = tmp[0].size()
 */

#line 394 "root_numpy/src/tree.pyx"
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 394 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__5);

#line 394 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "root_numpy/src/tree.pyx":548
 *         cv.push_back(this_conv)
 *     if include_weight:
 *         nst.append((weight_name, np.dtype('d')))             # <<<<<<<<<<<<<<
 *     return np.empty(entries, dtype=nst)
 * 
 */

#line 548 "root_numpy/src/tree.pyx"
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_n_s_d); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 548; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 548 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__6);

#line 548 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "root_numpy/src/tree.pyx":556
 *         return
 *     if load == -1:
 *         raise ValueError("chain is empty")             # <<<<<<<<<<<<<<
 *     elif load == -2:
 *         if ignore_index:
 */

#line 556 "root_numpy/src/tree.pyx"
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_chain_is_empty); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 556; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 556 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__7);

#line 556 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "root_numpy/src/tree.pyx":560
 *         if ignore_index:
 *             return
 *         raise IndexError("tree index in chain is out of bounds")             # <<<<<<<<<<<<<<
 *     elif load == -3:
 *         raise IOError("cannot open current file")
 */

#line 560 "root_numpy/src/tree.pyx"
  __pyx_tuple__8 = PyTuple_Pack(1, __pyx_kp_s_tree_index_in_chain_is_out_of_bo); if (unlikely(!__pyx_tuple__8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 560; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 560 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__8);

#line 560 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "root_numpy/src/tree.pyx":562
 *         raise IndexError("tree index in chain is out of bounds")
 *     elif load == -3:
 *         raise IOError("cannot open current file")             # <<<<<<<<<<<<<<
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 */

#line 562 "root_numpy/src/tree.pyx"
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_cannot_open_current_file); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 562; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 562 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__9);

#line 562 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "root_numpy/src/tree.pyx":564
 *         raise IOError("cannot open current file")
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")             # <<<<<<<<<<<<<<
 *     raise RuntimeError("the chain is not initialized")
 * 
 */

#line 564 "root_numpy/src/tree.pyx"
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_cannot_access_tree_in_current_fi); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 564; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 564 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__10);

#line 564 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "root_numpy/src/tree.pyx":565
 *     elif load == -4:
 *         raise IOError("cannot access tree in current file")
 *     raise RuntimeError("the chain is not initialized")             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 565 "root_numpy/src/tree.pyx"
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_the_chain_is_not_initialized); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 565; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 565 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__11);

#line 565 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "root_numpy/src/tree.pyx":573
 * 
 *     if tree.GetNbranches() == 0:
 *         raise ValueError("tree has no branches")             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[Column*] columns
 */

#line 573 "root_numpy/src/tree.pyx"
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_tree_has_no_branches); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 573; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 573 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__12);

#line 573 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "root_numpy/src/tree.pyx":604
 *             if selection_formula == NULL or selection_formula.GetNdim() == 0:
 *                 del selection_formula
 *                 raise ValueError("could not compile selection formula")             # <<<<<<<<<<<<<<
 *             # The chain will take care of updating the formula leaves when
 *             # rolling over to the next tree.
 */

#line 604 "root_numpy/src/tree.pyx"
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_could_not_compile_selection_form); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 604; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 604 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__13);

#line 604 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "root_numpy/src/tree.pyx":615
 *             branches = structure.keys()
 *         elif len(branches) == 0:
 *             raise ValueError("branches is an empty list")             # <<<<<<<<<<<<<<
 *         elif len(branches) != len(set(branches)):
 *             raise ValueError("duplicate branches requested")
 */

#line 615 "root_numpy/src/tree.pyx"
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_branches_is_an_empty_list); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 615; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 615 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__14);

#line 615 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "root_numpy/src/tree.pyx":617
 *             raise ValueError("branches is an empty list")
 *         elif len(branches) != len(set(branches)):
 *             raise ValueError("duplicate branches requested")             # <<<<<<<<<<<<<<
 *         else:
 *             user_branches = True
 */

#line 617 "root_numpy/src/tree.pyx"
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_duplicate_branches_requested); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 617; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 617 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__15);

#line 617 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "root_numpy/src/tree.pyx":655
 * 
 *         if columns.size() == 0:
 *             raise RuntimeError("unable to convert any branches in this tree")             # <<<<<<<<<<<<<<
 * 
 *         # Activate branches used by formulae and columns
 */

#line 655 "root_numpy/src/tree.pyx"
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_unable_to_convert_any_branches_i); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 655; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 655 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__16);

#line 655 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "root_numpy/src/tree.pyx":673
 *             handle_load(entry_size)
 *             if entry_size == 0:
 *                 raise IOError("read failure in current tree")             # <<<<<<<<<<<<<<
 * 
 *             # Determine if this entry passes the selection,
 */

#line 673 "root_numpy/src/tree.pyx"
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_read_failure_in_current_tree); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 673; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 673 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__17);

#line 673 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "root_numpy/src/tree.pyx":731
 *     # typecheck should be implemented by the wrapper
 *     if not PyCObject_Check(tree):
 *         raise ValueError("tree must be PyCObject")             # <<<<<<<<<<<<<<
 *     cdef TTree* chain = <TTree*> PyCObject_AsVoidPtr(tree)
 *     return tree2array(
 */

#line 731 "root_numpy/src/tree.pyx"
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_tree_must_be_PyCObject); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 731; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 731 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__18);

#line 731 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "root_numpy/src/tree.pyx":770
 *         else:
 *             # check type compatibility of existing branch
 *             existing_type = this.branch.GetTitle().rpartition('/')[-1]             # <<<<<<<<<<<<<<
 *             if str(roottype) != existing_type:
 *                 raise TypeError(
 */

#line 770 "root_numpy/src/tree.pyx"
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s__19); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 770; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 770 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__20);

#line 770 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "root_numpy/src/tree.pyx":880
 *         # typecheck should be implemented by the wrapper
 *         if not PyCObject_Check(tree):
 *             raise ValueError("tree must be PyCObject")             # <<<<<<<<<<<<<<
 *         intree = <TTree*> PyCObject_AsVoidPtr(tree)
 *     outtree = array2tree(arr, name=name, tree=intree)
 */

#line 880 "root_numpy/src/tree.pyx"
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_tree_must_be_PyCObject); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 880; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 880 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__21);

#line 880 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "root_numpy/src/hist.pyx":8
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 8 "root_numpy/src/hist.pyx"
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__22)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__22);

#line 8 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "root_numpy/src/hist.pyx":33
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 33 "root_numpy/src/hist.pyx"
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__23);

#line 33 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "root_numpy/src/hist.pyx":58
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 58 "root_numpy/src/hist.pyx"
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__24);

#line 58 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "root_numpy/src/hist.pyx":83
 *     cdef TProfile* _profile = <TProfile*> PyCObject_AsVoidPtr(profile)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 83 "root_numpy/src/hist.pyx"
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__25);

#line 83 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "root_numpy/src/hist.pyx":108
 *     cdef TProfile2D* _profile = <TProfile2D*> PyCObject_AsVoidPtr(profile)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 108 "root_numpy/src/hist.pyx"
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__26);

#line 108 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "root_numpy/src/hist.pyx":133
 *     cdef TProfile3D* _profile = <TProfile3D*> PyCObject_AsVoidPtr(profile)
 *     cdef long size = array.shape[0]
 *     cdef np.ndarray[np.int_t, ndim=1] idx = np.empty(0, dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef long i
 *     cdef int bin_idx
 */

#line 133 "root_numpy/src/hist.pyx"
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__27);

#line 133 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__28);

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__29);

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__30);

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__31);

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__32);

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__33);

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "root_numpy/src/tree.pyx":20
 * 
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):      (1, 'O'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),
 */

#line 20 "root_numpy/src/tree.pyx"
  __pyx_tuple__34 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_O); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__34);

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "root_numpy/src/tree.pyx":21
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):      (1, 'O'),
 *     np.dtype(np.int8):      (1, 'B'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),
 */

#line 21 "root_numpy/src/tree.pyx"
  __pyx_tuple__35 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_B); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__35);

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "root_numpy/src/tree.pyx":22
 *     np.dtype(np.bool):      (1, 'O'),
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),
 */

#line 22 "root_numpy/src/tree.pyx"
  __pyx_tuple__36 = PyTuple_Pack(2, __pyx_int_2, __pyx_n_s_S); if (unlikely(!__pyx_tuple__36)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__36);

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "root_numpy/src/tree.pyx":23
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),
 */

#line 23 "root_numpy/src/tree.pyx"
  __pyx_tuple__37 = PyTuple_Pack(2, __pyx_int_4, __pyx_n_s_I); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__37);

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "root_numpy/src/tree.pyx":24
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),
 */

#line 24 "root_numpy/src/tree.pyx"
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_L); if (unlikely(!__pyx_tuple__38)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__38);

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "root_numpy/src/tree.pyx":25
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),
 */

#line 25 "root_numpy/src/tree.pyx"
  __pyx_tuple__39 = PyTuple_Pack(2, __pyx_int_1, __pyx_n_s_b); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__39);

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "root_numpy/src/tree.pyx":26
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),
 */

#line 26 "root_numpy/src/tree.pyx"
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_int_2, __pyx_n_s_s); if (unlikely(!__pyx_tuple__40)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__40);

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "root_numpy/src/tree.pyx":27
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),
 */

#line 27 "root_numpy/src/tree.pyx"
  __pyx_tuple__41 = PyTuple_Pack(2, __pyx_int_4, __pyx_n_s_i); if (unlikely(!__pyx_tuple__41)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__41);

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "root_numpy/src/tree.pyx":28
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),
 */

#line 28 "root_numpy/src/tree.pyx"
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_l); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__42);

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "root_numpy/src/tree.pyx":29
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float32):   (4, 'F'),
 *     np.dtype(np.float64):   (8, 'D'),
 */

#line 29 "root_numpy/src/tree.pyx"
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_D); if (unlikely(!__pyx_tuple__43)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__43);

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "root_numpy/src/tree.pyx":30
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float64):   (8, 'D'),
 * }
 */

#line 30 "root_numpy/src/tree.pyx"
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_int_4, __pyx_n_s_F); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__44);

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "root_numpy/src/tree.pyx":31
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),
 *     np.dtype(np.float64):   (8, 'D'),             # <<<<<<<<<<<<<<
 * }
 * 
 */

#line 31 "root_numpy/src/tree.pyx"
  __pyx_tuple__45 = PyTuple_Pack(2, __pyx_int_8, __pyx_n_s_D); if (unlikely(!__pyx_tuple__45)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__45);

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "root_numpy/src/tree.pyx":47
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 */

#line 47 "root_numpy/src/tree.pyx"
  __pyx_tuple__46 = PyTuple_Pack(8, __pyx_n_s_fname, __pyx_n_s_f, __pyx_n_s_keys, __pyx_n_s_ret, __pyx_n_s_n, __pyx_n_s_key, __pyx_n_s_i, __pyx_n_s_clsname); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__46);

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__46);

#line 47 "root_numpy/src/tree.pyx"
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_list_trees, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":65
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree is None:
 *         # automatically select single tree
 */

#line 65 "root_numpy/src/tree.pyx"
  __pyx_tuple__48 = PyTuple_Pack(4, __pyx_n_s_fname, __pyx_n_s_tree, __pyx_n_s_f, __pyx_n_s_t); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__48);

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__48);

#line 65 "root_numpy/src/tree.pyx"
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(2, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_list_structures, 65, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":82
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list(list_structures(fname, tree).keys())
 * 
 */

#line 82 "root_numpy/src/tree.pyx"
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_fname, __pyx_n_s_tree); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__50);

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__50);

#line 82 "root_numpy/src/tree.pyx"
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_list_branches, 82, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":705
 * 
 * 
 * def root2array_fromFname(fnames, treename, branches,             # <<<<<<<<<<<<<<
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 */

#line 705 "root_numpy/src/tree.pyx"
  __pyx_tuple__52 = PyTuple_Pack(12, __pyx_n_s_fnames, __pyx_n_s_treename, __pyx_n_s_branches, __pyx_n_s_selection, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_step, __pyx_n_s_include_weight, __pyx_n_s_weight_name, __pyx_n_s_ttree, __pyx_n_s_fn, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__52);

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__52);

#line 705 "root_numpy/src/tree.pyx"
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(9, 0, 12, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_root2array_fromFname, 705, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":724
 * 
 * 
 * def root2array_fromCObj(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         include_weight, weight_name):
 */

#line 724 "root_numpy/src/tree.pyx"
  __pyx_tuple__54 = PyTuple_Pack(9, __pyx_n_s_tree, __pyx_n_s_branches, __pyx_n_s_selection, __pyx_n_s_start, __pyx_n_s_stop, __pyx_n_s_step, __pyx_n_s_include_weight, __pyx_n_s_weight_name, __pyx_n_s_chain); if (unlikely(!__pyx_tuple__54)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__54);

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__54);

#line 724 "root_numpy/src/tree.pyx"
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(8, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_root2array_fromCObj, 724, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":872
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

#line 872 "root_numpy/src/tree.pyx"
  __pyx_tuple__56 = PyTuple_Pack(5, __pyx_n_s_arr, __pyx_n_s_name, __pyx_n_s_tree, __pyx_n_s_intree, __pyx_n_s_outtree); if (unlikely(!__pyx_tuple__56)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__56);

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__56);

#line 872 "root_numpy/src/tree.pyx"
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(3, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_array2tree_toCObj, 872, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":886
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 */

#line 886 "root_numpy/src/tree.pyx"
  __pyx_tuple__58 = PyTuple_Pack(6, __pyx_n_s_arr, __pyx_n_s_filename, __pyx_n_s_treename, __pyx_n_s_mode, __pyx_n_s_file, __pyx_n_s_tree); if (unlikely(!__pyx_tuple__58)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__58);

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__58);

#line 886 "root_numpy/src/tree.pyx"
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(4, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_array2root, 886, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":903
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 */

#line 903 "root_numpy/src/tree.pyx"
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_n_s_it); if (unlikely(!__pyx_tuple__60)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_tuple__60);

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_tuple__60);

#line 903 "root_numpy/src/tree.pyx"
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(0, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_cleanup, 903, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/array.pyx":10
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

#line 10 "root_numpy/src/array.pyx"
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__62)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__62);

#line 10 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__62);

#line 10 "root_numpy/src/array.pyx"
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_array_d, 10, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/array.pyx":14
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

#line 14 "root_numpy/src/array.pyx"
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__64)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__64);

#line 14 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__64);

#line 14 "root_numpy/src/array.pyx"
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_array_f, 14, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/array.pyx":18
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

#line 18 "root_numpy/src/array.pyx"
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__66)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 18 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__66);

#line 18 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__66);

#line 18 "root_numpy/src/array.pyx"
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_array_l, 18, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/array.pyx":22
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

#line 22 "root_numpy/src/array.pyx"
  __pyx_tuple__68 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__68)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__68);

#line 22 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__68);

#line 22 "root_numpy/src/array.pyx"
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_array_i, 22, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/array.pyx":26
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

#line 26 "root_numpy/src/array.pyx"
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__70)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__70);

#line 26 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__70);

#line 26 "root_numpy/src/array.pyx"
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_array_s, 26, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/array.pyx":30
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 30 "root_numpy/src/array.pyx"
  __pyx_tuple__72 = PyTuple_Pack(2, __pyx_n_s_root_arr, __pyx_n_s_arr_2); if (unlikely(!__pyx_tuple__72)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_tuple__72);

#line 30 "root_numpy/src/array.pyx"
  __Pyx_GIVEREF(__pyx_tuple__72);

#line 30 "root_numpy/src/array.pyx"
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_array_c, 30, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/matrix.pyx":5
 * """
 * 
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_tuple__74 = PyTuple_Pack(5, __pyx_n_s_root_mat, __pyx_n_s_mat, __pyx_n_s_arr, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__74)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_tuple__74);

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_tuple__74);

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_matrix_d, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/matrix.pyx":15
 *     return np.matrix(arr)
 * 
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_tuple__76 = PyTuple_Pack(5, __pyx_n_s_root_mat, __pyx_n_s_mat, __pyx_n_s_arr, __pyx_n_s_i, __pyx_n_s_j); if (unlikely(!__pyx_tuple__76)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_tuple__76);

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_GIVEREF(__pyx_tuple__76);

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_3, __pyx_n_s_matrix_f, 15, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/sample.pyx":5
 * """
 * 
 * def sample_f1(f1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 */

#line 5 "root_numpy/src/sample.pyx"
  __pyx_tuple__78 = PyTuple_Pack(5, __pyx_n_s_f1, __pyx_n_s_n_samples, __pyx_n_s_f1_2, __pyx_n_s_i, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__78)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__78);

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__78);

#line 5 "root_numpy/src/sample.pyx"
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_n_s_sample_f1, 5, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/sample.pyx":14
 * 
 * 
 * def sample_h1(h1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 */

#line 14 "root_numpy/src/sample.pyx"
  __pyx_tuple__80 = PyTuple_Pack(5, __pyx_n_s_h1, __pyx_n_s_n_samples, __pyx_n_s_h1_2, __pyx_n_s_i, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__80)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__80);

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__80);

#line 14 "root_numpy/src/sample.pyx"
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_n_s_sample_h1, 14, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/sample.pyx":23
 * 
 * 
 * def sample_f2(f2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 */

#line 23 "root_numpy/src/sample.pyx"
  __pyx_tuple__82 = PyTuple_Pack(7, __pyx_n_s_f2, __pyx_n_s_n_samples, __pyx_n_s_f2_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__82)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__82);

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__82);

#line 23 "root_numpy/src/sample.pyx"
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_n_s_sample_f2, 23, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/sample.pyx":36
 * 
 * 
 * def sample_h2(h2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 */

#line 36 "root_numpy/src/sample.pyx"
  __pyx_tuple__84 = PyTuple_Pack(7, __pyx_n_s_h2, __pyx_n_s_n_samples, __pyx_n_s_h2_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__84)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__84);

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__84);

#line 36 "root_numpy/src/sample.pyx"
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(2, 0, 7, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_n_s_sample_h2, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/sample.pyx":49
 * 
 * 
 * def sample_f3(f3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 */

#line 49 "root_numpy/src/sample.pyx"
  __pyx_tuple__86 = PyTuple_Pack(8, __pyx_n_s_f3, __pyx_n_s_n_samples, __pyx_n_s_f3_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__86)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__86);

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__86);

#line 49 "root_numpy/src/sample.pyx"
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_n_s_sample_f3, 49, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/sample.pyx":64
 * 
 * 
 * def sample_h3(h3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 */

#line 64 "root_numpy/src/sample.pyx"
  __pyx_tuple__88 = PyTuple_Pack(8, __pyx_n_s_h3, __pyx_n_s_n_samples, __pyx_n_s_h3_2, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_z, __pyx_n_s_arr); if (unlikely(!__pyx_tuple__88)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_tuple__88);

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GIVEREF(__pyx_tuple__88);

#line 64 "root_numpy/src/sample.pyx"
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(2, 0, 8, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_4, __pyx_n_s_sample_h3, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 1 "root_numpy/src/hist.pyx"
  __pyx_tuple__90 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__90)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__90);

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__90);

#line 1 "root_numpy/src/hist.pyx"
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_fill_h1, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 26 "root_numpy/src/hist.pyx"
  __pyx_tuple__92 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__92)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__92);

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__92);

#line 26 "root_numpy/src/hist.pyx"
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_fill_h2, 26, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 51 "root_numpy/src/hist.pyx"
  __pyx_tuple__94 = PyTuple_Pack(9, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__94)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__94);

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__94);

#line 51 "root_numpy/src/hist.pyx"
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_fill_h3, 51, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/hist.pyx":76
 *         return idx
 * 
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 76 "root_numpy/src/hist.pyx"
  __pyx_tuple__96 = PyTuple_Pack(9, __pyx_n_s_profile, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_profile_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__96)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__96);

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__96);

#line 76 "root_numpy/src/hist.pyx"
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_fill_p1, 76, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/hist.pyx":101
 *         return idx
 * 
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 101 "root_numpy/src/hist.pyx"
  __pyx_tuple__98 = PyTuple_Pack(9, __pyx_n_s_profile, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_profile_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__98)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__98);

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__98);

#line 101 "root_numpy/src/hist.pyx"
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_fill_p2, 101, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/hist.pyx":126
 *         return idx
 * 
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 126 "root_numpy/src/hist.pyx"
  __pyx_tuple__100 = PyTuple_Pack(9, __pyx_n_s_profile, __pyx_n_s_array, __pyx_n_s_weights, __pyx_n_s_return_indices, __pyx_n_s_profile_2, __pyx_n_s_size, __pyx_n_s_idx, __pyx_n_s_i, __pyx_n_s_bin_idx); if (unlikely(!__pyx_tuple__100)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_tuple__100);

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_GIVEREF(__pyx_tuple__100);

#line 126 "root_numpy/src/hist.pyx"
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(4, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_5, __pyx_n_s_fill_p3, 126, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/graph.pyx":1
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 1 "root_numpy/src/graph.pyx"
  __pyx_tuple__102 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_array, __pyx_n_s_graph_2, __pyx_n_s_size, __pyx_n_s_i); if (unlikely(!__pyx_tuple__102)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_GOTREF(__pyx_tuple__102);

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_GIVEREF(__pyx_tuple__102);

#line 1 "root_numpy/src/graph.pyx"
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_fill_g1, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/graph.pyx":11
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 11 "root_numpy/src/graph.pyx"
  __pyx_tuple__104 = PyTuple_Pack(5, __pyx_n_s_graph, __pyx_n_s_array, __pyx_n_s_graph_2, __pyx_n_s_size, __pyx_n_s_i); if (unlikely(!__pyx_tuple__104)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_GOTREF(__pyx_tuple__104);

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_GIVEREF(__pyx_tuple__104);

#line 11 "root_numpy/src/graph.pyx"
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(2, 0, 5, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_6, __pyx_n_s_fill_g2, 11, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":1
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__106 = PyTuple_Pack(6, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__106)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__106);

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__106);

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_h1, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":12
 * 
 * 
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__108 = PyTuple_Pack(6, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__108)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__108);

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__108);

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_h2, 12, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":23
 * 
 * 
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__110 = PyTuple_Pack(6, __pyx_n_s_hist, __pyx_n_s_array, __pyx_n_s_hist_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__110)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__110);

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__110);

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_h3, 23, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":34
 * 
 * 
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 */

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__112 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__112)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__112);

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__112);

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_f1, 34, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":45
 * 
 * 
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 */

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__114 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__114)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__114);

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__114);

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_f2, 45, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":56
 * 
 * 
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 */

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__116 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__116)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__116);

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__116);

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_f3, 56, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":67
 * 
 * 
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__118 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__118)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__118);

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__118);

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_formula_1d, 67, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":78
 * 
 * 
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__120 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__120)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__120);

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__120);

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_formula_2d, 78, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":89
 * 
 * 
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__122 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__122)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__122);

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__122);

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_formula_3d, 89, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":100
 * 
 * 
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__124 = PyTuple_Pack(6, __pyx_n_s_func, __pyx_n_s_array, __pyx_n_s_func_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__124)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__124);

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__124);

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_formula_4d, 100, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":111
 * 
 * 
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 */

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__126 = PyTuple_Pack(6, __pyx_n_s_graph, __pyx_n_s_array, __pyx_n_s_graph_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__126)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__126);

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__126);

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_graph, 111, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/evaluate.pyx":122
 * 
 * 
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 */

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_tuple__128 = PyTuple_Pack(6, __pyx_n_s_spline, __pyx_n_s_array, __pyx_n_s_spline_2, __pyx_n_s_size, __pyx_n_s_values, __pyx_n_s_i); if (unlikely(!__pyx_tuple__128)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__128);

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__128);

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_7, __pyx_n_s_evaluate_spline, 122, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "root_numpy/src/evaluate.pyx"
  return 0;

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_L1_error:;

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 122 "root_numpy/src/evaluate.pyx"
  return -1;

#line 122 "root_numpy/src/evaluate.pyx"
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_librootnumpy(void); /*proto*/
PyMODINIT_FUNC init_librootnumpy(void)
#else
PyMODINIT_FUNC PyInit__librootnumpy(void); /*proto*/
PyMODINIT_FUNC PyInit__librootnumpy(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  std::string __pyx_t_16;
  std::string __pyx_t_17;
  int __pyx_t_18;
  __pyx_t_13_librootnumpy_CONVERTERS_ITEM __pyx_t_19;
  __pyx_t_13_librootnumpy_VectorBoolConverter *__pyx_t_20;
  __pyx_t_13_librootnumpy_VectorVectorBoolConverter *__pyx_t_21;
  __pyx_t_13_librootnumpy_StringConverter *__pyx_t_22;
  __pyx_t_13_librootnumpy_VectorStringConverter *__pyx_t_23;
  __pyx_t_13_librootnumpy_VectorVectorStringConverter *__pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__librootnumpy(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_librootnumpy", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main__librootnumpy) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "_librootnumpy")) {
      if (unlikely(PyDict_SetItemString(modules, "_librootnumpy", __pyx_m) < 0)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[14]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[15]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[16]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType("array", "array", sizeof(arrayobject), 0); if (unlikely(!__pyx_ptype_7cpython_5array_array)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "root_numpy/src/setup.pxi":5
 * #PY3 = sys.version > '3'
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * np.import_array()
 */

#line 5 "root_numpy/src/setup.pxi"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_1);

#line 5 "root_numpy/src/setup.pxi"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/setup.pxi":7
 * import numpy as np
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * from cpython cimport array
 */

#line 7 "root_numpy/src/setup.pxi"
  import_array();

  /* "root_numpy/src/setup.pxi":31
 * from libc.stdlib cimport malloc, free, realloc
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from collections import OrderedDict
 * except ImportError:
 */

#line 31 "root_numpy/src/setup.pxi"
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);

#line 31 "root_numpy/src/setup.pxi"
    /*try:*/ {

      /* "root_numpy/src/setup.pxi":32
 * 
 * try:
 *     from collections import OrderedDict             # <<<<<<<<<<<<<<
 * except ImportError:
 *     # Fall back on drop-in
 */

#line 32 "root_numpy/src/setup.pxi"
      __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L2_error;}

#line 32 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_1);

#line 32 "root_numpy/src/setup.pxi"
      __Pyx_INCREF(__pyx_n_s_OrderedDict);

#line 32 "root_numpy/src/setup.pxi"
      PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderedDict);

#line 32 "root_numpy/src/setup.pxi"
      __Pyx_GIVEREF(__pyx_n_s_OrderedDict);

#line 32 "root_numpy/src/setup.pxi"
      __pyx_t_5 = __Pyx_Import(__pyx_n_s_collections, __pyx_t_1, -1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L2_error;}

#line 32 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_5);

#line 32 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 32 "root_numpy/src/setup.pxi"
      __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L2_error;}

#line 32 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_1);

#line 32 "root_numpy/src/setup.pxi"
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L2_error;}

#line 32 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 32 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 32 "root_numpy/src/setup.pxi"
    }

#line 32 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 32 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 32 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 32 "root_numpy/src/setup.pxi"
    goto __pyx_L9_try_end;

#line 32 "root_numpy/src/setup.pxi"
    __pyx_L2_error:;

#line 32 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 32 "root_numpy/src/setup.pxi"
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "root_numpy/src/setup.pxi":33
 * try:
 *     from collections import OrderedDict
 * except ImportError:             # <<<<<<<<<<<<<<
 *     # Fall back on drop-in
 *     from .extern.ordereddict import OrderedDict
 */

#line 33 "root_numpy/src/setup.pxi"
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_ImportError);

#line 33 "root_numpy/src/setup.pxi"
    if (__pyx_t_6) {

#line 33 "root_numpy/src/setup.pxi"
      __Pyx_AddTraceback("_librootnumpy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 33 "root_numpy/src/setup.pxi"
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_1, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}

#line 33 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_5);

#line 33 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_1);

#line 33 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_7);

      /* "root_numpy/src/setup.pxi":35
 * except ImportError:
 *     # Fall back on drop-in
 *     from .extern.ordereddict import OrderedDict             # <<<<<<<<<<<<<<
 * 
 * import atexit
 */

#line 35 "root_numpy/src/setup.pxi"
      __pyx_t_8 = PyList_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_8);

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_INCREF(__pyx_n_s_OrderedDict);

#line 35 "root_numpy/src/setup.pxi"
      PyList_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_OrderedDict);

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_GIVEREF(__pyx_n_s_OrderedDict);

#line 35 "root_numpy/src/setup.pxi"
      __pyx_t_9 = __Pyx_Import(__pyx_n_s_extern_ordereddict, __pyx_t_8, 1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_9);

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 35 "root_numpy/src/setup.pxi"
      __pyx_t_8 = __Pyx_ImportFrom(__pyx_t_9, __pyx_n_s_OrderedDict); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_GOTREF(__pyx_t_8);

#line 35 "root_numpy/src/setup.pxi"
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderedDict, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 35 "root_numpy/src/setup.pxi"
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 35 "root_numpy/src/setup.pxi"
      goto __pyx_L3_exception_handled;

#line 35 "root_numpy/src/setup.pxi"
    }

#line 35 "root_numpy/src/setup.pxi"
    goto __pyx_L4_except_error;

#line 35 "root_numpy/src/setup.pxi"
    __pyx_L4_except_error:;

#line 35 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 35 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 35 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 35 "root_numpy/src/setup.pxi"
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

#line 35 "root_numpy/src/setup.pxi"
    goto __pyx_L1_error;

#line 35 "root_numpy/src/setup.pxi"
    __pyx_L3_exception_handled:;

#line 35 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_2);

#line 35 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_3);

#line 35 "root_numpy/src/setup.pxi"
    __Pyx_XGIVEREF(__pyx_t_4);

#line 35 "root_numpy/src/setup.pxi"
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);

#line 35 "root_numpy/src/setup.pxi"
    __pyx_L9_try_end:;

#line 35 "root_numpy/src/setup.pxi"
  }

  /* "root_numpy/src/setup.pxi":37
 *     from .extern.ordereddict import OrderedDict
 * 
 * import atexit             # <<<<<<<<<<<<<<
 * import warnings
 * from ._warnings import RootNumpyUnconvertibleWarning
 */

#line 37 "root_numpy/src/setup.pxi"
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_atexit, 0, -1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_7);

#line 37 "root_numpy/src/setup.pxi"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_atexit, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 37 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/setup.pxi":38
 * 
 * import atexit
 * import warnings             # <<<<<<<<<<<<<<
 * from ._warnings import RootNumpyUnconvertibleWarning
 * 
 */

#line 38 "root_numpy/src/setup.pxi"
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_7);

#line 38 "root_numpy/src/setup.pxi"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 38 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/setup.pxi":39
 * import atexit
 * import warnings
 * from ._warnings import RootNumpyUnconvertibleWarning             # <<<<<<<<<<<<<<
 * 
 * ctypedef unsigned char unsigned_char
 */

#line 39 "root_numpy/src/setup.pxi"
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 39 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_7);

#line 39 "root_numpy/src/setup.pxi"
  __Pyx_INCREF(__pyx_n_s_RootNumpyUnconvertibleWarning);

#line 39 "root_numpy/src/setup.pxi"
  PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_RootNumpyUnconvertibleWarning);

#line 39 "root_numpy/src/setup.pxi"
  __Pyx_GIVEREF(__pyx_n_s_RootNumpyUnconvertibleWarning);

#line 39 "root_numpy/src/setup.pxi"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings_2, __pyx_t_7, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 39 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_1);

#line 39 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 39 "root_numpy/src/setup.pxi"
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RootNumpyUnconvertibleWarning); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 39 "root_numpy/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_7);

#line 39 "root_numpy/src/setup.pxi"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RootNumpyUnconvertibleWarning, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 39 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 39 "root_numpy/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":3
 * # cython: experimental_cpp_class_def=True
 * 
 * TYPES = {             # <<<<<<<<<<<<<<
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 */

#line 3 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

  /* "root_numpy/src/tree.pyx":4
 * 
 * TYPES = {
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),             # <<<<<<<<<<<<<<
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 */

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyStr_FromString(TypeName<bool> ().name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_bool); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 4 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyInt_FromLong(NPY_BOOL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_n_s_bool);

#line 4 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_bool);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_n_s_bool);

#line 4 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 4 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 4 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 4 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 4 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/tree.pyx":5
 * TYPES = {
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 */

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyStr_FromString(TypeName<char> ().name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 5 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyInt_FromLong(NPY_INT8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_n_s_char);

#line 5 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_char);

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_n_s_char);

#line 5 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 5 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 5 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 5 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 5 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "root_numpy/src/tree.pyx":6
 *     TypeName[bool]().name:               ('bool',               np.dtype(np.bool),      np.NPY_BOOL),
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),             # <<<<<<<<<<<<<<
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),
 */

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_char> ().name); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint8); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 6 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyInt_FromLong(NPY_UINT8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_char);

#line 6 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_unsigned_char);

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_char);

#line 6 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 6 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 6 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 6 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 6 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "root_numpy/src/tree.pyx":7
 *     TypeName[char]().name:               ('char',               np.dtype(np.int8),      np.NPY_INT8),
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 */

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyStr_FromString(TypeName<short> ().name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int16); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 7 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_9 = PyInt_FromLong(NPY_INT16); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_n_s_short);

#line 7 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_short);

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_n_s_short);

#line 7 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 7 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 7 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 7 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 7 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":8
 *     TypeName[unsigned_char]().name:      ('unsigned char',      np.dtype(np.uint8),     np.NPY_UINT8),
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),             # <<<<<<<<<<<<<<
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 */

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_short> ().name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint16); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyInt_FromLong(NPY_UINT16); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_short);

#line 8 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_unsigned_short);

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_short);

#line 8 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 8 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 8 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 8 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 8 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/tree.pyx":9
 *     TypeName[short]().name:              ('short',              np.dtype(np.int16),     np.NPY_INT16),
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 */

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyStr_FromString(TypeName<int> ().name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 9 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyInt_FromLong(NPY_INT32); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_n_s_int);

#line 9 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_n_s_int);

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_n_s_int);

#line 9 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 9 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 9 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 9 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 9 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "root_numpy/src/tree.pyx":10
 *     TypeName[unsigned_short]().name:     ('unsigned short',     np.dtype(np.uint16),    np.NPY_UINT16),
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),             # <<<<<<<<<<<<<<
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 */

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_int> ().name); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint32); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 10 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyInt_FromLong(NPY_UINT32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_int);

#line 10 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_unsigned_int);

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_int);

#line 10 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 10 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 10 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 10 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 10 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "root_numpy/src/tree.pyx":11
 *     TypeName[int]().name:                ('int',                np.dtype(np.int32),     np.NPY_INT32),
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 */

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyStr_FromString(TypeName<long> ().name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_int64); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 11 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_9 = PyInt_FromLong(NPY_INT64); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_n_s_long);

#line 11 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_long);

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_n_s_long);

#line 11 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 11 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 11 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 11 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 11 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":12
 *     TypeName[unsigned_int]().name:       ('unsigned int',       np.dtype(np.uint32),    np.NPY_UINT32),
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),             # <<<<<<<<<<<<<<
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 */

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_long> ().name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_uint64); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 12 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyInt_FromLong(NPY_UINT64); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_long);

#line 12 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_s_unsigned_long);

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_long);

#line 12 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 12 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 12 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 12 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 12 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/tree.pyx":13
 *     TypeName[long]().name:               ('long',               np.dtype(np.int64),     np.NPY_INT64),
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),             # <<<<<<<<<<<<<<
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 */

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_long_long> ().name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_longlong); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 13 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_9 = PyTuple_New(3); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_kp_s_long_long);

#line 13 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_s_long_long);

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_long_long);

#line 13 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 13 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_7);

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 13 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 13 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 13 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "root_numpy/src/tree.pyx":14
 *     TypeName[unsigned_long]().name:      ('unsigned long',      np.dtype(np.uint64),    np.NPY_UINT64),
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),             # <<<<<<<<<<<<<<
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),
 */

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyStr_FromString(TypeName<__pyx_t_13_librootnumpy_unsigned_long_long> ().name); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_ulonglong); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 14 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_kp_s_unsigned_long_long);

#line 14 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_s_unsigned_long_long);

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_kp_s_unsigned_long_long);

#line 14 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_7);

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 14 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_8);

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 14 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 14 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_9, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 14 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "root_numpy/src/tree.pyx":15
 *     TypeName[long_long]().name:          ('long long',          np.dtype(np.longlong),  np.NPY_LONGLONG),
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),             # <<<<<<<<<<<<<<
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),
 * }
 */

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyStr_FromString(TypeName<float> ().name); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_float32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 15 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_9, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_9 = PyInt_FromLong(NPY_FLOAT32); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_n_s_float);

#line 15 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_float);

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_n_s_float);

#line 15 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_8);

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 15 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 15 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 15 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_5, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 15 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":16
 *     TypeName[unsigned_long_long]().name: ('unsigned long long', np.dtype(np.ulonglong), np.NPY_ULONGLONG),
 *     TypeName[float]().name:              ('float',              np.dtype(np.float32),   np.NPY_FLOAT32),
 *     TypeName[double]().name:             ('double',             np.dtype(np.float64),   np.NPY_FLOAT64),             # <<<<<<<<<<<<<<
 * }
 * 
 */

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyStr_FromString(TypeName<double> ().name); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_float64); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 16 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9);

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_9 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_9);

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_5 = PyInt_FromLong(NPY_FLOAT64); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_INCREF(__pyx_n_s_double);

#line 16 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_n_s_double);

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_n_s_double);

#line 16 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_9);

#line 16 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_9 = 0;

#line 16 "root_numpy/src/tree.pyx"
  __pyx_t_5 = 0;

#line 16 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 16 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TYPES, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 16 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":19
 * }
 * 
 * TYPES_NUMPY2ROOT = {             # <<<<<<<<<<<<<<
 *     np.dtype(np.bool):      (1, 'O'),
 *     np.dtype(np.int8):      (1, 'B'),
 */

#line 19 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 19 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

  /* "root_numpy/src/tree.pyx":20
 * 
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):      (1, 'O'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),
 */

#line 20 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 20 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_bool); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 20 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 20 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 20 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 20 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 20 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__34) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 20 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":21
 * TYPES_NUMPY2ROOT = {
 *     np.dtype(np.bool):      (1, 'O'),
 *     np.dtype(np.int8):      (1, 'B'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),
 */

#line 21 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 21 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 21 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 21 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 21 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 21 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 21 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__35) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 21 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/tree.pyx":22
 *     np.dtype(np.bool):      (1, 'O'),
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),
 */

#line 22 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 22 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int16); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 22 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 22 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 22 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 22 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 22 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__36) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":23
 *     np.dtype(np.int8):      (1, 'B'),
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),
 */

#line 23 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 23 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_int32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 23 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 23 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 23 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 23 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 23 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__37) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/tree.pyx":24
 *     np.dtype(np.int16):     (2, 'S'),
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),
 */

#line 24 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 24 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int64); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 24 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 24 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 24 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 24 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 24 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__38) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":25
 *     np.dtype(np.int32):     (4, 'I'),
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),
 */

#line 25 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 25 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_uint8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 25 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 25 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 25 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 25 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 25 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__39) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/tree.pyx":26
 *     np.dtype(np.int64):     (8, 'L'),
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),
 */

#line 26 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 26 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint16); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 26 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 26 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 26 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 26 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 26 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__40) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":27
 *     np.dtype(np.uint8):     (1, 'b'),
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),
 */

#line 27 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 27 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_uint32); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 27 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 27 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 27 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 27 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 27 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__41) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 27 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/tree.pyx":28
 *     np.dtype(np.uint16):    (2, 's'),
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),
 */

#line 28 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 28 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_uint64); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 28 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 28 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 28 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 28 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 28 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__42) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":29
 *     np.dtype(np.uint32):    (4, 'i'),
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float32):   (4, 'F'),
 *     np.dtype(np.float64):   (8, 'D'),
 */

#line 29 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 29 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 29 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 29 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 29 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 29 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 29 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__43) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 29 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "root_numpy/src/tree.pyx":30
 *     np.dtype(np.uint64):    (8, 'l'),
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),             # <<<<<<<<<<<<<<
 *     np.dtype(np.float64):   (8, 'D'),
 * }
 */

#line 30 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 30 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_float32); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 30 "root_numpy/src/tree.pyx"
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 30 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7);

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_7);

#line 30 "root_numpy/src/tree.pyx"
  __pyx_t_7 = 0;

#line 30 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 30 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_7, __pyx_tuple__44) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":31
 *     np.dtype(np.float):     (8, 'D'),
 *     np.dtype(np.float32):   (4, 'F'),
 *     np.dtype(np.float64):   (8, 'D'),             # <<<<<<<<<<<<<<
 * }
 * 
 */

#line 31 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 31 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_float64); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 31 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 31 "root_numpy/src/tree.pyx"
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_GIVEREF(__pyx_t_8);

#line 31 "root_numpy/src/tree.pyx"
  __pyx_t_8 = 0;

#line 31 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_5numpy_dtype)), __pyx_t_7, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 31 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_t_8, __pyx_tuple__45) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 31 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TYPES_NUMPY2ROOT, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 31 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":34
 * }
 * 
 * SPECIAL_TYPEDEFS = {             # <<<<<<<<<<<<<<
 *     'Long64_t': 'long long',
 *     'ULong64_t': 'unsigned long long',
 */

#line 34 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 34 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_Long64_t, __pyx_kp_s_long_long) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_ULong64_t, __pyx_kp_s_unsigned_long_long) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SPECIAL_TYPEDEFS, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":47
 * 
 * 
 * def list_trees(fname):             # <<<<<<<<<<<<<<
 *     cdef TFile* f = Open(fname, 'read')
 *     if f is NULL:
 */

#line 47 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_1list_trees, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 47 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_trees, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 47 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":65
 * 
 * 
 * def list_structures(fname, tree=None):             # <<<<<<<<<<<<<<
 *     if tree is None:
 *         # automatically select single tree
 */

#line 65 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_3list_structures, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 65 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_structures, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 65 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":82
 * 
 * 
 * def list_branches(fname, tree=None):             # <<<<<<<<<<<<<<
 *     return list(list_structures(fname, tree).keys())
 * 
 */

#line 82 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_5list_branches, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 82 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_list_branches, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 82; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 82 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":422
 * 
 * # basic type converters
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():             # <<<<<<<<<<<<<<
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(
 */

#line 422 "root_numpy/src/tree.pyx"
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_TYPES); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_8);

#line 422 "root_numpy/src/tree.pyx"
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_items); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 422 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 422 "root_numpy/src/tree.pyx"
  __pyx_t_8 = NULL;

#line 422 "root_numpy/src/tree.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_7))) {

#line 422 "root_numpy/src/tree.pyx"
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);

#line 422 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_8)) {

#line 422 "root_numpy/src/tree.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(function);

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_t_7, function);

#line 422 "root_numpy/src/tree.pyx"
    }

#line 422 "root_numpy/src/tree.pyx"
  }

#line 422 "root_numpy/src/tree.pyx"
  if (__pyx_t_8) {

#line 422 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 422 "root_numpy/src/tree.pyx"
  } else {

#line 422 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
  }

#line 422 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 422 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

#line 422 "root_numpy/src/tree.pyx"
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {

#line 422 "root_numpy/src/tree.pyx"
    __pyx_t_7 = __pyx_t_1; __Pyx_INCREF(__pyx_t_7); __pyx_t_10 = 0;

#line 422 "root_numpy/src/tree.pyx"
    __pyx_t_11 = NULL;

#line 422 "root_numpy/src/tree.pyx"
  } else {
    __pyx_t_10 = -1; 
#line 422 "root_numpy/src/tree.pyx"
__pyx_t_7 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 422 "root_numpy/src/tree.pyx"
    __pyx_t_11 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
  }

#line 422 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 422 "root_numpy/src/tree.pyx"
  for (;;) {

#line 422 "root_numpy/src/tree.pyx"
    if (likely(!__pyx_t_11)) {

#line 422 "root_numpy/src/tree.pyx"
      if (likely(PyList_CheckExact(__pyx_t_7))) {

#line 422 "root_numpy/src/tree.pyx"
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_7)) break;

#line 422 "root_numpy/src/tree.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
        #else

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
        #endif

#line 422 "root_numpy/src/tree.pyx"
      } else {

#line 422 "root_numpy/src/tree.pyx"
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_7)) break;

#line 422 "root_numpy/src/tree.pyx"
        #if CYTHON_COMPILING_IN_CPYTHON

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_1); __pyx_t_10++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
        #else

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_1 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
        #endif

#line 422 "root_numpy/src/tree.pyx"
      }
    } else 
#line 422 "root_numpy/src/tree.pyx"
{

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_1 = __pyx_t_11(__pyx_t_7);

#line 422 "root_numpy/src/tree.pyx"
      if (unlikely(!__pyx_t_1)) {

#line 422 "root_numpy/src/tree.pyx"
        PyObject* exc_type = PyErr_Occurred();

#line 422 "root_numpy/src/tree.pyx"
        if (exc_type) {

#line 422 "root_numpy/src/tree.pyx"
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();

#line 422 "root_numpy/src/tree.pyx"
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
        }

#line 422 "root_numpy/src/tree.pyx"
        break;

#line 422 "root_numpy/src/tree.pyx"
      }

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_1);

#line 422 "root_numpy/src/tree.pyx"
    }

#line 422 "root_numpy/src/tree.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {

#line 422 "root_numpy/src/tree.pyx"
      PyObject* sequence = __pyx_t_1;

#line 422 "root_numpy/src/tree.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 422 "root_numpy/src/tree.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 422 "root_numpy/src/tree.pyx"
      #else

#line 422 "root_numpy/src/tree.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 422 "root_numpy/src/tree.pyx"
      #endif

#line 422 "root_numpy/src/tree.pyx"
      if (unlikely(size != 2)) {

#line 422 "root_numpy/src/tree.pyx"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 422 "root_numpy/src/tree.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 422 "root_numpy/src/tree.pyx"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      }

#line 422 "root_numpy/src/tree.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 422 "root_numpy/src/tree.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 

#line 422 "root_numpy/src/tree.pyx"
      } else {

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 

#line 422 "root_numpy/src/tree.pyx"
      }

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_5);

#line 422 "root_numpy/src/tree.pyx"
      #else

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_8);

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 422 "root_numpy/src/tree.pyx"
      #endif

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 422 "root_numpy/src/tree.pyx"
    } else {

#line 422 "root_numpy/src/tree.pyx"
      Py_ssize_t index = -1;

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_12 = Py_TYPE(__pyx_t_9)->tp_iternext;
      index = 0; __pyx_t_8 = __pyx_t_12(__pyx_t_9); if (unlikely(!__pyx_t_8)) 
#line 422 "root_numpy/src/tree.pyx"
goto __pyx_L14_unpacking_failed;

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_8);
      index = 1; __pyx_t_5 = __pyx_t_12(__pyx_t_9); if (unlikely(!__pyx_t_5)) 
#line 422 "root_numpy/src/tree.pyx"
goto __pyx_L14_unpacking_failed;

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_5);

#line 422 "root_numpy/src/tree.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_9), 2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_12 = NULL;

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 422 "root_numpy/src/tree.pyx"
      goto __pyx_L15_unpacking_done;

#line 422 "root_numpy/src/tree.pyx"
      __pyx_L14_unpacking_failed:;

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_12 = NULL;

#line 422 "root_numpy/src/tree.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 422 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __pyx_L15_unpacking_done:;

#line 422 "root_numpy/src/tree.pyx"
    }

#line 422 "root_numpy/src/tree.pyx"
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctypename, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

#line 422 "root_numpy/src/tree.pyx"
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {

#line 422 "root_numpy/src/tree.pyx"
      PyObject* sequence = __pyx_t_5;

#line 422 "root_numpy/src/tree.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 422 "root_numpy/src/tree.pyx"
      Py_ssize_t size = Py_SIZE(sequence);

#line 422 "root_numpy/src/tree.pyx"
      #else

#line 422 "root_numpy/src/tree.pyx"
      Py_ssize_t size = PySequence_Size(sequence);

#line 422 "root_numpy/src/tree.pyx"
      #endif

#line 422 "root_numpy/src/tree.pyx"
      if (unlikely(size != 3)) {

#line 422 "root_numpy/src/tree.pyx"
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);

#line 422 "root_numpy/src/tree.pyx"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 422 "root_numpy/src/tree.pyx"
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      }

#line 422 "root_numpy/src/tree.pyx"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 422 "root_numpy/src/tree.pyx"
      if (likely(PyTuple_CheckExact(sequence))) {

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 0); 

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_13 = PyTuple_GET_ITEM(sequence, 1); 

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_14 = PyTuple_GET_ITEM(sequence, 2); 

#line 422 "root_numpy/src/tree.pyx"
      } else {

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_9 = PyList_GET_ITEM(sequence, 0); 

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_13 = PyList_GET_ITEM(sequence, 1); 

#line 422 "root_numpy/src/tree.pyx"
        __pyx_t_14 = PyList_GET_ITEM(sequence, 2); 

#line 422 "root_numpy/src/tree.pyx"
      }

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_9);

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_13);

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_14);

#line 422 "root_numpy/src/tree.pyx"
      #else

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_9 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_13 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_13);

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_14 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_14);

#line 422 "root_numpy/src/tree.pyx"
      #endif

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 422 "root_numpy/src/tree.pyx"
    } else {

#line 422 "root_numpy/src/tree.pyx"
      Py_ssize_t index = -1;

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_15 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_12 = Py_TYPE(__pyx_t_15)->tp_iternext;
      index = 0; __pyx_t_9 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_9)) 
#line 422 "root_numpy/src/tree.pyx"
goto __pyx_L16_unpacking_failed;

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_9);
      index = 1; __pyx_t_13 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_13)) 
#line 422 "root_numpy/src/tree.pyx"
goto __pyx_L16_unpacking_failed;

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_13);
      index = 2; __pyx_t_14 = __pyx_t_12(__pyx_t_15); if (unlikely(!__pyx_t_14)) 
#line 422 "root_numpy/src/tree.pyx"
goto __pyx_L16_unpacking_failed;

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_GOTREF(__pyx_t_14);

#line 422 "root_numpy/src/tree.pyx"
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_15), 3) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_12 = NULL;

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 422 "root_numpy/src/tree.pyx"
      goto __pyx_L17_unpacking_done;

#line 422 "root_numpy/src/tree.pyx"
      __pyx_L16_unpacking_failed:;

#line 422 "root_numpy/src/tree.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 422 "root_numpy/src/tree.pyx"
      __pyx_t_12 = NULL;

#line 422 "root_numpy/src/tree.pyx"
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);

#line 422 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
      __pyx_L17_unpacking_done:;

#line 422 "root_numpy/src/tree.pyx"
    }

#line 422 "root_numpy/src/tree.pyx"
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_ctype, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

#line 422 "root_numpy/src/tree.pyx"
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_dtype, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 422 "root_numpy/src/tree.pyx"
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_dtypecode, __pyx_t_14) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 422 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

    /* "root_numpy/src/tree.pyx":424
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(             # <<<<<<<<<<<<<<
 *             dtype.itemsize, dtype.name, dtypecode)))
 * 
 */

#line 424 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_ctype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 424 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 424 "root_numpy/src/tree.pyx"
    __pyx_t_16 = __pyx_convert_string_from_py_std__string(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 424 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "root_numpy/src/tree.pyx":425
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(
 *             dtype.itemsize, dtype.name, dtypecode)))             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 425 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 425 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_itemsize); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 425 "root_numpy/src/tree.pyx"
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 425 "root_numpy/src/tree.pyx"
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_dtype); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_5);

#line 425 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 425 "root_numpy/src/tree.pyx"
    __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_t_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 425 "root_numpy/src/tree.pyx"
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_dtypecode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_1);

#line 425 "root_numpy/src/tree.pyx"
    __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 425 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "root_numpy/src/tree.pyx":423
 * # basic type converters
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():
 *     CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *         ctype, new BasicConverter(
 *             dtype.itemsize, dtype.name, dtypecode)))
 */

#line 423 "root_numpy/src/tree.pyx"
    try {

#line 423 "root_numpy/src/tree.pyx"
      __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_16, new __pyx_t_13_librootnumpy_BasicConverter(__pyx_t_6, __pyx_t_17, __pyx_t_18));

#line 423 "root_numpy/src/tree.pyx"
    } catch(...) {

#line 423 "root_numpy/src/tree.pyx"
      __Pyx_CppExn2PyErr();

#line 423 "root_numpy/src/tree.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 423; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 423 "root_numpy/src/tree.pyx"
    }

#line 423 "root_numpy/src/tree.pyx"
    __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

    /* "root_numpy/src/tree.pyx":422
 * 
 * # basic type converters
 * for ctypename, (ctype, dtype, dtypecode) in TYPES.items():             # <<<<<<<<<<<<<<
 *     CONVERTERS.insert(CONVERTERS_ITEM(
 *         ctype, new BasicConverter(
 */

#line 422 "root_numpy/src/tree.pyx"
  }

#line 422 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":430
 * # vector<> converters
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<bool>', new VectorBoolConverter()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<char>', new VectorConverter[char]()))
 */

#line 430 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_bool); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 430 "root_numpy/src/tree.pyx"
  try {

#line 430 "root_numpy/src/tree.pyx"
    __pyx_t_20 = new __pyx_t_13_librootnumpy_VectorBoolConverter();

#line 430 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 430 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 430 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 430 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":429
 * 
 * # vector<> converters
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<bool>', new VectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 429 "root_numpy/src/tree.pyx"
  try {

#line 429 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_20);

#line 429 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 429 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 429 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 429 "root_numpy/src/tree.pyx"
  }

#line 429 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":432
 *     'vector<bool>', new VectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<char>', new VectorConverter[char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 */

#line 432 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_char); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 432; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":431
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<bool>', new VectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<char>', new VectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 431 "root_numpy/src/tree.pyx"
  try {

#line 431 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<char> ());

#line 431 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 431 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 431 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 431; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 431 "root_numpy/src/tree.pyx"
  }

#line 431 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":434
 *     'vector<char>', new VectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<short>', new VectorConverter[short]()))
 */

#line 434 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_unsigned_char); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 434; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":433
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<char>', new VectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 433 "root_numpy/src/tree.pyx"
  try {

#line 433 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_char> ());

#line 433 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 433 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 433 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 433 "root_numpy/src/tree.pyx"
  }

#line 433 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":436
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<short>', new VectorConverter[short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 */

#line 436 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_short); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":435
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned char>', new VectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<short>', new VectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 435 "root_numpy/src/tree.pyx"
  try {

#line 435 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<short> ());

#line 435 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 435 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 435 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 435; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 435 "root_numpy/src/tree.pyx"
  }

#line 435 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":438
 *     'vector<short>', new VectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<int>', new VectorConverter[int]()))
 */

#line 438 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_unsigned_short); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 438; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":437
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<short>', new VectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 437 "root_numpy/src/tree.pyx"
  try {

#line 437 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_short> ());

#line 437 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 437 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 437 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 437 "root_numpy/src/tree.pyx"
  }

#line 437 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":440
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<int>', new VectorConverter[int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 */

#line 440 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_int); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":439
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned short>', new VectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<int>', new VectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 439 "root_numpy/src/tree.pyx"
  try {

#line 439 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<int> ());

#line 439 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 439 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 439 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 439; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 439 "root_numpy/src/tree.pyx"
  }

#line 439 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":442
 *     'vector<int>', new VectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long>', new VectorConverter[long]()))
 */

#line 442 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_unsigned_int); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 442; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":441
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<int>', new VectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 441 "root_numpy/src/tree.pyx"
  try {

#line 441 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_int> ());

#line 441 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 441 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 441 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 441; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 441 "root_numpy/src/tree.pyx"
  }

#line 441 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":444
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long>', new VectorConverter[long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 */

#line 444 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 444; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":443
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned int>', new VectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<long>', new VectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 443 "root_numpy/src/tree.pyx"
  try {

#line 443 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<long> ());

#line 443 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 443 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 443 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 443; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 443 "root_numpy/src/tree.pyx"
  }

#line 443 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":446
 *     'vector<long>', new VectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long long>', new VectorConverter[long_long]()))
 */

#line 446 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_unsigned_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":445
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long>', new VectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 445 "root_numpy/src/tree.pyx"
  try {

#line 445 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_long> ());

#line 445 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 445 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 445 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 445; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 445 "root_numpy/src/tree.pyx"
  }

#line 445 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":448
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long long>', new VectorConverter[long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 */

#line 448 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_long_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":447
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long>', new VectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<long long>', new VectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 447 "root_numpy/src/tree.pyx"
  try {

#line 447 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_long_long> ());

#line 447 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 447 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 447 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 447; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 447 "root_numpy/src/tree.pyx"
  }

#line 447 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":450
 *     'vector<long long>', new VectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<float>', new VectorConverter[float]()))
 */

#line 450 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_unsigned_long_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":449
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<long long>', new VectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 449 "root_numpy/src/tree.pyx"
  try {

#line 449 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<__pyx_t_13_librootnumpy_unsigned_long_long> ());

#line 449 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 449 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 449 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 449 "root_numpy/src/tree.pyx"
  }

#line 449 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":452
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<float>', new VectorConverter[float]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<double>', new VectorConverter[double]()))
 */

#line 452 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_float); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":451
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<unsigned long long>', new VectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<float>', new VectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 451 "root_numpy/src/tree.pyx"
  try {

#line 451 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<float> ());

#line 451 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 451 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 451 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 451; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 451 "root_numpy/src/tree.pyx"
  }

#line 451 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":454
 *     'vector<float>', new VectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<double>', new VectorConverter[double]()))             # <<<<<<<<<<<<<<
 * # vector<vector<> > converters
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 454 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_double); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":453
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<float>', new VectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<double>', new VectorConverter[double]()))
 * # vector<vector<> > converters
 */

#line 453 "root_numpy/src/tree.pyx"
  try {

#line 453 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorConverter<double> ());

#line 453 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 453 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 453 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 453 "root_numpy/src/tree.pyx"
  }

#line 453 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":457
 * # vector<vector<> > converters
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<bool> >', new VectorVectorBoolConverter()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 */

#line 457 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_bool); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 457 "root_numpy/src/tree.pyx"
  try {

#line 457 "root_numpy/src/tree.pyx"
    __pyx_t_21 = new __pyx_t_13_librootnumpy_VectorVectorBoolConverter();

#line 457 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 457 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 457 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 457 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":456
 *     'vector<double>', new VectorConverter[double]()))
 * # vector<vector<> > converters
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<bool> >', new VectorVectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 456 "root_numpy/src/tree.pyx"
  try {

#line 456 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_21);

#line 456 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 456 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 456 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 456 "root_numpy/src/tree.pyx"
  }

#line 456 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":459
 *     'vector<vector<bool> >', new VectorVectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 */

#line 459 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_char); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 459; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":458
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<bool> >', new VectorVectorBoolConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 458 "root_numpy/src/tree.pyx"
  try {

#line 458 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<char> ());

#line 458 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 458 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 458 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 458 "root_numpy/src/tree.pyx"
  }

#line 458 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":461
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 */

#line 461 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_unsigned_char); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":460
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<char> >', new VectorVectorConverter[char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 460 "root_numpy/src/tree.pyx"
  try {

#line 460 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_char> ());

#line 460 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 460 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 460 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 460 "root_numpy/src/tree.pyx"
  }

#line 460 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":463
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 */

#line 463 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_short); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 463; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":462
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned char> >', new VectorVectorConverter[unsigned_char]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 462 "root_numpy/src/tree.pyx"
  try {

#line 462 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<short> ());

#line 462 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 462 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 462 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 462 "root_numpy/src/tree.pyx"
  }

#line 462 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":465
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 */

#line 465 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_unsigned_short); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":464
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<short> >', new VectorVectorConverter[short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 464 "root_numpy/src/tree.pyx"
  try {

#line 464 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_short> ());

#line 464 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 464 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 464 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 464 "root_numpy/src/tree.pyx"
  }

#line 464 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":467
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 */

#line 467 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_int); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 467; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":466
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned short> >', new VectorVectorConverter[unsigned_short]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 466 "root_numpy/src/tree.pyx"
  try {

#line 466 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<int> ());

#line 466 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 466 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 466 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 466 "root_numpy/src/tree.pyx"
  }

#line 466 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":469
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 */

#line 469 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_unsigned_int); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":468
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<int> >', new VectorVectorConverter[int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 468 "root_numpy/src/tree.pyx"
  try {

#line 468 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_int> ());

#line 468 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 468 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 468 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 468 "root_numpy/src/tree.pyx"
  }

#line 468 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":471
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 */

#line 471 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":470
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned int> >', new VectorVectorConverter[unsigned_int]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 470 "root_numpy/src/tree.pyx"
  try {

#line 470 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<long> ());

#line 470 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 470 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 470 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 470; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 470 "root_numpy/src/tree.pyx"
  }

#line 470 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":473
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 */

#line 473 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_unsigned_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 473; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":472
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long> >', new VectorVectorConverter[long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 472 "root_numpy/src/tree.pyx"
  try {

#line 472 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_long> ());

#line 472 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 472 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 472 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 472; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 472 "root_numpy/src/tree.pyx"
  }

#line 472 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":475
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 */

#line 475 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_long_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":474
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long> >', new VectorVectorConverter[unsigned_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 474 "root_numpy/src/tree.pyx"
  try {

#line 474 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_long_long> ());

#line 474 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 474 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 474 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 474 "root_numpy/src/tree.pyx"
  }

#line 474 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":477
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 */

#line 477 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_unsigned_long_long); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":476
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<long long> >', new VectorVectorConverter[long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 476 "root_numpy/src/tree.pyx"
  try {

#line 476 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<__pyx_t_13_librootnumpy_unsigned_long_long> ());

#line 476 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 476 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 476 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 476; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 476 "root_numpy/src/tree.pyx"
  }

#line 476 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":479
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))
 */

#line 479 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_float); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 479; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":478
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<unsigned long long> >', new VectorVectorConverter[unsigned_long_long]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 478 "root_numpy/src/tree.pyx"
  try {

#line 478 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<float> ());

#line 478 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 478 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 478 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 478 "root_numpy/src/tree.pyx"
  }

#line 478 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":481
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))             # <<<<<<<<<<<<<<
 * # string converters
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 481 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_double); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/src/tree.pyx":480
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<float> >', new VectorVectorConverter[float]()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))
 * # string converters
 */

#line 480 "root_numpy/src/tree.pyx"
  try {

#line 480 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, new __pyx_t_13_librootnumpy_VectorVectorConverter<double> ());

#line 480 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 480 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 480 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 480; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 480 "root_numpy/src/tree.pyx"
  }

#line 480 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":484
 * # string converters
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'string', new StringConverter()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<string>', new VectorStringConverter()))
 */

#line 484 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_n_b_string); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 484 "root_numpy/src/tree.pyx"
  try {

#line 484 "root_numpy/src/tree.pyx"
    __pyx_t_22 = new __pyx_t_13_librootnumpy_StringConverter();

#line 484 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 484 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 484 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 484; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 484 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":483
 *     'vector<vector<double> >', new VectorVectorConverter[double]()))
 * # string converters
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'string', new StringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 483 "root_numpy/src/tree.pyx"
  try {

#line 483 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_22);

#line 483 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 483 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 483 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 483; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 483 "root_numpy/src/tree.pyx"
  }

#line 483 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":486
 *     'string', new StringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<string>', new VectorStringConverter()))             # <<<<<<<<<<<<<<
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<string> >', new VectorVectorStringConverter()))
 */

#line 486 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_string); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 486 "root_numpy/src/tree.pyx"
  try {

#line 486 "root_numpy/src/tree.pyx"
    __pyx_t_23 = new __pyx_t_13_librootnumpy_VectorStringConverter();

#line 486 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 486 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 486 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 486 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":485
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'string', new StringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<string>', new VectorStringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 */

#line 485 "root_numpy/src/tree.pyx"
  try {

#line 485 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_23);

#line 485 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 485 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 485 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 485; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 485 "root_numpy/src/tree.pyx"
  }

#line 485 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":488
 *     'vector<string>', new VectorStringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<vector<string> >', new VectorVectorStringConverter()))             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 488 "root_numpy/src/tree.pyx"
  __pyx_t_17 = __pyx_convert_string_from_py_std__string(__pyx_kp_b_vector_vector_string); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 488 "root_numpy/src/tree.pyx"
  try {

#line 488 "root_numpy/src/tree.pyx"
    __pyx_t_24 = new __pyx_t_13_librootnumpy_VectorVectorStringConverter();

#line 488 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 488 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 488 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 488 "root_numpy/src/tree.pyx"
  }

  /* "root_numpy/src/tree.pyx":487
 * CONVERTERS.insert(CONVERTERS_ITEM(
 *     'vector<string>', new VectorStringConverter()))
 * CONVERTERS.insert(CONVERTERS_ITEM(             # <<<<<<<<<<<<<<
 *     'vector<vector<string> >', new VectorVectorStringConverter()))
 * 
 */

#line 487 "root_numpy/src/tree.pyx"
  try {

#line 487 "root_numpy/src/tree.pyx"
    __pyx_t_19 = __pyx_t_13_librootnumpy_CONVERTERS_ITEM(__pyx_t_17, __pyx_t_24);

#line 487 "root_numpy/src/tree.pyx"
  } catch(...) {

#line 487 "root_numpy/src/tree.pyx"
    __Pyx_CppExn2PyErr();

#line 487 "root_numpy/src/tree.pyx"
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 487 "root_numpy/src/tree.pyx"
  }

#line 487 "root_numpy/src/tree.pyx"
  __pyx_v_13_librootnumpy_CONVERTERS.insert(__pyx_t_19);

  /* "root_numpy/src/tree.pyx":705
 * 
 * 
 * def root2array_fromFname(fnames, treename, branches,             # <<<<<<<<<<<<<<
 *                          selection, start, stop, step,
 *                          include_weight, weight_name):
 */

#line 705 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_7root2array_fromFname, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 705 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_root2array_fromFname, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 705; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 705 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":724
 * 
 * 
 * def root2array_fromCObj(tree, branches, selection,             # <<<<<<<<<<<<<<
 *                         start, stop, step,
 *                         include_weight, weight_name):
 */

#line 724 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_9root2array_fromCObj, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 724 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_root2array_fromCObj, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 724; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 724 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":872
 * 
 * 
 * def array2tree_toCObj(arr, name='tree', tree=None):             # <<<<<<<<<<<<<<
 *     cdef TTree* intree = NULL
 *     cdef TTree* outtree = NULL
 */

#line 872 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_11array2tree_toCObj, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 872 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array2tree_toCObj, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 872; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 872 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":886
 * 
 * 
 * def array2root(arr, filename, treename='tree', mode='update'):             # <<<<<<<<<<<<<<
 *     cdef TFile* file = Open(filename, mode)
 *     if file is NULL:
 */

#line 886 "root_numpy/src/tree.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_13array2root, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 886 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array2root, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 886; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 886 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/tree.pyx":902
 * 
 * 
 * @atexit.register             # <<<<<<<<<<<<<<
 * def cleanup():
 *     # delete all allocated converters
 */

#line 902 "root_numpy/src/tree.pyx"
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_atexit); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 902 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 902 "root_numpy/src/tree.pyx"
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_register); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 902 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 902 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/src/tree.pyx":903
 * 
 * @atexit.register
 * def cleanup():             # <<<<<<<<<<<<<<
 *     # delete all allocated converters
 *     it = CONVERTERS.begin()
 */

#line 903 "root_numpy/src/tree.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_15cleanup, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 903 "root_numpy/src/tree.pyx"
  __pyx_t_8 = NULL;

#line 903 "root_numpy/src/tree.pyx"
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {

#line 903 "root_numpy/src/tree.pyx"
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);

#line 903 "root_numpy/src/tree.pyx"
    if (likely(__pyx_t_8)) {

#line 903 "root_numpy/src/tree.pyx"
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);

#line 903 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(__pyx_t_8);

#line 903 "root_numpy/src/tree.pyx"
      __Pyx_INCREF(function);

#line 903 "root_numpy/src/tree.pyx"
      __Pyx_DECREF_SET(__pyx_t_5, function);

#line 903 "root_numpy/src/tree.pyx"
    }

#line 903 "root_numpy/src/tree.pyx"
  }

#line 903 "root_numpy/src/tree.pyx"
  if (!__pyx_t_8) {

#line 903 "root_numpy/src/tree.pyx"
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 903 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 903 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 903 "root_numpy/src/tree.pyx"
  } else {

#line 903 "root_numpy/src/tree.pyx"
    __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 903 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_14);

#line 903 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_8); __Pyx_GIVEREF(__pyx_t_8); __pyx_t_8 = NULL;

#line 903 "root_numpy/src/tree.pyx"
    PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_t_1);

#line 903 "root_numpy/src/tree.pyx"
    __Pyx_GIVEREF(__pyx_t_1);

#line 903 "root_numpy/src/tree.pyx"
    __pyx_t_1 = 0;

#line 903 "root_numpy/src/tree.pyx"
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_14, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 902; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 903 "root_numpy/src/tree.pyx"
    __Pyx_GOTREF(__pyx_t_7);

#line 903 "root_numpy/src/tree.pyx"
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

#line 903 "root_numpy/src/tree.pyx"
  }

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 903 "root_numpy/src/tree.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_cleanup, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 903; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 903 "root_numpy/src/tree.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":10
 *     return np.PyArray_SimpleNewFromData(1, &dims, dtype, data)
 * 
 * def array_d(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayD* _arr = <TArrayD*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 */

#line 10 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_17array_d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 10 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_d, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":14
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_DOUBLE)
 * 
 * def array_f(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayF* _arr = <TArrayF*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 */

#line 14 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_19array_f, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 14 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_f, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":18
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_FLOAT32)
 * 
 * def array_l(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayL* _arr = <TArrayL*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 */

#line 18 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_21array_l, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 18 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 18 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_l, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 18 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":22
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_LONG)
 * 
 * def array_i(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayI* _arr = <TArrayI*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 */

#line 22 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_23array_i, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 22 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_i, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 22 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":26
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_INT)
 * 
 * def array_s(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayS* _arr = <TArrayS*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 */

#line 26 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_25array_s, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 26 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_s, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/array.pyx":30
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_SHORT)
 * 
 * def array_c(root_arr):             # <<<<<<<<<<<<<<
 *     cdef TArrayC* _arr = <TArrayC*> PyCObject_AsVoidPtr(root_arr)
 *     return tonumpyarray(_arr.GetArray(), _arr.GetSize(), np.NPY_BYTE)
 */

#line 30 "root_numpy/src/array.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_27array_c, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/array.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 30 "root_numpy/src/array.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_c, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/src/array.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/matrix.pyx":5
 * """
 * 
 * def matrix_d(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixDBase* _mat = <TMatrixDBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.double_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.double)
 */

#line 5 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_29matrix_d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 5 "root_numpy/src/matrix.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matrix_d, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/matrix.pyx":15
 *     return np.matrix(arr)
 * 
 * def matrix_f(root_mat):             # <<<<<<<<<<<<<<
 *     cdef TMatrixFBase* _mat = <TMatrixFBase*> PyCObject_AsVoidPtr(root_mat)
 *     cdef np.ndarray[np.float32_t, ndim=2] arr = np.empty((_mat.GetNrows(), _mat.GetNcols()), dtype=np.float32)
 */

#line 15 "root_numpy/src/matrix.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_31matrix_f, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 15 "root_numpy/src/matrix.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_matrix_f, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "root_numpy/src/matrix.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":5
 * """
 * 
 * def sample_f1(f1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF1* f1_ = <TF1*> PyCObject_AsVoidPtr(f1)
 *     cdef unsigned int i
 */

#line 5 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_33sample_f1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 5 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_f1, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":14
 * 
 * 
 * def sample_h1(h1, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH1* h1_ = <TH1*> PyCObject_AsVoidPtr(h1)
 *     cdef unsigned int i
 */

#line 14 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_35sample_h1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 14 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_h1, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 14 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":23
 * 
 * 
 * def sample_f2(f2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF2* f2_ = <TF2*> PyCObject_AsVoidPtr(f2)
 *     cdef unsigned int i
 */

#line 23 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_37sample_f2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 23 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_f2, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":36
 * 
 * 
 * def sample_h2(h2, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH2* h2_ = <TH2*> PyCObject_AsVoidPtr(h2)
 *     cdef unsigned int i
 */

#line 36 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_39sample_h2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 36 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_h2, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":49
 * 
 * 
 * def sample_f3(f3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TF3* f3_ = <TF3*> PyCObject_AsVoidPtr(f3)
 *     cdef unsigned int i
 */

#line 49 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_41sample_f3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 49 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_f3, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 49 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/sample.pyx":64
 * 
 * 
 * def sample_h3(h3, unsigned int n_samples):             # <<<<<<<<<<<<<<
 *     cdef TH3* h3_ = <TH3*> PyCObject_AsVoidPtr(h3)
 *     cdef unsigned int i
 */

#line 64 "root_numpy/src/sample.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_43sample_h3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 64 "root_numpy/src/sample.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sample_h3, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "root_numpy/src/sample.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":1
 * def fill_h1(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=1] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 1 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_45fill_h1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 1 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_h1, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":26
 *         return idx
 * 
 * def fill_h2(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 26 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_47fill_h2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 26 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_h2, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 26 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":51
 *         return idx
 * 
 * def fill_h3(hist,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 51 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_49fill_h3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 51 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_h3, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 51 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":76
 *         return idx
 * 
 * def fill_p1(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 76 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_51fill_p1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 76 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_p1, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 76 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":101
 *         return idx
 * 
 * def fill_p2(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 101 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_53fill_p2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 101 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_p2, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 101 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/hist.pyx":126
 *         return idx
 * 
 * def fill_p3(profile,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array,
 *             np.ndarray[np.double_t, ndim=1] weights=None,
 */

#line 126 "root_numpy/src/hist.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_55fill_p3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 126 "root_numpy/src/hist.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_p3, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 126 "root_numpy/src/hist.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/graph.pyx":1
 * def fill_g1(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 1 "root_numpy/src/graph.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_57fill_g1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 1 "root_numpy/src/graph.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_g1, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/graph.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/graph.pyx":11
 *         _graph.SetPoint(i, array[i, 0], array[i, 1])
 * 
 * def fill_g2(graph,             # <<<<<<<<<<<<<<
 *             np.ndarray[np.double_t, ndim=2] array):
 *     # perform type checking on python side
 */

#line 11 "root_numpy/src/graph.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_59fill_g2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 11 "root_numpy/src/graph.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fill_g2, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/src/graph.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":1
 * def evaluate_h1(hist, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH1* _hist = <TH1*> PyCObject_AsVoidPtr(hist)
 */

#line 1 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_61evaluate_h1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 1 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_h1, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":12
 * 
 * 
 * def evaluate_h2(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH2* _hist = <TH2*> PyCObject_AsVoidPtr(hist)
 */

#line 12 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_63evaluate_h2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 12 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_h2, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":23
 * 
 * 
 * def evaluate_h3(hist, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TH3* _hist = <TH3*> PyCObject_AsVoidPtr(hist)
 */

#line 23 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_65evaluate_h3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 23 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_h3, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 23 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":34
 * 
 * 
 * def evaluate_f1(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF1* _func = <TF1*> PyCObject_AsVoidPtr(func)
 */

#line 34 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_67evaluate_f1, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 34 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_f1, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 34 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":45
 * 
 * 
 * def evaluate_f2(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF2* _func = <TF2*> PyCObject_AsVoidPtr(func)
 */

#line 45 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_69evaluate_f2, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 45 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_f2, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":56
 * 
 * 
 * def evaluate_f3(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TF3* _func = <TF3*> PyCObject_AsVoidPtr(func)
 */

#line 56 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_71evaluate_f3, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 56 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_f3, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 56 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":67
 * 
 * 
 * def evaluate_formula_1d(func, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 67 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_73evaluate_formula_1d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 67 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_formula_1d, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 67 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":78
 * 
 * 
 * def evaluate_formula_2d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 78 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_75evaluate_formula_2d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 78 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_formula_2d, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 78 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":89
 * 
 * 
 * def evaluate_formula_3d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 89 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_77evaluate_formula_3d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 89 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_formula_3d, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 89 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":100
 * 
 * 
 * def evaluate_formula_4d(func, np.ndarray[np.double_t, ndim=2] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TFormula* _func = <TFormula*> PyCObject_AsVoidPtr(func)
 */

#line 100 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_79evaluate_formula_4d, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 100 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_formula_4d, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 100 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":111
 * 
 * 
 * def evaluate_graph(graph, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TGraph* _graph = <TGraph*> PyCObject_AsVoidPtr(graph)
 */

#line 111 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_81evaluate_graph, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 111 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_graph, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 111 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/evaluate.pyx":122
 * 
 * 
 * def evaluate_spline(spline, np.ndarray[np.double_t, ndim=1] array):             # <<<<<<<<<<<<<<
 *     # perform type checking on python side
 *     cdef TSpline* _spline = <TSpline*> PyCObject_AsVoidPtr(spline)
 */

#line 122 "root_numpy/src/evaluate.pyx"
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_13_librootnumpy_83evaluate_spline, NULL, __pyx_n_s_librootnumpy); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 122 "root_numpy/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_spline, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 122 "root_numpy/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/innerjoin.pyx":1
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * 
 */

#line 1 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 1 "root_numpy/src/innerjoin.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "root_numpy/src/innerjoin.pyx":142
 * 
 * 
 * cdef _scalar_fk_inner_join(np.ndarray data, right, np.ndarray fk,             # <<<<<<<<<<<<<<
 *                            fk_name, new_dtype,
 *                            repeat_columns, stretch_columns,
 */

#line 142 "root_numpy/src/innerjoin.pyx"
  __pyx_t_7 = PyDict_New(); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_GOTREF(__pyx_t_7);

#line 142 "root_numpy/src/innerjoin.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[13]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 142 "root_numpy/src/innerjoin.pyx"
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

#line 55 "string.to_py"


#line 55 "string.to_py"
  /*--- Wrapped vars code ---*/

#line 55 "string.to_py"


#line 55 "string.to_py"
  goto __pyx_L0;

#line 55 "string.to_py"
  __pyx_L1_error:;

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_5);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_7);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_8);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_9);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_13);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_14);

#line 55 "string.to_py"
  __Pyx_XDECREF(__pyx_t_15);

#line 55 "string.to_py"
  if (__pyx_m) {

#line 55 "string.to_py"
    if (__pyx_d) {

#line 55 "string.to_py"
      __Pyx_AddTraceback("init _librootnumpy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 55 "string.to_py"
    }

#line 55 "string.to_py"
    Py_DECREF(__pyx_m); __pyx_m = 0;

#line 55 "string.to_py"
  } else if (!PyErr_Occurred()) {

#line 55 "string.to_py"
    PyErr_SetString(PyExc_ImportError, "init _librootnumpy");

#line 55 "string.to_py"
  }

#line 55 "string.to_py"
  __pyx_L0:;

#line 55 "string.to_py"
  __Pyx_RefNannyFinishContext();

#line 55 "string.to_py"
  #if PY_MAJOR_VERSION < 3

#line 55 "string.to_py"
  return;

#line 55 "string.to_py"
  #else

#line 55 "string.to_py"
  return __pyx_m;

#line 55 "string.to_py"
  #endif

#line 55 "string.to_py"
}

#line 1 "cython_utility"

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_PyObject_CallMethod1((PyObject*)&PyDict_Type, __pyx_n_s_keys, d);
    else
        return PyDict_Keys(d);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

#if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return -1;
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
#else
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
#endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static void __Pyx_RaiseBufferFallbackError(void) {
  PyErr_SetString(PyExc_ValueError,
     "Buffer acquisition failed on assignment; and then reacquiring the old buffer failed too!");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) { __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


            static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_long(unsigned long value) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_As_unsigned_long(PyObject *x) {
    const unsigned long neg_one = (unsigned long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(unsigned long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(unsigned long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(unsigned long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned long) -1;
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long) -1;
        val = __Pyx_PyInt_As_unsigned_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned long");
    return (unsigned long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned long");
    return (unsigned long) -1;
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
