/* Generated by Cython 0.21.2 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21_2"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE___libtmvanumpy
#define __PYX_HAVE_API___libtmvanumpy
#include "string.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "pythread.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>
#include <map>
#include <string>
#include "2to3.h"
#include "TMVA/Types.h"
#include "TMVA/Event.h"
#include "TMVA/Factory.h"
#include "TMVA/MethodBase.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "ascii"
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "factory.pyx",
  "evaluate.pyx",
  "array.pxd",
  "__init__.pxd",
  "stringsource",
  "_libtmvanumpy.pyx",
  "type.pxd",
  "bool.pxd",
  "complex.pxd",
  "setup.pxi",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */

#line 723 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */

#line 724 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */

#line 725 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */

#line 726 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */

#line 730 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */

#line 731 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */

#line 732 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */

#line 733 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */

#line 737 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */

#line 738 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */

#line 747 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_long __pyx_t_5numpy_int_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */

#line 748 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */

#line 749 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */

#line 751 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */

#line 752 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */

#line 753 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */

#line 755 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */

#line 756 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */

#line 758 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */

#line 759 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */

#line 760 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;

/* "root_numpy/tmva/src/setup.pxi":27
 * from libc.stdlib cimport malloc, free, realloc
 * 
 * ctypedef unsigned char unsigned_char             # <<<<<<<<<<<<<<
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int
 */

#line 27 "root_numpy/tmva/src/setup.pxi"
typedef unsigned char __pyx_t_13_libtmvanumpy_unsigned_char;

/* "root_numpy/tmva/src/setup.pxi":28
 * 
 * ctypedef unsigned char unsigned_char
 * ctypedef unsigned short unsigned_short             # <<<<<<<<<<<<<<
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long
 */

#line 28 "root_numpy/tmva/src/setup.pxi"
typedef unsigned short __pyx_t_13_libtmvanumpy_unsigned_short;

/* "root_numpy/tmva/src/setup.pxi":29
 * ctypedef unsigned char unsigned_char
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int             # <<<<<<<<<<<<<<
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long
 */

#line 29 "root_numpy/tmva/src/setup.pxi"
typedef unsigned int __pyx_t_13_libtmvanumpy_unsigned_int;

/* "root_numpy/tmva/src/setup.pxi":30
 * ctypedef unsigned short unsigned_short
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long             # <<<<<<<<<<<<<<
 * ctypedef long long long_long
 * ctypedef unsigned long long unsigned_long_long
 */

#line 30 "root_numpy/tmva/src/setup.pxi"
typedef unsigned long __pyx_t_13_libtmvanumpy_unsigned_long;

/* "root_numpy/tmva/src/setup.pxi":31
 * ctypedef unsigned int unsigned_int
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long             # <<<<<<<<<<<<<<
 * ctypedef unsigned long long unsigned_long_long
 * 
 */

#line 31 "root_numpy/tmva/src/setup.pxi"
typedef PY_LONG_LONG __pyx_t_13_libtmvanumpy_long_long;

/* "root_numpy/tmva/src/setup.pxi":32
 * ctypedef unsigned long unsigned_long
 * ctypedef long long long_long
 * ctypedef unsigned long long unsigned_long_long             # <<<<<<<<<<<<<<
 * 
 * include "TMVA.pxi"
 */

#line 32 "root_numpy/tmva/src/setup.pxi"
typedef unsigned PY_LONG_LONG __pyx_t_13_libtmvanumpy_unsigned_long_long;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */

#line 762 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */

#line 763 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */

#line 764 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */

#line 766 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
typedef npy_cdouble __pyx_t_5numpy_complex_t;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

#define __Pyx_BufPtrStrided1d(type, buf, i0, s0) (type)((char*)buf + i0 * s0)
#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
#if PY_MAJOR_VERSION >= 3
    char *formats;
#endif
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
        short *as_shorts;
        unsigned short *as_ushorts;
        Py_UNICODE *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
#if PY_MAJOR_VERSION >= 3
        int ob_exports;
#endif
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    op->ob_size = size;
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->ob_size) {
        self->ob_size = n;
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= self->allocated) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    self->ob_size = n;
    self->allocated = newsize;
    return 0;
}
#endif

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name);

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'cpython.version' */

/* Module declarations from 'cpython.exc' */

/* Module declarations from 'cpython.module' */

/* Module declarations from 'cpython.mem' */

/* Module declarations from 'cpython.tuple' */

/* Module declarations from 'cpython.list' */

/* Module declarations from 'cpython.sequence' */

/* Module declarations from 'cpython.mapping' */

/* Module declarations from 'cpython.iterator' */

/* Module declarations from 'cpython.number' */

/* Module declarations from 'cpython.int' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.bool' */
static PyTypeObject *__pyx_ptype_7cpython_4bool_bool = 0;

/* Module declarations from 'cpython.long' */

/* Module declarations from 'cpython.float' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.complex' */
static PyTypeObject *__pyx_ptype_7cpython_7complex_complex = 0;

/* Module declarations from 'cpython.string' */

/* Module declarations from 'cpython.unicode' */

/* Module declarations from 'cpython.dict' */

/* Module declarations from 'cpython.instance' */

/* Module declarations from 'cpython.function' */

/* Module declarations from 'cpython.method' */

/* Module declarations from 'cpython.weakref' */

/* Module declarations from 'cpython.getargs' */

/* Module declarations from 'cpython.pythread' */

/* Module declarations from 'cpython.pystate' */

/* Module declarations from 'cpython.cobject' */

/* Module declarations from 'cpython.oldbuffer' */

/* Module declarations from 'cpython.set' */

/* Module declarations from 'cpython.bytes' */

/* Module declarations from 'cpython.pycapsule' */

/* Module declarations from 'cpython' */

/* Module declarations from 'array' */

/* Module declarations from 'cpython.array' */
static PyTypeObject *__pyx_ptype_7cpython_5array_array = 0;
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from 'cython' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.cast' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.map' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from '_libtmvanumpy' */
static std::string __pyx_convert_string_from_py_std__string(PyObject *); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int_t = { "int_t", NULL, sizeof(__pyx_t_5numpy_int_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int_t), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t = { "float32_t", NULL, sizeof(__pyx_t_5numpy_float32_t), { 0 }, 0, 'R', 0, 0 };
#define __Pyx_MODULE_NAME "_libtmvanumpy"
int __pyx_module_is_main__libtmvanumpy = 0;

/* Implementation of '_libtmvanumpy' */
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_pf_13_libtmvanumpy_factory_add_events_twoclass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_factory, PyArrayObject *__pyx_v_events, PyArrayObject *__pyx_v_labels, int __pyx_v_signal_label, PyArrayObject *__pyx_v_weights, bool __pyx_v_test); /* proto */
static PyObject *__pyx_pf_13_libtmvanumpy_2factory_add_events_multiclass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_factory, PyArrayObject *__pyx_v_events, PyArrayObject *__pyx_v_labels, PyArrayObject *__pyx_v_weights, bool __pyx_v_test); /* proto */
static PyObject *__pyx_pf_13_libtmvanumpy_4factory_add_events_regression(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_factory, PyArrayObject *__pyx_v_events, PyArrayObject *__pyx_v_target, PyArrayObject *__pyx_v_weights, bool __pyx_v_test); /* proto */
static PyObject *__pyx_pf_13_libtmvanumpy_6evaluate_twoclass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_method, PyArrayObject *__pyx_v_events); /* proto */
static PyObject *__pyx_pf_13_libtmvanumpy_8evaluate_multiclass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_method, PyArrayObject *__pyx_v_events, unsigned int __pyx_v_n_classes); /* proto */
static PyObject *__pyx_pf_13_libtmvanumpy_10evaluate_regression(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_method, PyArrayObject *__pyx_v_events, unsigned int __pyx_v_n_targets); /* proto */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static char __pyx_k_B[] = "B";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_j[] = "j";
static char __pyx_k_l[] = "l";
static char __pyx_k_q[] = "q";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k_np[] = "np";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_size[] = "size";
static char __pyx_k_test[] = "test";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_empty[] = "empty";
static char __pyx_k_event[] = "event";
static char __pyx_k_label[] = "label";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_range[] = "range";
static char __pyx_k_Signal[] = "Signal";
static char __pyx_k_double[] = "double";
static char __pyx_k_events[] = "events";
static char __pyx_k_format[] = "format";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_labels[] = "labels";
static char __pyx_k_method[] = "method";
static char __pyx_k_output[] = "output";
static char __pyx_k_target[] = "target";
static char __pyx_k_test_2[] = "__test__";
static char __pyx_k_weight[] = "weight";
static char __pyx_k_factory[] = "factory";
static char __pyx_k_float32[] = "float32";
static char __pyx_k_weights[] = "weights";
static char __pyx_k_features[] = "features";
static char __pyx_k_method_2[] = "_method";
static char __pyx_k_treetype[] = "treetype";
static char __pyx_k_factory_2[] = "_factory";
static char __pyx_k_n_classes[] = "n_classes";
static char __pyx_k_n_targets[] = "n_targets";
static char __pyx_k_Background[] = "Background";
static char __pyx_k_Class__0_d[] = "Class_{0:d}";
static char __pyx_k_Regression[] = "Regression";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_n_features[] = "n_features";
static char __pyx_k_MemoryError[] = "MemoryError";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_libtmvanumpy[] = "_libtmvanumpy";
static char __pyx_k_signal_label[] = "signal_label";
static char __pyx_k_evaluate_twoclass[] = "evaluate_twoclass";
static char __pyx_k_evaluate_multiclass[] = "evaluate_multiclass";
static char __pyx_k_evaluate_regression[] = "evaluate_regression";
static char __pyx_k_factory_add_events_twoclass[] = "factory_add_events_twoclass";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_factory_add_events_multiclass[] = "factory_add_events_multiclass";
static char __pyx_k_factory_add_events_regression[] = "factory_add_events_regression";
static char __pyx_k_home_endw_workspace_root_numpy[] = "/home/endw/workspace/root_numpy/root_numpy/tmva/src/factory.pyx";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_home_endw_workspace_root_numpy_2[] = "/home/endw/workspace/root_numpy/root_numpy/tmva/src/evaluate.pyx";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static PyObject *__pyx_n_b_Background;
static PyObject *__pyx_kp_s_Class__0_d;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_MemoryError;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_b_Regression;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_b_Signal;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_n_s_evaluate_multiclass;
static PyObject *__pyx_n_s_evaluate_regression;
static PyObject *__pyx_n_s_evaluate_twoclass;
static PyObject *__pyx_n_s_event;
static PyObject *__pyx_n_s_events;
static PyObject *__pyx_n_s_factory;
static PyObject *__pyx_n_s_factory_2;
static PyObject *__pyx_n_s_factory_add_events_multiclass;
static PyObject *__pyx_n_s_factory_add_events_regression;
static PyObject *__pyx_n_s_factory_add_events_twoclass;
static PyObject *__pyx_n_s_features;
static PyObject *__pyx_n_s_float32;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy;
static PyObject *__pyx_kp_s_home_endw_workspace_root_numpy_2;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_labels;
static PyObject *__pyx_n_s_libtmvanumpy;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_method;
static PyObject *__pyx_n_s_method_2;
static PyObject *__pyx_n_s_n_classes;
static PyObject *__pyx_n_s_n_features;
static PyObject *__pyx_n_s_n_targets;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_output;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_signal_label;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_target;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_test_2;
static PyObject *__pyx_n_s_treetype;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_weight;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_codeobj__10;
static PyObject *__pyx_codeobj__12;
static PyObject *__pyx_codeobj__14;
static PyObject *__pyx_codeobj__16;
static PyObject *__pyx_codeobj__18;

/* "root_numpy/tmva/src/factory.pyx":4
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_twoclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 4 "root_numpy/tmva/src/factory.pyx"


#line 4 "root_numpy/tmva/src/factory.pyx"
/* Python wrapper */

#line 4 "root_numpy/tmva/src/factory.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_1factory_add_events_twoclass(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_libtmvanumpy_1factory_add_events_twoclass = 
#line 4 "root_numpy/tmva/src/factory.pyx"
{"factory_add_events_twoclass", (PyCFunction)__pyx_pw_13_libtmvanumpy_1factory_add_events_twoclass, METH_VARARGS|METH_KEYWORDS, 0};

#line 4 "root_numpy/tmva/src/factory.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_1factory_add_events_twoclass(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_factory = 0
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  PyArrayObject *__pyx_v_events = 0
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  PyArrayObject *__pyx_v_labels = 0
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  int __pyx_v_signal_label
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  bool __pyx_v_test
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 4 "root_numpy/tmva/src/factory.pyx"
  PyObject *__pyx_r = 0;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyDeclarations

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannySetupContext("factory_add_events_twoclass (wrapper)", 0);

#line 4 "root_numpy/tmva/src/factory.pyx"
  {

#line 4 "root_numpy/tmva/src/factory.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_factory,&__pyx_n_s_events,&__pyx_n_s_labels,&__pyx_n_s_signal_label,&__pyx_n_s_weights,&__pyx_n_s_test,0};

#line 4 "root_numpy/tmva/src/factory.pyx"
    PyObject* values[6] = {0,0,0,0,0,0};

    /* "root_numpy/tmva/src/factory.pyx":9
 *         np.ndarray[np.int_t, ndim=1] labels,
 *         int signal_label,
 *         np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *         bool test=False):
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 */

#line 9 "root_numpy/tmva/src/factory.pyx"
    values[4] = (PyObject *)((PyArrayObject *)Py_None);

#line 9 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__pyx_kwds)) {

#line 9 "root_numpy/tmva/src/factory.pyx"
      Py_ssize_t kw_args;

#line 9 "root_numpy/tmva/src/factory.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 9 "root_numpy/tmva/src/factory.pyx"
      switch (pos_args) {
        case  6: 
#line 9 "root_numpy/tmva/src/factory.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 9 "root_numpy/tmva/src/factory.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 9 "root_numpy/tmva/src/factory.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 9 "root_numpy/tmva/src/factory.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 9 "root_numpy/tmva/src/factory.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 9 "root_numpy/tmva/src/factory.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 9 "root_numpy/tmva/src/factory.pyx"
        case  0: break;
        default: 
#line 9 "root_numpy/tmva/src/factory.pyx"
goto __pyx_L5_argtuple_error;

#line 9 "root_numpy/tmva/src/factory.pyx"
      }

#line 9 "root_numpy/tmva/src/factory.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 9 "root_numpy/tmva/src/factory.pyx"
      switch (pos_args) {

#line 9 "root_numpy/tmva/src/factory.pyx"
        case  0:

#line 9 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_factory)) != 0)) kw_args--;
        else 
#line 9 "root_numpy/tmva/src/factory.pyx"
goto __pyx_L5_argtuple_error;

#line 9 "root_numpy/tmva/src/factory.pyx"
        case  1:

#line 9 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_events)) != 0)) kw_args--;

#line 9 "root_numpy/tmva/src/factory.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("factory_add_events_twoclass", 0, 4, 6, 1); 
#line 9 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 9 "root_numpy/tmva/src/factory.pyx"
        }

#line 9 "root_numpy/tmva/src/factory.pyx"
        case  2:

#line 9 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_labels)) != 0)) kw_args--;

#line 9 "root_numpy/tmva/src/factory.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("factory_add_events_twoclass", 0, 4, 6, 2); 
#line 9 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 9 "root_numpy/tmva/src/factory.pyx"
        }

#line 9 "root_numpy/tmva/src/factory.pyx"
        case  3:

#line 9 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[3] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_signal_label)) != 0)) kw_args--;

#line 9 "root_numpy/tmva/src/factory.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("factory_add_events_twoclass", 0, 4, 6, 3); 
#line 9 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 9 "root_numpy/tmva/src/factory.pyx"
        }

#line 9 "root_numpy/tmva/src/factory.pyx"
        case  4:

#line 9 "root_numpy/tmva/src/factory.pyx"
        if (kw_args > 0) {

#line 9 "root_numpy/tmva/src/factory.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 9 "root_numpy/tmva/src/factory.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 9 "root_numpy/tmva/src/factory.pyx"
        }

#line 9 "root_numpy/tmva/src/factory.pyx"
        case  5:

#line 9 "root_numpy/tmva/src/factory.pyx"
        if (kw_args > 0) {

#line 9 "root_numpy/tmva/src/factory.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_test);

#line 9 "root_numpy/tmva/src/factory.pyx"
          if (value) { values[5] = value; kw_args--; }

#line 9 "root_numpy/tmva/src/factory.pyx"
        }

#line 9 "root_numpy/tmva/src/factory.pyx"
      }

#line 9 "root_numpy/tmva/src/factory.pyx"
      if (unlikely(kw_args > 0)) {

#line 9 "root_numpy/tmva/src/factory.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "factory_add_events_twoclass") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 9 "root_numpy/tmva/src/factory.pyx"
      }

#line 9 "root_numpy/tmva/src/factory.pyx"
    } else {

#line 9 "root_numpy/tmva/src/factory.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: 
#line 9 "root_numpy/tmva/src/factory.pyx"
values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: 
#line 9 "root_numpy/tmva/src/factory.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 9 "root_numpy/tmva/src/factory.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);

#line 9 "root_numpy/tmva/src/factory.pyx"
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 9 "root_numpy/tmva/src/factory.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 9 "root_numpy/tmva/src/factory.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 9 "root_numpy/tmva/src/factory.pyx"
        break;
        default: 
#line 9 "root_numpy/tmva/src/factory.pyx"
goto __pyx_L5_argtuple_error;

#line 9 "root_numpy/tmva/src/factory.pyx"
      }

#line 9 "root_numpy/tmva/src/factory.pyx"
    }

#line 9 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_factory = values[0];

#line 9 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_events = ((PyArrayObject *)values[1]);

#line 9 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_labels = ((PyArrayObject *)values[2]);

#line 9 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_signal_label = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_signal_label == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 9 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[4]);

#line 9 "root_numpy/tmva/src/factory.pyx"
    if (values[5]) {

#line 9 "root_numpy/tmva/src/factory.pyx"
      __pyx_v_test = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_test == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 9 "root_numpy/tmva/src/factory.pyx"
    } else {

      /* "root_numpy/tmva/src/factory.pyx":10
 *         int signal_label,
 *         np.ndarray[np.double_t, ndim=1] weights=None,
 *         bool test=False):             # <<<<<<<<<<<<<<
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 *     cdef long size = events.shape[0]
 */

#line 10 "root_numpy/tmva/src/factory.pyx"
      __pyx_v_test = ((bool)0);

#line 10 "root_numpy/tmva/src/factory.pyx"
    }

#line 10 "root_numpy/tmva/src/factory.pyx"
  }

#line 10 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 10 "root_numpy/tmva/src/factory.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("factory_add_events_twoclass", 0, 4, 6, PyTuple_GET_SIZE(__pyx_args)); 
#line 10 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 10 "root_numpy/tmva/src/factory.pyx"
  __pyx_L3_error:;

#line 10 "root_numpy/tmva/src/factory.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.factory_add_events_twoclass", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 10 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyFinishContext();

#line 10 "root_numpy/tmva/src/factory.pyx"
  return NULL;

#line 10 "root_numpy/tmva/src/factory.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 10 "root_numpy/tmva/src/factory.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_events), __pyx_ptype_5numpy_ndarray, 1, "events", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/tmva/src/factory.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_labels), __pyx_ptype_5numpy_ndarray, 1, "labels", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 10 "root_numpy/tmva/src/factory.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 10 "root_numpy/tmva/src/factory.pyx"
__pyx_pf_13_libtmvanumpy_factory_add_events_twoclass(__pyx_self, __pyx_v_factory, __pyx_v_events, __pyx_v_labels, __pyx_v_signal_label, __pyx_v_weights, __pyx_v_test);

  /* "root_numpy/tmva/src/factory.pyx":4
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_twoclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 4 "root_numpy/tmva/src/factory.pyx"


#line 4 "root_numpy/tmva/src/factory.pyx"
  /* function exit code */

#line 4 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L0;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_L1_error:;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_r = NULL;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_L0:;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyFinishContext();

#line 4 "root_numpy/tmva/src/factory.pyx"
  return __pyx_r;

#line 4 "root_numpy/tmva/src/factory.pyx"
}

#line 4 "root_numpy/tmva/src/factory.pyx"


#line 4 "root_numpy/tmva/src/factory.pyx"
static PyObject *__pyx_pf_13_libtmvanumpy_factory_add_events_twoclass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_factory, PyArrayObject *__pyx_v_events, PyArrayObject *__pyx_v_labels, int __pyx_v_signal_label, PyArrayObject *__pyx_v_weights, bool __pyx_v_test) {
  TMVA::Factory *__pyx_v__factory
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_size
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_n_features
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_i
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_j
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  double __pyx_v_weight
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  int __pyx_v_label
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  std::vector<double>  *__pyx_v_event
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  TMVA::Types::ETreeType __pyx_v_treetype
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_events
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_events
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_labels
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_labels
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 4 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 4 "root_numpy/tmva/src/factory.pyx"
;

#line 4 "root_numpy/tmva/src/factory.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  std::vector<double>  *__pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  std::string __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannySetupContext("factory_add_events_twoclass", 0);

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_events.pybuffer.buf = NULL;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_events.refcount = 0;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_events.data = NULL;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_events.rcbuffer = &__pyx_pybuffer_events;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_labels.pybuffer.buf = NULL;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_labels.refcount = 0;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_labels.data = NULL;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_labels.rcbuffer = &__pyx_pybuffer_labels;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 4 "root_numpy/tmva/src/factory.pyx"
  {

#line 4 "root_numpy/tmva/src/factory.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 4 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_events.rcbuffer->pybuffer, (PyObject*)__pyx_v_events, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/factory.pyx"
  }

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_events.diminfo[0].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_events.diminfo[0].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_events.diminfo[1].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_events.diminfo[1].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[1];

#line 4 "root_numpy/tmva/src/factory.pyx"
  {

#line 4 "root_numpy/tmva/src/factory.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 4 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_labels.rcbuffer->pybuffer, (PyObject*)__pyx_v_labels, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/factory.pyx"
  }

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_labels.diminfo[0].strides = __pyx_pybuffernd_labels.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_labels.diminfo[0].shape = __pyx_pybuffernd_labels.rcbuffer->pybuffer.shape[0];

#line 4 "root_numpy/tmva/src/factory.pyx"
  {

#line 4 "root_numpy/tmva/src/factory.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 4 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/factory.pyx"
  }

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/tmva/src/factory.pyx":11
 *         np.ndarray[np.double_t, ndim=1] weights=None,
 *         bool test=False):
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)             # <<<<<<<<<<<<<<
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]
 */

#line 11 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_factory); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 11 "root_numpy/tmva/src/factory.pyx"
  __pyx_v__factory = ((TMVA::Factory *)__pyx_t_1);

  /* "root_numpy/tmva/src/factory.pyx":12
 *         bool test=False):
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 *     cdef long size = events.shape[0]             # <<<<<<<<<<<<<<
 *     cdef long n_features = events.shape[1]
 *     cdef long i, j
 */

#line 12 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_size = (__pyx_v_events->dimensions[0]);

  /* "root_numpy/tmva/src/factory.pyx":13
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]             # <<<<<<<<<<<<<<
 *     cdef long i, j
 *     cdef double weight = 1.
 */

#line 13 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_n_features = (__pyx_v_events->dimensions[1]);

  /* "root_numpy/tmva/src/factory.pyx":15
 *     cdef long n_features = events.shape[1]
 *     cdef long i, j
 *     cdef double weight = 1.             # <<<<<<<<<<<<<<
 *     cdef int label
 *     cdef vector[double]* event = new vector[double](n_features)
 */

#line 15 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_weight = 1.;

  /* "root_numpy/tmva/src/factory.pyx":17
 *     cdef double weight = 1.
 *     cdef int label
 *     cdef vector[double]* event = new vector[double](n_features)             # <<<<<<<<<<<<<<
 *     cdef ETreeType treetype = kTraining
 *     if test:
 */

#line 17 "root_numpy/tmva/src/factory.pyx"
  try {

#line 17 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_2 = new std::vector<double> (__pyx_v_n_features);

#line 17 "root_numpy/tmva/src/factory.pyx"
  } catch(...) {

#line 17 "root_numpy/tmva/src/factory.pyx"
    __Pyx_CppExn2PyErr();

#line 17 "root_numpy/tmva/src/factory.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 17 "root_numpy/tmva/src/factory.pyx"
  }

#line 17 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_event = __pyx_t_2;

  /* "root_numpy/tmva/src/factory.pyx":18
 *     cdef int label
 *     cdef vector[double]* event = new vector[double](n_features)
 *     cdef ETreeType treetype = kTraining             # <<<<<<<<<<<<<<
 *     if test:
 *         treetype = kTesting
 */

#line 18 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_treetype = TMVA::Types::kTraining;

  /* "root_numpy/tmva/src/factory.pyx":19
 *     cdef vector[double]* event = new vector[double](n_features)
 *     cdef ETreeType treetype = kTraining
 *     if test:             # <<<<<<<<<<<<<<
 *         treetype = kTesting
 *     for i from 0 <= i < size:
 */

#line 19 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_3 = (__pyx_v_test != 0);

#line 19 "root_numpy/tmva/src/factory.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/tmva/src/factory.pyx":20
 *     cdef ETreeType treetype = kTraining
 *     if test:
 *         treetype = kTesting             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         label = labels[i]
 */

#line 20 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_treetype = TMVA::Types::kTesting;

#line 20 "root_numpy/tmva/src/factory.pyx"
    goto __pyx_L3;

#line 20 "root_numpy/tmva/src/factory.pyx"
  }

#line 20 "root_numpy/tmva/src/factory.pyx"
  __pyx_L3:;

  /* "root_numpy/tmva/src/factory.pyx":21
 *     if test:
 *         treetype = kTesting
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         label = labels[i]
 *         if weights is not None:
 */

#line 21 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_4 = __pyx_v_size;

#line 21 "root_numpy/tmva/src/factory.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_4; __pyx_v_i++) {

    /* "root_numpy/tmva/src/factory.pyx":22
 *         treetype = kTesting
 *     for i from 0 <= i < size:
 *         label = labels[i]             # <<<<<<<<<<<<<<
 *         if weights is not None:
 *             weight = weights[i]
 */

#line 22 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_5 = __pyx_v_i;

#line 22 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_label = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_labels.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_labels.diminfo[0].strides));

    /* "root_numpy/tmva/src/factory.pyx":23
 *     for i from 0 <= i < size:
 *         label = labels[i]
 *         if weights is not None:             # <<<<<<<<<<<<<<
 *             weight = weights[i]
 *         for j from 0 <= j < n_features:
 */

#line 23 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_3 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 23 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_6 = (__pyx_t_3 != 0);

#line 23 "root_numpy/tmva/src/factory.pyx"
    if (__pyx_t_6) {

      /* "root_numpy/tmva/src/factory.pyx":24
 *         label = labels[i]
 *         if weights is not None:
 *             weight = weights[i]             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < n_features:
 *             event[0][j] = events[i, j]
 */

#line 24 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_7 = __pyx_v_i;

#line 24 "root_numpy/tmva/src/factory.pyx"
      __pyx_v_weight = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_weights.diminfo[0].strides));

#line 24 "root_numpy/tmva/src/factory.pyx"
      goto __pyx_L6;

#line 24 "root_numpy/tmva/src/factory.pyx"
    }

#line 24 "root_numpy/tmva/src/factory.pyx"
    __pyx_L6:;

    /* "root_numpy/tmva/src/factory.pyx":25
 *         if weights is not None:
 *             weight = weights[i]
 *         for j from 0 <= j < n_features:             # <<<<<<<<<<<<<<
 *             event[0][j] = events[i, j]
 *         if label == signal_label:
 */

#line 25 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_8 = __pyx_v_n_features;

#line 25 "root_numpy/tmva/src/factory.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_8; __pyx_v_j++) {

      /* "root_numpy/tmva/src/factory.pyx":26
 *             weight = weights[i]
 *         for j from 0 <= j < n_features:
 *             event[0][j] = events[i, j]             # <<<<<<<<<<<<<<
 *         if label == signal_label:
 *             _factory.AddEvent("Signal", treetype, event[0], weight)
 */

#line 26 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_9 = __pyx_v_i;

#line 26 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_10 = __pyx_v_j;

#line 26 "root_numpy/tmva/src/factory.pyx"
      ((__pyx_v_event[0])[__pyx_v_j]) = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_events.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_events.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_events.diminfo[1].strides));

#line 26 "root_numpy/tmva/src/factory.pyx"
    }

    /* "root_numpy/tmva/src/factory.pyx":27
 *         for j from 0 <= j < n_features:
 *             event[0][j] = events[i, j]
 *         if label == signal_label:             # <<<<<<<<<<<<<<
 *             _factory.AddEvent("Signal", treetype, event[0], weight)
 *         else:
 */

#line 27 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_6 = ((__pyx_v_label == __pyx_v_signal_label) != 0);

#line 27 "root_numpy/tmva/src/factory.pyx"
    if (__pyx_t_6) {

      /* "root_numpy/tmva/src/factory.pyx":28
 *             event[0][j] = events[i, j]
 *         if label == signal_label:
 *             _factory.AddEvent("Signal", treetype, event[0], weight)             # <<<<<<<<<<<<<<
 *         else:
 *             _factory.AddEvent("Background", treetype, event[0], weight)
 */

#line 28 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_11 = __pyx_convert_string_from_py_std__string(__pyx_n_b_Signal); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 28 "root_numpy/tmva/src/factory.pyx"
      __pyx_v__factory->AddEvent(__pyx_t_11, __pyx_v_treetype, (__pyx_v_event[0]), __pyx_v_weight);

#line 28 "root_numpy/tmva/src/factory.pyx"
      goto __pyx_L9;

#line 28 "root_numpy/tmva/src/factory.pyx"
    }

#line 28 "root_numpy/tmva/src/factory.pyx"
    /*else*/ {

      /* "root_numpy/tmva/src/factory.pyx":30
 *             _factory.AddEvent("Signal", treetype, event[0], weight)
 *         else:
 *             _factory.AddEvent("Background", treetype, event[0], weight)             # <<<<<<<<<<<<<<
 *     del event
 * 
 */

#line 30 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_11 = __pyx_convert_string_from_py_std__string(__pyx_n_b_Background); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 30 "root_numpy/tmva/src/factory.pyx"
      __pyx_v__factory->AddEvent(__pyx_t_11, __pyx_v_treetype, (__pyx_v_event[0]), __pyx_v_weight);

#line 30 "root_numpy/tmva/src/factory.pyx"
    }

#line 30 "root_numpy/tmva/src/factory.pyx"
    __pyx_L9:;

#line 30 "root_numpy/tmva/src/factory.pyx"
  }

  /* "root_numpy/tmva/src/factory.pyx":31
 *         else:
 *             _factory.AddEvent("Background", treetype, event[0], weight)
 *     del event             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 31 "root_numpy/tmva/src/factory.pyx"
  delete __pyx_v_event;

  /* "root_numpy/tmva/src/factory.pyx":4
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_twoclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 4 "root_numpy/tmva/src/factory.pyx"


#line 4 "root_numpy/tmva/src/factory.pyx"
  /* function exit code */

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 4 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L0;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_L1_error:;

#line 4 "root_numpy/tmva/src/factory.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 4 "root_numpy/tmva/src/factory.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 4 "root_numpy/tmva/src/factory.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/factory.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/factory.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.factory_add_events_twoclass", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_r = NULL;

#line 4 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L2;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_L0:;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_L2:;

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyFinishContext();

#line 4 "root_numpy/tmva/src/factory.pyx"
  return __pyx_r;

#line 4 "root_numpy/tmva/src/factory.pyx"
}

/* "root_numpy/tmva/src/factory.pyx":36
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_multiclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 36 "root_numpy/tmva/src/factory.pyx"


#line 36 "root_numpy/tmva/src/factory.pyx"
/* Python wrapper */

#line 36 "root_numpy/tmva/src/factory.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_3factory_add_events_multiclass(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_libtmvanumpy_3factory_add_events_multiclass = 
#line 36 "root_numpy/tmva/src/factory.pyx"
{"factory_add_events_multiclass", (PyCFunction)__pyx_pw_13_libtmvanumpy_3factory_add_events_multiclass, METH_VARARGS|METH_KEYWORDS, 0};

#line 36 "root_numpy/tmva/src/factory.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_3factory_add_events_multiclass(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_factory = 0
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  PyArrayObject *__pyx_v_events = 0
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  PyArrayObject *__pyx_v_labels = 0
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  bool __pyx_v_test
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 36 "root_numpy/tmva/src/factory.pyx"
  PyObject *__pyx_r = 0;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyDeclarations

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannySetupContext("factory_add_events_multiclass (wrapper)", 0);

#line 36 "root_numpy/tmva/src/factory.pyx"
  {

#line 36 "root_numpy/tmva/src/factory.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_factory,&__pyx_n_s_events,&__pyx_n_s_labels,&__pyx_n_s_weights,&__pyx_n_s_test,0};

#line 36 "root_numpy/tmva/src/factory.pyx"
    PyObject* values[5] = {0,0,0,0,0};

    /* "root_numpy/tmva/src/factory.pyx":40
 *         np.ndarray[np.double_t, ndim=2] events,
 *         np.ndarray[np.int_t, ndim=1] labels,
 *         np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *         bool test=False):
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 */

#line 40 "root_numpy/tmva/src/factory.pyx"
    values[3] = (PyObject *)((PyArrayObject *)Py_None);

#line 40 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__pyx_kwds)) {

#line 40 "root_numpy/tmva/src/factory.pyx"
      Py_ssize_t kw_args;

#line 40 "root_numpy/tmva/src/factory.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 40 "root_numpy/tmva/src/factory.pyx"
      switch (pos_args) {
        case  5: 
#line 40 "root_numpy/tmva/src/factory.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 40 "root_numpy/tmva/src/factory.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 40 "root_numpy/tmva/src/factory.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 40 "root_numpy/tmva/src/factory.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 40 "root_numpy/tmva/src/factory.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 40 "root_numpy/tmva/src/factory.pyx"
        case  0: break;
        default: 
#line 40 "root_numpy/tmva/src/factory.pyx"
goto __pyx_L5_argtuple_error;

#line 40 "root_numpy/tmva/src/factory.pyx"
      }

#line 40 "root_numpy/tmva/src/factory.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 40 "root_numpy/tmva/src/factory.pyx"
      switch (pos_args) {

#line 40 "root_numpy/tmva/src/factory.pyx"
        case  0:

#line 40 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_factory)) != 0)) kw_args--;
        else 
#line 40 "root_numpy/tmva/src/factory.pyx"
goto __pyx_L5_argtuple_error;

#line 40 "root_numpy/tmva/src/factory.pyx"
        case  1:

#line 40 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_events)) != 0)) kw_args--;

#line 40 "root_numpy/tmva/src/factory.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("factory_add_events_multiclass", 0, 3, 5, 1); 
#line 40 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 40 "root_numpy/tmva/src/factory.pyx"
        }

#line 40 "root_numpy/tmva/src/factory.pyx"
        case  2:

#line 40 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_labels)) != 0)) kw_args--;

#line 40 "root_numpy/tmva/src/factory.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("factory_add_events_multiclass", 0, 3, 5, 2); 
#line 40 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 40 "root_numpy/tmva/src/factory.pyx"
        }

#line 40 "root_numpy/tmva/src/factory.pyx"
        case  3:

#line 40 "root_numpy/tmva/src/factory.pyx"
        if (kw_args > 0) {

#line 40 "root_numpy/tmva/src/factory.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 40 "root_numpy/tmva/src/factory.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 40 "root_numpy/tmva/src/factory.pyx"
        }

#line 40 "root_numpy/tmva/src/factory.pyx"
        case  4:

#line 40 "root_numpy/tmva/src/factory.pyx"
        if (kw_args > 0) {

#line 40 "root_numpy/tmva/src/factory.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_test);

#line 40 "root_numpy/tmva/src/factory.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 40 "root_numpy/tmva/src/factory.pyx"
        }

#line 40 "root_numpy/tmva/src/factory.pyx"
      }

#line 40 "root_numpy/tmva/src/factory.pyx"
      if (unlikely(kw_args > 0)) {

#line 40 "root_numpy/tmva/src/factory.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "factory_add_events_multiclass") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 40 "root_numpy/tmva/src/factory.pyx"
      }

#line 40 "root_numpy/tmva/src/factory.pyx"
    } else {

#line 40 "root_numpy/tmva/src/factory.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: 
#line 40 "root_numpy/tmva/src/factory.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 40 "root_numpy/tmva/src/factory.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 40 "root_numpy/tmva/src/factory.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 40 "root_numpy/tmva/src/factory.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 40 "root_numpy/tmva/src/factory.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 40 "root_numpy/tmva/src/factory.pyx"
        break;
        default: 
#line 40 "root_numpy/tmva/src/factory.pyx"
goto __pyx_L5_argtuple_error;

#line 40 "root_numpy/tmva/src/factory.pyx"
      }

#line 40 "root_numpy/tmva/src/factory.pyx"
    }

#line 40 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_factory = values[0];

#line 40 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_events = ((PyArrayObject *)values[1]);

#line 40 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_labels = ((PyArrayObject *)values[2]);

#line 40 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[3]);

#line 40 "root_numpy/tmva/src/factory.pyx"
    if (values[4]) {

#line 40 "root_numpy/tmva/src/factory.pyx"
      __pyx_v_test = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_test == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 40 "root_numpy/tmva/src/factory.pyx"
    } else {

      /* "root_numpy/tmva/src/factory.pyx":41
 *         np.ndarray[np.int_t, ndim=1] labels,
 *         np.ndarray[np.double_t, ndim=1] weights=None,
 *         bool test=False):             # <<<<<<<<<<<<<<
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 *     cdef long size = events.shape[0]
 */

#line 41 "root_numpy/tmva/src/factory.pyx"
      __pyx_v_test = ((bool)0);

#line 41 "root_numpy/tmva/src/factory.pyx"
    }

#line 41 "root_numpy/tmva/src/factory.pyx"
  }

#line 41 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 41 "root_numpy/tmva/src/factory.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("factory_add_events_multiclass", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 41 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 41 "root_numpy/tmva/src/factory.pyx"
  __pyx_L3_error:;

#line 41 "root_numpy/tmva/src/factory.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.factory_add_events_multiclass", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 41 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyFinishContext();

#line 41 "root_numpy/tmva/src/factory.pyx"
  return NULL;

#line 41 "root_numpy/tmva/src/factory.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 41 "root_numpy/tmva/src/factory.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_events), __pyx_ptype_5numpy_ndarray, 1, "events", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/tmva/src/factory.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_labels), __pyx_ptype_5numpy_ndarray, 1, "labels", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 41 "root_numpy/tmva/src/factory.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 41 "root_numpy/tmva/src/factory.pyx"
__pyx_pf_13_libtmvanumpy_2factory_add_events_multiclass(__pyx_self, __pyx_v_factory, __pyx_v_events, __pyx_v_labels, __pyx_v_weights, __pyx_v_test);

  /* "root_numpy/tmva/src/factory.pyx":36
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_multiclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 36 "root_numpy/tmva/src/factory.pyx"


#line 36 "root_numpy/tmva/src/factory.pyx"
  /* function exit code */

#line 36 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L0;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_L1_error:;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_r = NULL;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_L0:;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "root_numpy/tmva/src/factory.pyx"
  return __pyx_r;

#line 36 "root_numpy/tmva/src/factory.pyx"
}

#line 36 "root_numpy/tmva/src/factory.pyx"


#line 36 "root_numpy/tmva/src/factory.pyx"
static PyObject *__pyx_pf_13_libtmvanumpy_2factory_add_events_multiclass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_factory, PyArrayObject *__pyx_v_events, PyArrayObject *__pyx_v_labels, PyArrayObject *__pyx_v_weights, bool __pyx_v_test) {
  TMVA::Factory *__pyx_v__factory
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_size
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_n_features
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_i
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_j
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  double __pyx_v_weight
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  int __pyx_v_label
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  std::vector<double>  *__pyx_v_event
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  TMVA::Types::ETreeType __pyx_v_treetype
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_events
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_events
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_labels
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_labels
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 36 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 36 "root_numpy/tmva/src/factory.pyx"
;

#line 36 "root_numpy/tmva/src/factory.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  std::vector<double>  *__pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  long __pyx_t_5;
  int __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  std::string __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannySetupContext("factory_add_events_multiclass", 0);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_events.pybuffer.buf = NULL;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_events.refcount = 0;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_events.data = NULL;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_events.rcbuffer = &__pyx_pybuffer_events;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_labels.pybuffer.buf = NULL;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_labels.refcount = 0;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_labels.data = NULL;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_labels.rcbuffer = &__pyx_pybuffer_labels;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 36 "root_numpy/tmva/src/factory.pyx"
  {

#line 36 "root_numpy/tmva/src/factory.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 36 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_events.rcbuffer->pybuffer, (PyObject*)__pyx_v_events, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/tmva/src/factory.pyx"
  }

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_events.diminfo[0].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_events.diminfo[0].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_events.diminfo[1].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_events.diminfo[1].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[1];

#line 36 "root_numpy/tmva/src/factory.pyx"
  {

#line 36 "root_numpy/tmva/src/factory.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 36 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_labels.rcbuffer->pybuffer, (PyObject*)__pyx_v_labels, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/tmva/src/factory.pyx"
  }

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_labels.diminfo[0].strides = __pyx_pybuffernd_labels.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_labels.diminfo[0].shape = __pyx_pybuffernd_labels.rcbuffer->pybuffer.shape[0];

#line 36 "root_numpy/tmva/src/factory.pyx"
  {

#line 36 "root_numpy/tmva/src/factory.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 36 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/tmva/src/factory.pyx"
  }

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/tmva/src/factory.pyx":42
 *         np.ndarray[np.double_t, ndim=1] weights=None,
 *         bool test=False):
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)             # <<<<<<<<<<<<<<
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]
 */

#line 42 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_factory); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 42 "root_numpy/tmva/src/factory.pyx"
  __pyx_v__factory = ((TMVA::Factory *)__pyx_t_1);

  /* "root_numpy/tmva/src/factory.pyx":43
 *         bool test=False):
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 *     cdef long size = events.shape[0]             # <<<<<<<<<<<<<<
 *     cdef long n_features = events.shape[1]
 *     cdef long i, j
 */

#line 43 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_size = (__pyx_v_events->dimensions[0]);

  /* "root_numpy/tmva/src/factory.pyx":44
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]             # <<<<<<<<<<<<<<
 *     cdef long i, j
 *     cdef double weight = 1.
 */

#line 44 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_n_features = (__pyx_v_events->dimensions[1]);

  /* "root_numpy/tmva/src/factory.pyx":46
 *     cdef long n_features = events.shape[1]
 *     cdef long i, j
 *     cdef double weight = 1.             # <<<<<<<<<<<<<<
 *     cdef int label
 *     cdef vector[double]* event = new vector[double](n_features)
 */

#line 46 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_weight = 1.;

  /* "root_numpy/tmva/src/factory.pyx":48
 *     cdef double weight = 1.
 *     cdef int label
 *     cdef vector[double]* event = new vector[double](n_features)             # <<<<<<<<<<<<<<
 *     cdef ETreeType treetype = kTraining
 *     if test:
 */

#line 48 "root_numpy/tmva/src/factory.pyx"
  try {

#line 48 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_2 = new std::vector<double> (__pyx_v_n_features);

#line 48 "root_numpy/tmva/src/factory.pyx"
  } catch(...) {

#line 48 "root_numpy/tmva/src/factory.pyx"
    __Pyx_CppExn2PyErr();

#line 48 "root_numpy/tmva/src/factory.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 48 "root_numpy/tmva/src/factory.pyx"
  }

#line 48 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_event = __pyx_t_2;

  /* "root_numpy/tmva/src/factory.pyx":49
 *     cdef int label
 *     cdef vector[double]* event = new vector[double](n_features)
 *     cdef ETreeType treetype = kTraining             # <<<<<<<<<<<<<<
 *     if test:
 *         treetype = kTesting
 */

#line 49 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_treetype = TMVA::Types::kTraining;

  /* "root_numpy/tmva/src/factory.pyx":50
 *     cdef vector[double]* event = new vector[double](n_features)
 *     cdef ETreeType treetype = kTraining
 *     if test:             # <<<<<<<<<<<<<<
 *         treetype = kTesting
 *     for i from 0 <= i < size:
 */

#line 50 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_3 = (__pyx_v_test != 0);

#line 50 "root_numpy/tmva/src/factory.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/tmva/src/factory.pyx":51
 *     cdef ETreeType treetype = kTraining
 *     if test:
 *         treetype = kTesting             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         label = labels[i]
 */

#line 51 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_treetype = TMVA::Types::kTesting;

#line 51 "root_numpy/tmva/src/factory.pyx"
    goto __pyx_L3;

#line 51 "root_numpy/tmva/src/factory.pyx"
  }

#line 51 "root_numpy/tmva/src/factory.pyx"
  __pyx_L3:;

  /* "root_numpy/tmva/src/factory.pyx":52
 *     if test:
 *         treetype = kTesting
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         label = labels[i]
 *         if weights is not None:
 */

#line 52 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_4 = __pyx_v_size;

#line 52 "root_numpy/tmva/src/factory.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_4; __pyx_v_i++) {

    /* "root_numpy/tmva/src/factory.pyx":53
 *         treetype = kTesting
 *     for i from 0 <= i < size:
 *         label = labels[i]             # <<<<<<<<<<<<<<
 *         if weights is not None:
 *             weight = weights[i]
 */

#line 53 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_5 = __pyx_v_i;

#line 53 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_label = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_labels.rcbuffer->pybuffer.buf, __pyx_t_5, __pyx_pybuffernd_labels.diminfo[0].strides));

    /* "root_numpy/tmva/src/factory.pyx":54
 *     for i from 0 <= i < size:
 *         label = labels[i]
 *         if weights is not None:             # <<<<<<<<<<<<<<
 *             weight = weights[i]
 *         for j from 0 <= j < n_features:
 */

#line 54 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_3 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 54 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_6 = (__pyx_t_3 != 0);

#line 54 "root_numpy/tmva/src/factory.pyx"
    if (__pyx_t_6) {

      /* "root_numpy/tmva/src/factory.pyx":55
 *         label = labels[i]
 *         if weights is not None:
 *             weight = weights[i]             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < n_features:
 *             event[0][j] = events[i, j]
 */

#line 55 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_7 = __pyx_v_i;

#line 55 "root_numpy/tmva/src/factory.pyx"
      __pyx_v_weight = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_weights.diminfo[0].strides));

#line 55 "root_numpy/tmva/src/factory.pyx"
      goto __pyx_L6;

#line 55 "root_numpy/tmva/src/factory.pyx"
    }

#line 55 "root_numpy/tmva/src/factory.pyx"
    __pyx_L6:;

    /* "root_numpy/tmva/src/factory.pyx":56
 *         if weights is not None:
 *             weight = weights[i]
 *         for j from 0 <= j < n_features:             # <<<<<<<<<<<<<<
 *             event[0][j] = events[i, j]
 *         _factory.AddEvent("Class_{0:d}".format(label), treetype, event[0], weight)
 */

#line 56 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_8 = __pyx_v_n_features;

#line 56 "root_numpy/tmva/src/factory.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_8; __pyx_v_j++) {

      /* "root_numpy/tmva/src/factory.pyx":57
 *             weight = weights[i]
 *         for j from 0 <= j < n_features:
 *             event[0][j] = events[i, j]             # <<<<<<<<<<<<<<
 *         _factory.AddEvent("Class_{0:d}".format(label), treetype, event[0], weight)
 *     del event
 */

#line 57 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_9 = __pyx_v_i;

#line 57 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_10 = __pyx_v_j;

#line 57 "root_numpy/tmva/src/factory.pyx"
      ((__pyx_v_event[0])[__pyx_v_j]) = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_events.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_events.diminfo[0].strides, __pyx_t_10, __pyx_pybuffernd_events.diminfo[1].strides));

#line 57 "root_numpy/tmva/src/factory.pyx"
    }

    /* "root_numpy/tmva/src/factory.pyx":58
 *         for j from 0 <= j < n_features:
 *             event[0][j] = events[i, j]
 *         _factory.AddEvent("Class_{0:d}".format(label), treetype, event[0], weight)             # <<<<<<<<<<<<<<
 *     del event
 * 
 */

#line 58 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_kp_s_Class__0_d, __pyx_n_s_format); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/tmva/src/factory.pyx"
    __Pyx_GOTREF(__pyx_t_12);

#line 58 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_13 = __Pyx_PyInt_From_int(__pyx_v_label); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/tmva/src/factory.pyx"
    __Pyx_GOTREF(__pyx_t_13);

#line 58 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_14 = NULL;

#line 58 "root_numpy/tmva/src/factory.pyx"
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {

#line 58 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_12);

#line 58 "root_numpy/tmva/src/factory.pyx"
      if (likely(__pyx_t_14)) {

#line 58 "root_numpy/tmva/src/factory.pyx"
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);

#line 58 "root_numpy/tmva/src/factory.pyx"
        __Pyx_INCREF(__pyx_t_14);

#line 58 "root_numpy/tmva/src/factory.pyx"
        __Pyx_INCREF(function);

#line 58 "root_numpy/tmva/src/factory.pyx"
        __Pyx_DECREF_SET(__pyx_t_12, function);

#line 58 "root_numpy/tmva/src/factory.pyx"
      }

#line 58 "root_numpy/tmva/src/factory.pyx"
    }

#line 58 "root_numpy/tmva/src/factory.pyx"
    if (!__pyx_t_14) {

#line 58 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_11 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/tmva/src/factory.pyx"
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

#line 58 "root_numpy/tmva/src/factory.pyx"
      __Pyx_GOTREF(__pyx_t_11);

#line 58 "root_numpy/tmva/src/factory.pyx"
    } else {

#line 58 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_15 = PyTuple_New(1+1); if (unlikely(!__pyx_t_15)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/tmva/src/factory.pyx"
      __Pyx_GOTREF(__pyx_t_15);

#line 58 "root_numpy/tmva/src/factory.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_14); __Pyx_GIVEREF(__pyx_t_14); __pyx_t_14 = NULL;

#line 58 "root_numpy/tmva/src/factory.pyx"
      PyTuple_SET_ITEM(__pyx_t_15, 0+1, __pyx_t_13);

#line 58 "root_numpy/tmva/src/factory.pyx"
      __Pyx_GIVEREF(__pyx_t_13);

#line 58 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_13 = 0;

#line 58 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_15, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/tmva/src/factory.pyx"
      __Pyx_GOTREF(__pyx_t_11);

#line 58 "root_numpy/tmva/src/factory.pyx"
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

#line 58 "root_numpy/tmva/src/factory.pyx"
    }

#line 58 "root_numpy/tmva/src/factory.pyx"
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

#line 58 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_16 = __pyx_convert_string_from_py_std__string(__pyx_t_11); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 58 "root_numpy/tmva/src/factory.pyx"
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

#line 58 "root_numpy/tmva/src/factory.pyx"
    __pyx_v__factory->AddEvent(__pyx_t_16, __pyx_v_treetype, (__pyx_v_event[0]), __pyx_v_weight);

#line 58 "root_numpy/tmva/src/factory.pyx"
  }

  /* "root_numpy/tmva/src/factory.pyx":59
 *             event[0][j] = events[i, j]
 *         _factory.AddEvent("Class_{0:d}".format(label), treetype, event[0], weight)
 *     del event             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 59 "root_numpy/tmva/src/factory.pyx"
  delete __pyx_v_event;

  /* "root_numpy/tmva/src/factory.pyx":36
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_multiclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 36 "root_numpy/tmva/src/factory.pyx"


#line 36 "root_numpy/tmva/src/factory.pyx"
  /* function exit code */

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 36 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L0;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_L1_error:;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_XDECREF(__pyx_t_11);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_XDECREF(__pyx_t_12);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_XDECREF(__pyx_t_13);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_XDECREF(__pyx_t_14);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_XDECREF(__pyx_t_15);

#line 36 "root_numpy/tmva/src/factory.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 36 "root_numpy/tmva/src/factory.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 36 "root_numpy/tmva/src/factory.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 36 "root_numpy/tmva/src/factory.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels.rcbuffer->pybuffer);

#line 36 "root_numpy/tmva/src/factory.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.factory_add_events_multiclass", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_r = NULL;

#line 36 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L2;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_L0:;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_labels.rcbuffer->pybuffer);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_L2:;

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyFinishContext();

#line 36 "root_numpy/tmva/src/factory.pyx"
  return __pyx_r;

#line 36 "root_numpy/tmva/src/factory.pyx"
}

/* "root_numpy/tmva/src/factory.pyx":64
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_regression(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 64 "root_numpy/tmva/src/factory.pyx"


#line 64 "root_numpy/tmva/src/factory.pyx"
/* Python wrapper */

#line 64 "root_numpy/tmva/src/factory.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_5factory_add_events_regression(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_libtmvanumpy_5factory_add_events_regression = 
#line 64 "root_numpy/tmva/src/factory.pyx"
{"factory_add_events_regression", (PyCFunction)__pyx_pw_13_libtmvanumpy_5factory_add_events_regression, METH_VARARGS|METH_KEYWORDS, 0};

#line 64 "root_numpy/tmva/src/factory.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_5factory_add_events_regression(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_factory = 0
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  PyArrayObject *__pyx_v_events = 0
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  PyArrayObject *__pyx_v_target = 0
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  PyArrayObject *__pyx_v_weights = 0
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  bool __pyx_v_test
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 64 "root_numpy/tmva/src/factory.pyx"
  PyObject *__pyx_r = 0;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyDeclarations

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannySetupContext("factory_add_events_regression (wrapper)", 0);

#line 64 "root_numpy/tmva/src/factory.pyx"
  {

#line 64 "root_numpy/tmva/src/factory.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_factory,&__pyx_n_s_events,&__pyx_n_s_target,&__pyx_n_s_weights,&__pyx_n_s_test,0};

#line 64 "root_numpy/tmva/src/factory.pyx"
    PyObject* values[5] = {0,0,0,0,0};

    /* "root_numpy/tmva/src/factory.pyx":68
 *         np.ndarray[np.double_t, ndim=2] events,
 *         np.ndarray[np.double_t, ndim=1] target,
 *         np.ndarray[np.double_t, ndim=1] weights=None,             # <<<<<<<<<<<<<<
 *         bool test=False):
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 */

#line 68 "root_numpy/tmva/src/factory.pyx"
    values[3] = (PyObject *)((PyArrayObject *)Py_None);

#line 68 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__pyx_kwds)) {

#line 68 "root_numpy/tmva/src/factory.pyx"
      Py_ssize_t kw_args;

#line 68 "root_numpy/tmva/src/factory.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 68 "root_numpy/tmva/src/factory.pyx"
      switch (pos_args) {
        case  5: 
#line 68 "root_numpy/tmva/src/factory.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 68 "root_numpy/tmva/src/factory.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 68 "root_numpy/tmva/src/factory.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 68 "root_numpy/tmva/src/factory.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 68 "root_numpy/tmva/src/factory.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 68 "root_numpy/tmva/src/factory.pyx"
        case  0: break;
        default: 
#line 68 "root_numpy/tmva/src/factory.pyx"
goto __pyx_L5_argtuple_error;

#line 68 "root_numpy/tmva/src/factory.pyx"
      }

#line 68 "root_numpy/tmva/src/factory.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 68 "root_numpy/tmva/src/factory.pyx"
      switch (pos_args) {

#line 68 "root_numpy/tmva/src/factory.pyx"
        case  0:

#line 68 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_factory)) != 0)) kw_args--;
        else 
#line 68 "root_numpy/tmva/src/factory.pyx"
goto __pyx_L5_argtuple_error;

#line 68 "root_numpy/tmva/src/factory.pyx"
        case  1:

#line 68 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_events)) != 0)) kw_args--;

#line 68 "root_numpy/tmva/src/factory.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("factory_add_events_regression", 0, 3, 5, 1); 
#line 68 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 68 "root_numpy/tmva/src/factory.pyx"
        }

#line 68 "root_numpy/tmva/src/factory.pyx"
        case  2:

#line 68 "root_numpy/tmva/src/factory.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_target)) != 0)) kw_args--;

#line 68 "root_numpy/tmva/src/factory.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("factory_add_events_regression", 0, 3, 5, 2); 
#line 68 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 68 "root_numpy/tmva/src/factory.pyx"
        }

#line 68 "root_numpy/tmva/src/factory.pyx"
        case  3:

#line 68 "root_numpy/tmva/src/factory.pyx"
        if (kw_args > 0) {

#line 68 "root_numpy/tmva/src/factory.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_weights);

#line 68 "root_numpy/tmva/src/factory.pyx"
          if (value) { values[3] = value; kw_args--; }

#line 68 "root_numpy/tmva/src/factory.pyx"
        }

#line 68 "root_numpy/tmva/src/factory.pyx"
        case  4:

#line 68 "root_numpy/tmva/src/factory.pyx"
        if (kw_args > 0) {

#line 68 "root_numpy/tmva/src/factory.pyx"
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_test);

#line 68 "root_numpy/tmva/src/factory.pyx"
          if (value) { values[4] = value; kw_args--; }

#line 68 "root_numpy/tmva/src/factory.pyx"
        }

#line 68 "root_numpy/tmva/src/factory.pyx"
      }

#line 68 "root_numpy/tmva/src/factory.pyx"
      if (unlikely(kw_args > 0)) {

#line 68 "root_numpy/tmva/src/factory.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "factory_add_events_regression") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 68 "root_numpy/tmva/src/factory.pyx"
      }

#line 68 "root_numpy/tmva/src/factory.pyx"
    } else {

#line 68 "root_numpy/tmva/src/factory.pyx"
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  5: 
#line 68 "root_numpy/tmva/src/factory.pyx"
values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: 
#line 68 "root_numpy/tmva/src/factory.pyx"
values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: 
#line 68 "root_numpy/tmva/src/factory.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 68 "root_numpy/tmva/src/factory.pyx"
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 68 "root_numpy/tmva/src/factory.pyx"
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 68 "root_numpy/tmva/src/factory.pyx"
        break;
        default: 
#line 68 "root_numpy/tmva/src/factory.pyx"
goto __pyx_L5_argtuple_error;

#line 68 "root_numpy/tmva/src/factory.pyx"
      }

#line 68 "root_numpy/tmva/src/factory.pyx"
    }

#line 68 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_factory = values[0];

#line 68 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_events = ((PyArrayObject *)values[1]);

#line 68 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_target = ((PyArrayObject *)values[2]);

#line 68 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_weights = ((PyArrayObject *)values[3]);

#line 68 "root_numpy/tmva/src/factory.pyx"
    if (values[4]) {

#line 68 "root_numpy/tmva/src/factory.pyx"
      __pyx_v_test = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_test == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 68 "root_numpy/tmva/src/factory.pyx"
    } else {

      /* "root_numpy/tmva/src/factory.pyx":69
 *         np.ndarray[np.double_t, ndim=1] target,
 *         np.ndarray[np.double_t, ndim=1] weights=None,
 *         bool test=False):             # <<<<<<<<<<<<<<
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 *     cdef long size = events.shape[0]
 */

#line 69 "root_numpy/tmva/src/factory.pyx"
      __pyx_v_test = ((bool)0);

#line 69 "root_numpy/tmva/src/factory.pyx"
    }

#line 69 "root_numpy/tmva/src/factory.pyx"
  }

#line 69 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 69 "root_numpy/tmva/src/factory.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("factory_add_events_regression", 0, 3, 5, PyTuple_GET_SIZE(__pyx_args)); 
#line 69 "root_numpy/tmva/src/factory.pyx"
{__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 69 "root_numpy/tmva/src/factory.pyx"
  __pyx_L3_error:;

#line 69 "root_numpy/tmva/src/factory.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.factory_add_events_regression", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 69 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyFinishContext();

#line 69 "root_numpy/tmva/src/factory.pyx"
  return NULL;

#line 69 "root_numpy/tmva/src/factory.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 69 "root_numpy/tmva/src/factory.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_events), __pyx_ptype_5numpy_ndarray, 1, "events", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 69 "root_numpy/tmva/src/factory.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_target), __pyx_ptype_5numpy_ndarray, 1, "target", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 69 "root_numpy/tmva/src/factory.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_weights), __pyx_ptype_5numpy_ndarray, 1, "weights", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 69 "root_numpy/tmva/src/factory.pyx"
__pyx_pf_13_libtmvanumpy_4factory_add_events_regression(__pyx_self, __pyx_v_factory, __pyx_v_events, __pyx_v_target, __pyx_v_weights, __pyx_v_test);

  /* "root_numpy/tmva/src/factory.pyx":64
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_regression(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 64 "root_numpy/tmva/src/factory.pyx"


#line 64 "root_numpy/tmva/src/factory.pyx"
  /* function exit code */

#line 64 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L0;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_L1_error:;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_r = NULL;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_L0:;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyFinishContext();

#line 64 "root_numpy/tmva/src/factory.pyx"
  return __pyx_r;

#line 64 "root_numpy/tmva/src/factory.pyx"
}

#line 64 "root_numpy/tmva/src/factory.pyx"


#line 64 "root_numpy/tmva/src/factory.pyx"
static PyObject *__pyx_pf_13_libtmvanumpy_4factory_add_events_regression(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_factory, PyArrayObject *__pyx_v_events, PyArrayObject *__pyx_v_target, PyArrayObject *__pyx_v_weights, bool __pyx_v_test) {
  TMVA::Factory *__pyx_v__factory
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_size
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_n_features
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_i
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  long __pyx_v_j
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  double __pyx_v_weight
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  std::vector<double>  *__pyx_v_event
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  TMVA::Types::ETreeType __pyx_v_treetype
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_events
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_events
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_target
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_target
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_weights
#line 64 "root_numpy/tmva/src/factory.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_weights
#line 64 "root_numpy/tmva/src/factory.pyx"
;

#line 64 "root_numpy/tmva/src/factory.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  std::vector<double>  *__pyx_t_2;
  int __pyx_t_3;
  long __pyx_t_4;
  int __pyx_t_5;
  long __pyx_t_6;
  long __pyx_t_7;
  long __pyx_t_8;
  long __pyx_t_9;
  std::string __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannySetupContext("factory_add_events_regression", 0);

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_events.pybuffer.buf = NULL;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_events.refcount = 0;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_events.data = NULL;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_events.rcbuffer = &__pyx_pybuffer_events;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_target.pybuffer.buf = NULL;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_target.refcount = 0;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_target.data = NULL;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_target.rcbuffer = &__pyx_pybuffer_target;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_weights.pybuffer.buf = NULL;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffer_weights.refcount = 0;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_weights.data = NULL;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_weights.rcbuffer = &__pyx_pybuffer_weights;

#line 64 "root_numpy/tmva/src/factory.pyx"
  {

#line 64 "root_numpy/tmva/src/factory.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 64 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_events.rcbuffer->pybuffer, (PyObject*)__pyx_v_events, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "root_numpy/tmva/src/factory.pyx"
  }

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_events.diminfo[0].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_events.diminfo[0].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_events.diminfo[1].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_events.diminfo[1].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[1];

#line 64 "root_numpy/tmva/src/factory.pyx"
  {

#line 64 "root_numpy/tmva/src/factory.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 64 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_target.rcbuffer->pybuffer, (PyObject*)__pyx_v_target, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "root_numpy/tmva/src/factory.pyx"
  }

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_target.diminfo[0].strides = __pyx_pybuffernd_target.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_target.diminfo[0].shape = __pyx_pybuffernd_target.rcbuffer->pybuffer.shape[0];

#line 64 "root_numpy/tmva/src/factory.pyx"
  {

#line 64 "root_numpy/tmva/src/factory.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 64 "root_numpy/tmva/src/factory.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_weights.rcbuffer->pybuffer, (PyObject*)__pyx_v_weights, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 1, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "root_numpy/tmva/src/factory.pyx"
  }

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_pybuffernd_weights.diminfo[0].strides = __pyx_pybuffernd_weights.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_weights.diminfo[0].shape = __pyx_pybuffernd_weights.rcbuffer->pybuffer.shape[0];

  /* "root_numpy/tmva/src/factory.pyx":70
 *         np.ndarray[np.double_t, ndim=1] weights=None,
 *         bool test=False):
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)             # <<<<<<<<<<<<<<
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]
 */

#line 70 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_factory); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 70 "root_numpy/tmva/src/factory.pyx"
  __pyx_v__factory = ((TMVA::Factory *)__pyx_t_1);

  /* "root_numpy/tmva/src/factory.pyx":71
 *         bool test=False):
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 *     cdef long size = events.shape[0]             # <<<<<<<<<<<<<<
 *     cdef long n_features = events.shape[1]
 *     cdef long i, j
 */

#line 71 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_size = (__pyx_v_events->dimensions[0]);

  /* "root_numpy/tmva/src/factory.pyx":72
 *     cdef Factory* _factory = <Factory*> PyCObject_AsVoidPtr(factory)
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]             # <<<<<<<<<<<<<<
 *     cdef long i, j
 *     cdef double weight = 1.
 */

#line 72 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_n_features = (__pyx_v_events->dimensions[1]);

  /* "root_numpy/tmva/src/factory.pyx":74
 *     cdef long n_features = events.shape[1]
 *     cdef long i, j
 *     cdef double weight = 1.             # <<<<<<<<<<<<<<
 *     cdef vector[double]* event = new vector[double](n_features + 1)
 *     cdef ETreeType treetype = kTraining
 */

#line 74 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_weight = 1.;

  /* "root_numpy/tmva/src/factory.pyx":75
 *     cdef long i, j
 *     cdef double weight = 1.
 *     cdef vector[double]* event = new vector[double](n_features + 1)             # <<<<<<<<<<<<<<
 *     cdef ETreeType treetype = kTraining
 *     if test:
 */

#line 75 "root_numpy/tmva/src/factory.pyx"
  try {

#line 75 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_2 = new std::vector<double> ((__pyx_v_n_features + 1));

#line 75 "root_numpy/tmva/src/factory.pyx"
  } catch(...) {

#line 75 "root_numpy/tmva/src/factory.pyx"
    __Pyx_CppExn2PyErr();

#line 75 "root_numpy/tmva/src/factory.pyx"
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 75 "root_numpy/tmva/src/factory.pyx"
  }

#line 75 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_event = __pyx_t_2;

  /* "root_numpy/tmva/src/factory.pyx":76
 *     cdef double weight = 1.
 *     cdef vector[double]* event = new vector[double](n_features + 1)
 *     cdef ETreeType treetype = kTraining             # <<<<<<<<<<<<<<
 *     if test:
 *         treetype = kTesting
 */

#line 76 "root_numpy/tmva/src/factory.pyx"
  __pyx_v_treetype = TMVA::Types::kTraining;

  /* "root_numpy/tmva/src/factory.pyx":77
 *     cdef vector[double]* event = new vector[double](n_features + 1)
 *     cdef ETreeType treetype = kTraining
 *     if test:             # <<<<<<<<<<<<<<
 *         treetype = kTesting
 *     for i from 0 <= i < size:
 */

#line 77 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_3 = (__pyx_v_test != 0);

#line 77 "root_numpy/tmva/src/factory.pyx"
  if (__pyx_t_3) {

    /* "root_numpy/tmva/src/factory.pyx":78
 *     cdef ETreeType treetype = kTraining
 *     if test:
 *         treetype = kTesting             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         if weights is not None:
 */

#line 78 "root_numpy/tmva/src/factory.pyx"
    __pyx_v_treetype = TMVA::Types::kTesting;

#line 78 "root_numpy/tmva/src/factory.pyx"
    goto __pyx_L3;

#line 78 "root_numpy/tmva/src/factory.pyx"
  }

#line 78 "root_numpy/tmva/src/factory.pyx"
  __pyx_L3:;

  /* "root_numpy/tmva/src/factory.pyx":79
 *     if test:
 *         treetype = kTesting
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         if weights is not None:
 *             weight = weights[i]
 */

#line 79 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_4 = __pyx_v_size;

#line 79 "root_numpy/tmva/src/factory.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_4; __pyx_v_i++) {

    /* "root_numpy/tmva/src/factory.pyx":80
 *         treetype = kTesting
 *     for i from 0 <= i < size:
 *         if weights is not None:             # <<<<<<<<<<<<<<
 *             weight = weights[i]
 *         for j from 0 <= j < n_features:
 */

#line 80 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_3 = (((PyObject *)__pyx_v_weights) != Py_None);

#line 80 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_5 = (__pyx_t_3 != 0);

#line 80 "root_numpy/tmva/src/factory.pyx"
    if (__pyx_t_5) {

      /* "root_numpy/tmva/src/factory.pyx":81
 *     for i from 0 <= i < size:
 *         if weights is not None:
 *             weight = weights[i]             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < n_features:
 *             event[0][j] = events[i, j]
 */

#line 81 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_6 = __pyx_v_i;

#line 81 "root_numpy/tmva/src/factory.pyx"
      __pyx_v_weight = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_weights.rcbuffer->pybuffer.buf, __pyx_t_6, __pyx_pybuffernd_weights.diminfo[0].strides));

#line 81 "root_numpy/tmva/src/factory.pyx"
      goto __pyx_L6;

#line 81 "root_numpy/tmva/src/factory.pyx"
    }

#line 81 "root_numpy/tmva/src/factory.pyx"
    __pyx_L6:;

    /* "root_numpy/tmva/src/factory.pyx":82
 *         if weights is not None:
 *             weight = weights[i]
 *         for j from 0 <= j < n_features:             # <<<<<<<<<<<<<<
 *             event[0][j] = events[i, j]
 *         event[0][n_features] = target[i]
 */

#line 82 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_7 = __pyx_v_n_features;

#line 82 "root_numpy/tmva/src/factory.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_7; __pyx_v_j++) {

      /* "root_numpy/tmva/src/factory.pyx":83
 *             weight = weights[i]
 *         for j from 0 <= j < n_features:
 *             event[0][j] = events[i, j]             # <<<<<<<<<<<<<<
 *         event[0][n_features] = target[i]
 *         _factory.AddEvent("Regression", treetype, event[0], weight)
 */

#line 83 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_8 = __pyx_v_i;

#line 83 "root_numpy/tmva/src/factory.pyx"
      __pyx_t_9 = __pyx_v_j;

#line 83 "root_numpy/tmva/src/factory.pyx"
      ((__pyx_v_event[0])[__pyx_v_j]) = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_events.rcbuffer->pybuffer.buf, __pyx_t_8, __pyx_pybuffernd_events.diminfo[0].strides, __pyx_t_9, __pyx_pybuffernd_events.diminfo[1].strides));

#line 83 "root_numpy/tmva/src/factory.pyx"
    }

    /* "root_numpy/tmva/src/factory.pyx":84
 *         for j from 0 <= j < n_features:
 *             event[0][j] = events[i, j]
 *         event[0][n_features] = target[i]             # <<<<<<<<<<<<<<
 *         _factory.AddEvent("Regression", treetype, event[0], weight)
 *     del event
 */

#line 84 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_7 = __pyx_v_i;

#line 84 "root_numpy/tmva/src/factory.pyx"
    ((__pyx_v_event[0])[__pyx_v_n_features]) = (*__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_target.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_target.diminfo[0].strides));

    /* "root_numpy/tmva/src/factory.pyx":85
 *             event[0][j] = events[i, j]
 *         event[0][n_features] = target[i]
 *         _factory.AddEvent("Regression", treetype, event[0], weight)             # <<<<<<<<<<<<<<
 *     del event
 */

#line 85 "root_numpy/tmva/src/factory.pyx"
    __pyx_t_10 = __pyx_convert_string_from_py_std__string(__pyx_n_b_Regression); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 85 "root_numpy/tmva/src/factory.pyx"
    __pyx_v__factory->AddEvent(__pyx_t_10, __pyx_v_treetype, (__pyx_v_event[0]), __pyx_v_weight);

#line 85 "root_numpy/tmva/src/factory.pyx"
  }

  /* "root_numpy/tmva/src/factory.pyx":86
 *         event[0][n_features] = target[i]
 *         _factory.AddEvent("Regression", treetype, event[0], weight)
 *     del event             # <<<<<<<<<<<<<<
 */

#line 86 "root_numpy/tmva/src/factory.pyx"
  delete __pyx_v_event;

  /* "root_numpy/tmva/src/factory.pyx":64
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_regression(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 64 "root_numpy/tmva/src/factory.pyx"


#line 64 "root_numpy/tmva/src/factory.pyx"
  /* function exit code */

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);

#line 64 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L0;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_L1_error:;

#line 64 "root_numpy/tmva/src/factory.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 64 "root_numpy/tmva/src/factory.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 64 "root_numpy/tmva/src/factory.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 64 "root_numpy/tmva/src/factory.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_target.rcbuffer->pybuffer);

#line 64 "root_numpy/tmva/src/factory.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.factory_add_events_regression", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_r = NULL;

#line 64 "root_numpy/tmva/src/factory.pyx"
  goto __pyx_L2;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_L0:;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_target.rcbuffer->pybuffer);

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_weights.rcbuffer->pybuffer);

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_L2:;

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_RefNannyFinishContext();

#line 64 "root_numpy/tmva/src/factory.pyx"
  return __pyx_r;

#line 64 "root_numpy/tmva/src/factory.pyx"
}

/* "root_numpy/tmva/src/evaluate.pyx":4
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_twoclass(method, np.ndarray[np.double_t, ndim=2] events):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 4 "root_numpy/tmva/src/evaluate.pyx"


#line 4 "root_numpy/tmva/src/evaluate.pyx"
/* Python wrapper */

#line 4 "root_numpy/tmva/src/evaluate.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_7evaluate_twoclass(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_libtmvanumpy_7evaluate_twoclass = 
#line 4 "root_numpy/tmva/src/evaluate.pyx"
{"evaluate_twoclass", (PyCFunction)__pyx_pw_13_libtmvanumpy_7evaluate_twoclass, METH_VARARGS|METH_KEYWORDS, 0};

#line 4 "root_numpy/tmva/src/evaluate.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_7evaluate_twoclass(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_method = 0
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_events = 0
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_twoclass (wrapper)", 0);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  {

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_method,&__pyx_n_s_events,0};

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    PyObject* values[2] = {0,0};

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      switch (pos_args) {
        case  2: 
#line 4 "root_numpy/tmva/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 4 "root_numpy/tmva/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
        case  0: break;
        default: 
#line 4 "root_numpy/tmva/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      }

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      switch (pos_args) {

#line 4 "root_numpy/tmva/src/evaluate.pyx"
        case  0:

#line 4 "root_numpy/tmva/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_method)) != 0)) kw_args--;
        else 
#line 4 "root_numpy/tmva/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
        case  1:

#line 4 "root_numpy/tmva/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_events)) != 0)) kw_args--;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_twoclass", 1, 2, 2, 1); 
#line 4 "root_numpy/tmva/src/evaluate.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 4 "root_numpy/tmva/src/evaluate.pyx"
        }

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      }

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 4 "root_numpy/tmva/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_twoclass") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      }

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    } else {

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    }

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_v_method = values[0];

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_v_events = ((PyArrayObject *)values[1]);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  }

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_twoclass", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); 
#line 4 "root_numpy/tmva/src/evaluate.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L3_error:;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.evaluate_twoclass", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  return NULL;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_events), __pyx_ptype_5numpy_ndarray, 1, "events", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 4 "root_numpy/tmva/src/evaluate.pyx"
__pyx_pf_13_libtmvanumpy_6evaluate_twoclass(__pyx_self, __pyx_v_method, __pyx_v_events);

#line 4 "root_numpy/tmva/src/evaluate.pyx"


#line 4 "root_numpy/tmva/src/evaluate.pyx"
  /* function exit code */

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L0;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L1_error:;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_r = NULL;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L0:;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  return __pyx_r;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
}

#line 4 "root_numpy/tmva/src/evaluate.pyx"


#line 4 "root_numpy/tmva/src/evaluate.pyx"
static PyObject *__pyx_pf_13_libtmvanumpy_6evaluate_twoclass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_method, PyArrayObject *__pyx_v_events) {
  TMVA::MethodBase *__pyx_v__method
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_size
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_n_features
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_i
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_j
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  std::vector<float>  __pyx_v_features
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  TMVA::Event *__pyx_v_event
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_output = 0
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_events
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_events
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_output
#line 4 "root_numpy/tmva/src/evaluate.pyx"
;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_twoclass", 0);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_output.pybuffer.buf = NULL;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_output.refcount = 0;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_output.data = NULL;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_events.pybuffer.buf = NULL;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_events.refcount = 0;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_events.data = NULL;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_events.rcbuffer = &__pyx_pybuffer_events;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  {

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_events.rcbuffer->pybuffer, (PyObject*)__pyx_v_events, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  }

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_events.diminfo[0].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_events.diminfo[0].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_events.diminfo[1].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_events.diminfo[1].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/tmva/src/evaluate.pyx":5
 * @cython.wraparound(False)
 * def evaluate_twoclass(method, np.ndarray[np.double_t, ndim=2] events):
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)             # <<<<<<<<<<<<<<
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]
 */

#line 5 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_method); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 5 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v__method = ((TMVA::MethodBase *)__pyx_t_1);

  /* "root_numpy/tmva/src/evaluate.pyx":6
 * def evaluate_twoclass(method, np.ndarray[np.double_t, ndim=2] events):
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]             # <<<<<<<<<<<<<<
 *     cdef long n_features = events.shape[1]
 *     cdef long i, j
 */

#line 6 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_events->dimensions[0]);

  /* "root_numpy/tmva/src/evaluate.pyx":7
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]             # <<<<<<<<<<<<<<
 *     cdef long i, j
 *     cdef vector[float] features
 */

#line 7 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_n_features = (__pyx_v_events->dimensions[1]);

  /* "root_numpy/tmva/src/evaluate.pyx":10
 *     cdef long i, j
 *     cdef vector[float] features
 *     cdef Event* event = new Event(features, 0)             # <<<<<<<<<<<<<<
 *     _method.fTmpEvent = event
 *     cdef np.ndarray[np.double_t, ndim=1] output = np.empty(size, dtype=np.double)
 */

#line 10 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_event = new TMVA::Event(__pyx_v_features, 0);

  /* "root_numpy/tmva/src/evaluate.pyx":11
 *     cdef vector[float] features
 *     cdef Event* event = new Event(features, 0)
 *     _method.fTmpEvent = event             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=1] output = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 */

#line 11 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v__method->fTmpEvent = __pyx_v_event;

  /* "root_numpy/tmva/src/evaluate.pyx":12
 *     cdef Event* event = new Event(features, 0)
 *     _method.fTmpEvent = event
 *     cdef np.ndarray[np.double_t, ndim=1] output = np.empty(size, dtype=np.double)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         for j from 0 <= j < n_features:
 */

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  {

#line 12 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 12 "root_numpy/tmva/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 1, 0, __pyx_stack) == -1)) {

#line 12 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_v_output = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_output.rcbuffer->pybuffer.buf = NULL;

#line 12 "root_numpy/tmva/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 12 "root_numpy/tmva/src/evaluate.pyx"
__pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0];

#line 12 "root_numpy/tmva/src/evaluate.pyx"
    }

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  }

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_output = ((PyArrayObject *)__pyx_t_6);

#line 12 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/tmva/src/evaluate.pyx":13
 *     _method.fTmpEvent = event
 *     cdef np.ndarray[np.double_t, ndim=1] output = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < n_features:
 *             event.SetVal(j, events[i, j])
 */

#line 13 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 13 "root_numpy/tmva/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/tmva/src/evaluate.pyx":14
 *     cdef np.ndarray[np.double_t, ndim=1] output = np.empty(size, dtype=np.double)
 *     for i from 0 <= i < size:
 *         for j from 0 <= j < n_features:             # <<<<<<<<<<<<<<
 *             event.SetVal(j, events[i, j])
 *         output[i] = _method.GetMvaValue()
 */

#line 14 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_n_features;

#line 14 "root_numpy/tmva/src/evaluate.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_9; __pyx_v_j++) {

      /* "root_numpy/tmva/src/evaluate.pyx":15
 *     for i from 0 <= i < size:
 *         for j from 0 <= j < n_features:
 *             event.SetVal(j, events[i, j])             # <<<<<<<<<<<<<<
 *         output[i] = _method.GetMvaValue()
 *     _method.fTmpEvent = NULL
 */

#line 15 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_t_10 = __pyx_v_i;

#line 15 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_t_11 = __pyx_v_j;

#line 15 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_v_event->SetVal(__pyx_v_j, (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_events.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_events.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_events.diminfo[1].strides)));

#line 15 "root_numpy/tmva/src/evaluate.pyx"
    }

    /* "root_numpy/tmva/src/evaluate.pyx":16
 *         for j from 0 <= j < n_features:
 *             event.SetVal(j, events[i, j])
 *         output[i] = _method.GetMvaValue()             # <<<<<<<<<<<<<<
 *     _method.fTmpEvent = NULL
 *     del event
 */

#line 16 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 16 "root_numpy/tmva/src/evaluate.pyx"
    *__Pyx_BufPtrStrided1d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_output.diminfo[0].strides) = __pyx_v__method->GetMvaValue();

#line 16 "root_numpy/tmva/src/evaluate.pyx"
  }

  /* "root_numpy/tmva/src/evaluate.pyx":17
 *             event.SetVal(j, events[i, j])
 *         output[i] = _method.GetMvaValue()
 *     _method.fTmpEvent = NULL             # <<<<<<<<<<<<<<
 *     del event
 *     return output
 */

#line 17 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v__method->fTmpEvent = NULL;

  /* "root_numpy/tmva/src/evaluate.pyx":18
 *         output[i] = _method.GetMvaValue()
 *     _method.fTmpEvent = NULL
 *     del event             # <<<<<<<<<<<<<<
 *     return output
 * 
 */

#line 18 "root_numpy/tmva/src/evaluate.pyx"
  delete __pyx_v_event;

  /* "root_numpy/tmva/src/evaluate.pyx":19
 *     _method.fTmpEvent = NULL
 *     del event
 *     return output             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 19 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 19 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_output));

#line 19 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_output);

#line 19 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/tmva/src/evaluate.pyx":4
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_twoclass(method, np.ndarray[np.double_t, ndim=2] events):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 4 "root_numpy/tmva/src/evaluate.pyx"


#line 4 "root_numpy/tmva/src/evaluate.pyx"
  /* function exit code */

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L1_error:;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.evaluate_twoclass", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_r = NULL;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L2;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L0:;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L2:;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_output);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  return __pyx_r;

#line 4 "root_numpy/tmva/src/evaluate.pyx"
}

/* "root_numpy/tmva/src/evaluate.pyx":24
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_multiclass(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_classes):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 24 "root_numpy/tmva/src/evaluate.pyx"


#line 24 "root_numpy/tmva/src/evaluate.pyx"
/* Python wrapper */

#line 24 "root_numpy/tmva/src/evaluate.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_9evaluate_multiclass(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_libtmvanumpy_9evaluate_multiclass = 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
{"evaluate_multiclass", (PyCFunction)__pyx_pw_13_libtmvanumpy_9evaluate_multiclass, METH_VARARGS|METH_KEYWORDS, 0};

#line 24 "root_numpy/tmva/src/evaluate.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_9evaluate_multiclass(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_method = 0
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_events = 0
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  unsigned int __pyx_v_n_classes
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_multiclass (wrapper)", 0);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  {

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_method,&__pyx_n_s_events,&__pyx_n_s_n_classes,0};

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    PyObject* values[3] = {0,0,0};

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      switch (pos_args) {
        case  3: 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        case  0: break;
        default: 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      }

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      switch (pos_args) {

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        case  0:

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_method)) != 0)) kw_args--;
        else 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        case  1:

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_events)) != 0)) kw_args--;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_multiclass", 1, 3, 3, 1); 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        }

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        case  2:

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_classes)) != 0)) kw_args--;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_multiclass", 1, 3, 3, 2); 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        }

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      }

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 24 "root_numpy/tmva/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_multiclass") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      }

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    } else {

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    }

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_v_method = values[0];

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_v_events = ((PyArrayObject *)values[1]);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_v_n_classes = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_n_classes == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  }

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_multiclass", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L3_error:;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.evaluate_multiclass", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  return NULL;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_events), __pyx_ptype_5numpy_ndarray, 1, "events", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 24 "root_numpy/tmva/src/evaluate.pyx"
__pyx_pf_13_libtmvanumpy_8evaluate_multiclass(__pyx_self, __pyx_v_method, __pyx_v_events, __pyx_v_n_classes);

#line 24 "root_numpy/tmva/src/evaluate.pyx"


#line 24 "root_numpy/tmva/src/evaluate.pyx"
  /* function exit code */

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L0;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L1_error:;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_r = NULL;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L0:;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  return __pyx_r;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
}

#line 24 "root_numpy/tmva/src/evaluate.pyx"


#line 24 "root_numpy/tmva/src/evaluate.pyx"
static PyObject *__pyx_pf_13_libtmvanumpy_8evaluate_multiclass(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_method, PyArrayObject *__pyx_v_events, unsigned int __pyx_v_n_classes) {
  TMVA::MethodBase *__pyx_v__method
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_size
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_n_features
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_i
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_j
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  std::vector<float>  __pyx_v_features
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  TMVA::Event *__pyx_v_event
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_output = 0
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_events
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_events
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_output
#line 24 "root_numpy/tmva/src/evaluate.pyx"
;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_multiclass", 0);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_output.pybuffer.buf = NULL;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_output.refcount = 0;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_output.data = NULL;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_events.pybuffer.buf = NULL;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_events.refcount = 0;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_events.data = NULL;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_events.rcbuffer = &__pyx_pybuffer_events;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  {

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_events.rcbuffer->pybuffer, (PyObject*)__pyx_v_events, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  }

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_events.diminfo[0].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_events.diminfo[0].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_events.diminfo[1].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_events.diminfo[1].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/tmva/src/evaluate.pyx":25
 * @cython.wraparound(False)
 * def evaluate_multiclass(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_classes):
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)             # <<<<<<<<<<<<<<
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]
 */

#line 25 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_method); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 25 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v__method = ((TMVA::MethodBase *)__pyx_t_1);

  /* "root_numpy/tmva/src/evaluate.pyx":26
 * def evaluate_multiclass(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_classes):
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]             # <<<<<<<<<<<<<<
 *     cdef long n_features = events.shape[1]
 *     cdef long i, j
 */

#line 26 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_events->dimensions[0]);

  /* "root_numpy/tmva/src/evaluate.pyx":27
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]             # <<<<<<<<<<<<<<
 *     cdef long i, j
 *     cdef vector[float] features
 */

#line 27 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_n_features = (__pyx_v_events->dimensions[1]);

  /* "root_numpy/tmva/src/evaluate.pyx":30
 *     cdef long i, j
 *     cdef vector[float] features
 *     cdef Event* event = new Event(features, 0)             # <<<<<<<<<<<<<<
 *     _method.fTmpEvent = event
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_classes), dtype=np.float32)
 */

#line 30 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_event = new TMVA::Event(__pyx_v_features, 0);

  /* "root_numpy/tmva/src/evaluate.pyx":31
 *     cdef vector[float] features
 *     cdef Event* event = new Event(features, 0)
 *     _method.fTmpEvent = event             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_classes), dtype=np.float32)
 *     for i from 0 <= i < size:
 */

#line 31 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v__method->fTmpEvent = __pyx_v_event;

  /* "root_numpy/tmva/src/evaluate.pyx":32
 *     cdef Event* event = new Event(features, 0)
 *     _method.fTmpEvent = event
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_classes), dtype=np.float32)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         for j from 0 <= j < n_features:
 */

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_classes); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_4 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_5 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  {

#line 32 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 32 "root_numpy/tmva/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {

#line 32 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_v_output = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_output.rcbuffer->pybuffer.buf = NULL;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 32 "root_numpy/tmva/src/evaluate.pyx"
__pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];

#line 32 "root_numpy/tmva/src/evaluate.pyx"
    }

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  }

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_output = ((PyArrayObject *)__pyx_t_6);

#line 32 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/tmva/src/evaluate.pyx":33
 *     _method.fTmpEvent = event
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_classes), dtype=np.float32)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < n_features:
 *             event.SetVal(j, events[i, j])
 */

#line 33 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 33 "root_numpy/tmva/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/tmva/src/evaluate.pyx":34
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_classes), dtype=np.float32)
 *     for i from 0 <= i < size:
 *         for j from 0 <= j < n_features:             # <<<<<<<<<<<<<<
 *             event.SetVal(j, events[i, j])
 *         memcpy(&output[i, 0], &(_method.GetMulticlassValues()[0]), sizeof(np.float32_t) * n_classes)
 */

#line 34 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_n_features;

#line 34 "root_numpy/tmva/src/evaluate.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_9; __pyx_v_j++) {

      /* "root_numpy/tmva/src/evaluate.pyx":35
 *     for i from 0 <= i < size:
 *         for j from 0 <= j < n_features:
 *             event.SetVal(j, events[i, j])             # <<<<<<<<<<<<<<
 *         memcpy(&output[i, 0], &(_method.GetMulticlassValues()[0]), sizeof(np.float32_t) * n_classes)
 *     _method.fTmpEvent = NULL
 */

#line 35 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_t_10 = __pyx_v_i;

#line 35 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_t_11 = __pyx_v_j;

#line 35 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_v_event->SetVal(__pyx_v_j, (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_events.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_events.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_events.diminfo[1].strides)));

#line 35 "root_numpy/tmva/src/evaluate.pyx"
    }

    /* "root_numpy/tmva/src/evaluate.pyx":36
 *         for j from 0 <= j < n_features:
 *             event.SetVal(j, events[i, j])
 *         memcpy(&output[i, 0], &(_method.GetMulticlassValues()[0]), sizeof(np.float32_t) * n_classes)             # <<<<<<<<<<<<<<
 *     _method.fTmpEvent = NULL
 *     del event
 */

#line 36 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 36 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_t_12 = 0;

#line 36 "root_numpy/tmva/src/evaluate.pyx"
    memcpy((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_output.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_output.diminfo[1].strides))), (&(__pyx_v__method->GetMulticlassValues()[0])), ((sizeof(__pyx_t_5numpy_float32_t)) * __pyx_v_n_classes));

#line 36 "root_numpy/tmva/src/evaluate.pyx"
  }

  /* "root_numpy/tmva/src/evaluate.pyx":37
 *             event.SetVal(j, events[i, j])
 *         memcpy(&output[i, 0], &(_method.GetMulticlassValues()[0]), sizeof(np.float32_t) * n_classes)
 *     _method.fTmpEvent = NULL             # <<<<<<<<<<<<<<
 *     del event
 *     return output
 */

#line 37 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v__method->fTmpEvent = NULL;

  /* "root_numpy/tmva/src/evaluate.pyx":38
 *         memcpy(&output[i, 0], &(_method.GetMulticlassValues()[0]), sizeof(np.float32_t) * n_classes)
 *     _method.fTmpEvent = NULL
 *     del event             # <<<<<<<<<<<<<<
 *     return output
 * 
 */

#line 38 "root_numpy/tmva/src/evaluate.pyx"
  delete __pyx_v_event;

  /* "root_numpy/tmva/src/evaluate.pyx":39
 *     _method.fTmpEvent = NULL
 *     del event
 *     return output             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 39 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 39 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_output));

#line 39 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_output);

#line 39 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/tmva/src/evaluate.pyx":24
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_multiclass(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_classes):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 24 "root_numpy/tmva/src/evaluate.pyx"


#line 24 "root_numpy/tmva/src/evaluate.pyx"
  /* function exit code */

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L1_error:;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.evaluate_multiclass", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_r = NULL;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L2;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L0:;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L2:;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_output);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  return __pyx_r;

#line 24 "root_numpy/tmva/src/evaluate.pyx"
}

/* "root_numpy/tmva/src/evaluate.pyx":44
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_regression(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_targets):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 44 "root_numpy/tmva/src/evaluate.pyx"


#line 44 "root_numpy/tmva/src/evaluate.pyx"
/* Python wrapper */

#line 44 "root_numpy/tmva/src/evaluate.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_11evaluate_regression(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_13_libtmvanumpy_11evaluate_regression = 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
{"evaluate_regression", (PyCFunction)__pyx_pw_13_libtmvanumpy_11evaluate_regression, METH_VARARGS|METH_KEYWORDS, 0};

#line 44 "root_numpy/tmva/src/evaluate.pyx"
static PyObject *__pyx_pw_13_libtmvanumpy_11evaluate_regression(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_method = 0
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_events = 0
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  unsigned int __pyx_v_n_targets
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  PyObject *__pyx_r = 0;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyDeclarations

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_regression (wrapper)", 0);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  {

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_method,&__pyx_n_s_events,&__pyx_n_s_n_targets,0};

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    PyObject* values[3] = {0,0,0};

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    if (unlikely(__pyx_kwds)) {

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      Py_ssize_t kw_args;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      switch (pos_args) {
        case  3: 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        case  0: break;
        default: 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      }

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      kw_args = PyDict_Size(__pyx_kwds);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      switch (pos_args) {

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        case  0:

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_method)) != 0)) kw_args--;
        else 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
goto __pyx_L5_argtuple_error;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        case  1:

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_events)) != 0)) kw_args--;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_regression", 1, 3, 3, 1); 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        }

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        case  2:

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_n_targets)) != 0)) kw_args--;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        else {
          __Pyx_RaiseArgtupleInvalid("evaluate_regression", 1, 3, 3, 2); 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        }

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      }

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      if (unlikely(kw_args > 0)) {

#line 44 "root_numpy/tmva/src/evaluate.pyx"
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "evaluate_regression") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      }

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      goto __pyx_L5_argtuple_error;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    } else {

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    }

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_v_method = values[0];

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_v_events = ((PyArrayObject *)values[1]);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_v_n_targets = __Pyx_PyInt_As_unsigned_int(values[2]); if (unlikely((__pyx_v_n_targets == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  }

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L4_argument_unpacking_done;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("evaluate_regression", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
{__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L3_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L3_error:;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.evaluate_regression", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  return NULL;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L4_argument_unpacking_done:;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_events), __pyx_ptype_5numpy_ndarray, 1, "events", 0))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = 
#line 44 "root_numpy/tmva/src/evaluate.pyx"
__pyx_pf_13_libtmvanumpy_10evaluate_regression(__pyx_self, __pyx_v_method, __pyx_v_events, __pyx_v_n_targets);

#line 44 "root_numpy/tmva/src/evaluate.pyx"


#line 44 "root_numpy/tmva/src/evaluate.pyx"
  /* function exit code */

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L0;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L1_error:;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_r = NULL;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L0:;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  return __pyx_r;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
}

#line 44 "root_numpy/tmva/src/evaluate.pyx"


#line 44 "root_numpy/tmva/src/evaluate.pyx"
static PyObject *__pyx_pf_13_libtmvanumpy_10evaluate_regression(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_method, PyArrayObject *__pyx_v_events, unsigned int __pyx_v_n_targets) {
  TMVA::MethodBase *__pyx_v__method
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_size
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_n_features
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_i
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  long __pyx_v_j
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  std::vector<float>  __pyx_v_features
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  TMVA::Event *__pyx_v_event
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  PyArrayObject *__pyx_v_output = 0
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_events
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_events
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_output
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;
  __Pyx_Buffer __pyx_pybuffer_output
#line 44 "root_numpy/tmva/src/evaluate.pyx"
;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  void *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyArrayObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  long __pyx_t_10;
  long __pyx_t_11;
  long __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannySetupContext("evaluate_regression", 0);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_output.pybuffer.buf = NULL;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_output.refcount = 0;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_output.data = NULL;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_output.rcbuffer = &__pyx_pybuffer_output;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_events.pybuffer.buf = NULL;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffer_events.refcount = 0;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_events.data = NULL;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_events.rcbuffer = &__pyx_pybuffer_events;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  {

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_events.rcbuffer->pybuffer, (PyObject*)__pyx_v_events, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  }

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_pybuffernd_events.diminfo[0].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_events.diminfo[0].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_events.diminfo[1].strides = __pyx_pybuffernd_events.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_events.diminfo[1].shape = __pyx_pybuffernd_events.rcbuffer->pybuffer.shape[1];

  /* "root_numpy/tmva/src/evaluate.pyx":45
 * @cython.wraparound(False)
 * def evaluate_regression(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_targets):
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)             # <<<<<<<<<<<<<<
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]
 */

#line 45 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_1 = PyCObject_AsVoidPtr(__pyx_v_method); if (unlikely(__pyx_t_1 == NULL && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 45 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v__method = ((TMVA::MethodBase *)__pyx_t_1);

  /* "root_numpy/tmva/src/evaluate.pyx":46
 * def evaluate_regression(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_targets):
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]             # <<<<<<<<<<<<<<
 *     cdef long n_features = events.shape[1]
 *     cdef long i, j
 */

#line 46 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_size = (__pyx_v_events->dimensions[0]);

  /* "root_numpy/tmva/src/evaluate.pyx":47
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 *     cdef long n_features = events.shape[1]             # <<<<<<<<<<<<<<
 *     cdef long i, j
 *     cdef vector[float] features
 */

#line 47 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_n_features = (__pyx_v_events->dimensions[1]);

  /* "root_numpy/tmva/src/evaluate.pyx":50
 *     cdef long i, j
 *     cdef vector[float] features
 *     cdef Event* event = new Event(features, 0)             # <<<<<<<<<<<<<<
 *     _method.fTmpEvent = event
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_targets), dtype=np.float32)
 */

#line 50 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_event = new TMVA::Event(__pyx_v_features, 0);

  /* "root_numpy/tmva/src/evaluate.pyx":51
 *     cdef vector[float] features
 *     cdef Event* event = new Event(features, 0)
 *     _method.fTmpEvent = event             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_targets), dtype=np.float32)
 *     for i from 0 <= i < size:
 */

#line 51 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v__method->fTmpEvent = __pyx_v_event;

  /* "root_numpy/tmva/src/evaluate.pyx":52
 *     cdef Event* event = new Event(features, 0)
 *     _method.fTmpEvent = event
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_targets), dtype=np.float32)             # <<<<<<<<<<<<<<
 *     for i from 0 <= i < size:
 *         for j from 0 <= j < n_features:
 */

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_3);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_PyInt_From_long(__pyx_v_size); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_4 = __Pyx_PyInt_From_unsigned_int(__pyx_v_n_targets); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_2);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_4);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_4 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_4);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_t_5);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_5 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_5);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_2);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_float32); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_6) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_6);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_7 = ((PyArrayObject *)__pyx_t_6);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  {

#line 52 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_BufFmt_StackElem __pyx_stack[1];

#line 52 "root_numpy/tmva/src/evaluate.pyx"
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_output.rcbuffer->pybuffer, (PyObject*)__pyx_t_7, &__Pyx_TypeInfo_nn___pyx_t_5numpy_float32_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {

#line 52 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_v_output = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_output.rcbuffer->pybuffer.buf = NULL;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {
#line 52 "root_numpy/tmva/src/evaluate.pyx"
__pyx_pybuffernd_output.diminfo[0].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_output.diminfo[0].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_output.diminfo[1].strides = __pyx_pybuffernd_output.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_output.diminfo[1].shape = __pyx_pybuffernd_output.rcbuffer->pybuffer.shape[1];

#line 52 "root_numpy/tmva/src/evaluate.pyx"
    }

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  }

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_7 = 0;

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v_output = ((PyArrayObject *)__pyx_t_6);

#line 52 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_6 = 0;

  /* "root_numpy/tmva/src/evaluate.pyx":53
 *     _method.fTmpEvent = event
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_targets), dtype=np.float32)
 *     for i from 0 <= i < size:             # <<<<<<<<<<<<<<
 *         for j from 0 <= j < n_features:
 *             event.SetVal(j, events[i, j])
 */

#line 53 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_8 = __pyx_v_size;

#line 53 "root_numpy/tmva/src/evaluate.pyx"
  for (__pyx_v_i = 0; __pyx_v_i < __pyx_t_8; __pyx_v_i++) {

    /* "root_numpy/tmva/src/evaluate.pyx":54
 *     cdef np.ndarray[np.float32_t, ndim=2] output = np.empty((size, n_targets), dtype=np.float32)
 *     for i from 0 <= i < size:
 *         for j from 0 <= j < n_features:             # <<<<<<<<<<<<<<
 *             event.SetVal(j, events[i, j])
 *         memcpy(&output[i, 0], &(_method.GetRegressionValues()[0]), sizeof(np.float32_t) * n_targets)
 */

#line 54 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_n_features;

#line 54 "root_numpy/tmva/src/evaluate.pyx"
    for (__pyx_v_j = 0; __pyx_v_j < __pyx_t_9; __pyx_v_j++) {

      /* "root_numpy/tmva/src/evaluate.pyx":55
 *     for i from 0 <= i < size:
 *         for j from 0 <= j < n_features:
 *             event.SetVal(j, events[i, j])             # <<<<<<<<<<<<<<
 *         memcpy(&output[i, 0], &(_method.GetRegressionValues()[0]), sizeof(np.float32_t) * n_targets)
 *     _method.fTmpEvent = NULL
 */

#line 55 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_t_10 = __pyx_v_i;

#line 55 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_t_11 = __pyx_v_j;

#line 55 "root_numpy/tmva/src/evaluate.pyx"
      __pyx_v_event->SetVal(__pyx_v_j, (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_events.rcbuffer->pybuffer.buf, __pyx_t_10, __pyx_pybuffernd_events.diminfo[0].strides, __pyx_t_11, __pyx_pybuffernd_events.diminfo[1].strides)));

#line 55 "root_numpy/tmva/src/evaluate.pyx"
    }

    /* "root_numpy/tmva/src/evaluate.pyx":56
 *         for j from 0 <= j < n_features:
 *             event.SetVal(j, events[i, j])
 *         memcpy(&output[i, 0], &(_method.GetRegressionValues()[0]), sizeof(np.float32_t) * n_targets)             # <<<<<<<<<<<<<<
 *     _method.fTmpEvent = NULL
 *     del event
 */

#line 56 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_t_9 = __pyx_v_i;

#line 56 "root_numpy/tmva/src/evaluate.pyx"
    __pyx_t_12 = 0;

#line 56 "root_numpy/tmva/src/evaluate.pyx"
    memcpy((&(*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_float32_t *, __pyx_pybuffernd_output.rcbuffer->pybuffer.buf, __pyx_t_9, __pyx_pybuffernd_output.diminfo[0].strides, __pyx_t_12, __pyx_pybuffernd_output.diminfo[1].strides))), (&(__pyx_v__method->GetRegressionValues()[0])), ((sizeof(__pyx_t_5numpy_float32_t)) * __pyx_v_n_targets));

#line 56 "root_numpy/tmva/src/evaluate.pyx"
  }

  /* "root_numpy/tmva/src/evaluate.pyx":57
 *             event.SetVal(j, events[i, j])
 *         memcpy(&output[i, 0], &(_method.GetRegressionValues()[0]), sizeof(np.float32_t) * n_targets)
 *     _method.fTmpEvent = NULL             # <<<<<<<<<<<<<<
 *     del event
 *     return output
 */

#line 57 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_v__method->fTmpEvent = NULL;

  /* "root_numpy/tmva/src/evaluate.pyx":58
 *         memcpy(&output[i, 0], &(_method.GetRegressionValues()[0]), sizeof(np.float32_t) * n_targets)
 *     _method.fTmpEvent = NULL
 *     del event             # <<<<<<<<<<<<<<
 *     return output
 */

#line 58 "root_numpy/tmva/src/evaluate.pyx"
  delete __pyx_v_event;

  /* "root_numpy/tmva/src/evaluate.pyx":59
 *     _method.fTmpEvent = NULL
 *     del event
 *     return output             # <<<<<<<<<<<<<<
 */

#line 59 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_r);

#line 59 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_INCREF(((PyObject *)__pyx_v_output));

#line 59 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_r = ((PyObject *)__pyx_v_output);

#line 59 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L0;

  /* "root_numpy/tmva/src/evaluate.pyx":44
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_regression(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_targets):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 44 "root_numpy/tmva/src/evaluate.pyx"


#line 44 "root_numpy/tmva/src/evaluate.pyx"
  /* function exit code */

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L1_error:;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_2);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_3);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_4);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_5);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF(__pyx_t_6);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_AddTraceback("_libtmvanumpy.evaluate_regression", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_r = NULL;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  goto __pyx_L2;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L0:;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_events.rcbuffer->pybuffer);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_output.rcbuffer->pybuffer);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L2:;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XDECREF((PyObject *)__pyx_v_output);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_XGIVEREF(__pyx_r);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  return __pyx_r;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
}

/* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 91 "array.pxd"


#line 91 "array.pxd"
/* Python wrapper */

#line 91 "array.pxd"
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 91 "array.pxd"
static CYTHON_UNUSED int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 91 "array.pxd"
  int __pyx_r;

#line 91 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 91 "array.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 91 "array.pxd"
__pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 91 "array.pxd"


#line 91 "array.pxd"
  /* function exit code */

#line 91 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 91 "array.pxd"
  return __pyx_r;

#line 91 "array.pxd"
}

#line 91 "array.pxd"


#line 91 "array.pxd"
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL
#line 91 "array.pxd"
;

#line 91 "array.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 91 "array.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 91 "array.pxd"
  if (__pyx_v_info != NULL) {

#line 91 "array.pxd"
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 91 "array.pxd"
    __Pyx_GIVEREF(__pyx_v_info->obj);

#line 91 "array.pxd"
  }

  /* "array.pxd":96
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
 */

#line 96 "array.pxd"
  __pyx_t_1 = PyInt_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 96 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 96 "array.pxd"
  __pyx_v_item_count = __pyx_t_1;

#line 96 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":98
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 */

#line 98 "array.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":99
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
 */

#line 99 "array.pxd"
  __pyx_t_2 = __pyx_v_self->data.as_chars;

#line 99 "array.pxd"
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":100
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 */

#line 100 "array.pxd"
  __pyx_v_info->readonly = 0;

  /* "array.pxd":101
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
 */

#line 101 "array.pxd"
  __pyx_v_info->ndim = 1;

  /* "array.pxd":102
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
 */

#line 102 "array.pxd"
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;

#line 102 "array.pxd"
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":103
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 */

#line 103 "array.pxd"
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 103 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 103 "array.pxd"
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 103 "array.pxd"
  __Pyx_GOTREF(__pyx_t_4);

#line 103 "array.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

#line 103 "array.pxd"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 103 "array.pxd"
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 103 "array.pxd"
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":105
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
 */

#line 105 "array.pxd"
  __pyx_v_info->shape = ((Py_ssize_t *)PyMem_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":106
 * 
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 */

#line 106 "array.pxd"
  __pyx_t_6 = ((!(__pyx_v_info->shape != 0)) != 0);

#line 106 "array.pxd"
  if (__pyx_t_6) {

    /* "array.pxd":107
 *             info.shape = <Py_ssize_t*> PyMem_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
 */

#line 107 "array.pxd"
    PyErr_NoMemory(); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 107 "array.pxd"
  }

  /* "array.pxd":108
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
 */

#line 108 "array.pxd"
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 108 "array.pxd"
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":109
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
 */

#line 109 "array.pxd"
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":111
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 */

#line 111 "array.pxd"
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":112
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
 */

#line 112 "array.pxd"
  __pyx_t_3 = __pyx_v_self->ob_descr->typecode;

#line 112 "array.pxd"
  (__pyx_v_info->format[0]) = __pyx_t_3;

  /* "array.pxd":113
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
 */

#line 113 "array.pxd"
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":114
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 */

#line 114 "array.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 114 "array.pxd"
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 114 "array.pxd"
  __Pyx_GOTREF(__pyx_v_info->obj);

#line 114 "array.pxd"
  __Pyx_DECREF(__pyx_v_info->obj);

#line 114 "array.pxd"
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":91
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 91 "array.pxd"


#line 91 "array.pxd"
  /* function exit code */

#line 91 "array.pxd"
  __pyx_r = 0;

#line 91 "array.pxd"
  goto __pyx_L0;

#line 91 "array.pxd"
  __pyx_L1_error:;

#line 91 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 91 "array.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 91 "array.pxd"
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 91 "array.pxd"
  __pyx_r = -1;

#line 91 "array.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

#line 91 "array.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 91 "array.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

#line 91 "array.pxd"
  }

#line 91 "array.pxd"
  goto __pyx_L2;

#line 91 "array.pxd"
  __pyx_L0:;

#line 91 "array.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

#line 91 "array.pxd"
    __Pyx_GOTREF(Py_None);

#line 91 "array.pxd"
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

#line 91 "array.pxd"
  }

#line 91 "array.pxd"
  __pyx_L2:;

#line 91 "array.pxd"
  __Pyx_XDECREF(__pyx_v_item_count);

#line 91 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 91 "array.pxd"
  return __pyx_r;

#line 91 "array.pxd"
}

/* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyMem_Free(info.shape)
 * 
 */

#line 116 "array.pxd"


#line 116 "array.pxd"
/* Python wrapper */

#line 116 "array.pxd"
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 116 "array.pxd"
static CYTHON_UNUSED void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 116 "array.pxd"
  __Pyx_RefNannyDeclarations

#line 116 "array.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 116 "array.pxd"
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 116 "array.pxd"


#line 116 "array.pxd"
  /* function exit code */

#line 116 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 116 "array.pxd"
}

#line 116 "array.pxd"


#line 116 "array.pxd"
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations

#line 116 "array.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "array.pxd":117
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyMem_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
 */

#line 117 "array.pxd"
  PyMem_Free(__pyx_v_info->shape);

  /* "array.pxd":116
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyMem_Free(info.shape)
 * 
 */

#line 116 "array.pxd"


#line 116 "array.pxd"
  /* function exit code */

#line 116 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 116 "array.pxd"
}

/* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

#line 128 "array.pxd"


#line 128 "array.pxd"
static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = NULL
#line 128 "array.pxd"
;

#line 128 "array.pxd"
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 128 "array.pxd"
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":132
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 */

#line 132 "array.pxd"
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 132 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 132 "array.pxd"
  __pyx_v_op = ((arrayobject *)__pyx_t_1);

#line 132 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":133
 *     if zero is true, new array will be initialized with zeroes."""
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
 */

#line 133 "array.pxd"
  __pyx_t_3 = (__pyx_v_zero != 0);

#line 133 "array.pxd"
  if (__pyx_t_3) {

#line 133 "array.pxd"
  } else {

#line 133 "array.pxd"
    __pyx_t_2 = __pyx_t_3;

#line 133 "array.pxd"
    goto __pyx_L4_bool_binop_done;

#line 133 "array.pxd"
  }

#line 133 "array.pxd"
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);

#line 133 "array.pxd"
  __pyx_t_4 = (__pyx_t_3 != 0);

#line 133 "array.pxd"
  __pyx_t_2 = __pyx_t_4;

#line 133 "array.pxd"
  __pyx_L4_bool_binop_done:;

#line 133 "array.pxd"
  if (__pyx_t_2) {

    /* "array.pxd":134
 *     op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */

#line 134 "array.pxd"
    memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize));

#line 134 "array.pxd"
    goto __pyx_L3;

#line 134 "array.pxd"
  }

#line 134 "array.pxd"
  __pyx_L3:;

  /* "array.pxd":135
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
 */

#line 135 "array.pxd"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 135 "array.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_op));

#line 135 "array.pxd"
  __pyx_r = __pyx_v_op;

#line 135 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":128
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
 */

#line 128 "array.pxd"


#line 128 "array.pxd"
  /* function exit code */

#line 128 "array.pxd"
  __pyx_L1_error:;

#line 128 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 128 "array.pxd"
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 128 "array.pxd"
  __pyx_r = 0;

#line 128 "array.pxd"
  __pyx_L0:;

#line 128 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_op);

#line 128 "array.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 128 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 128 "array.pxd"
  return __pyx_r;

#line 128 "array.pxd"
}

/* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

#line 137 "array.pxd"


#line 137 "array.pxd"
static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = NULL
#line 137 "array.pxd"
;

#line 137 "array.pxd"
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 137 "array.pxd"
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":139
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
 */

#line 139 "array.pxd"
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 139 "array.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 139 "array.pxd"
  __pyx_v_op = ((arrayobject *)__pyx_t_1);

#line 139 "array.pxd"
  __pyx_t_1 = 0;

  /* "array.pxd":140
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
 */

#line 140 "array.pxd"
  memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize));

  /* "array.pxd":141
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
 */

#line 141 "array.pxd"
  __Pyx_XDECREF(((PyObject *)__pyx_r));

#line 141 "array.pxd"
  __Pyx_INCREF(((PyObject *)__pyx_v_op));

#line 141 "array.pxd"
  __pyx_r = __pyx_v_op;

#line 141 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":137
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 */

#line 137 "array.pxd"


#line 137 "array.pxd"
  /* function exit code */

#line 137 "array.pxd"
  __pyx_L1_error:;

#line 137 "array.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 137 "array.pxd"
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 137 "array.pxd"
  __pyx_r = 0;

#line 137 "array.pxd"
  __pyx_L0:;

#line 137 "array.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_op);

#line 137 "array.pxd"
  __Pyx_XGIVEREF((PyObject *)__pyx_r);

#line 137 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 137 "array.pxd"
  return __pyx_r;

#line 137 "array.pxd"
}

/* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

#line 143 "array.pxd"


#line 143 "array.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize
#line 143 "array.pxd"
;
  Py_ssize_t __pyx_v_origsize
#line 143 "array.pxd"
;

#line 143 "array.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 143 "array.pxd"
  __Pyx_RefNannySetupContext("extend_buffer", 0);

  /* "array.pxd":147
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 */

#line 147 "array.pxd"
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;

#line 147 "array.pxd"
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":148
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 */

#line 148 "array.pxd"
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":149
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
 */

#line 149 "array.pxd"
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "array.pxd":150
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */

#line 150 "array.pxd"
  memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize));

  /* "array.pxd":151
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
 */

#line 151 "array.pxd"
  __pyx_r = 0;

#line 151 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":143
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficent appending of new stuff of same type
 *     (e.g. of same array type)
 */

#line 143 "array.pxd"


#line 143 "array.pxd"
  /* function exit code */

#line 143 "array.pxd"
  __pyx_L1_error:;

#line 143 "array.pxd"
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 143 "array.pxd"
  __pyx_r = -1;

#line 143 "array.pxd"
  __pyx_L0:;

#line 143 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 143 "array.pxd"
  return __pyx_r;

#line 143 "array.pxd"
}

/* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

#line 153 "array.pxd"


#line 153 "array.pxd"
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {

#line 153 "array.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 153 "array.pxd"
  __Pyx_RefNannySetupContext("extend", 0);

  /* "array.pxd":155
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 */

#line 155 "array.pxd"
  __pyx_t_1 = ((__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode) != 0);

#line 155 "array.pxd"
  if (__pyx_t_1) {

    /* "array.pxd":156
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 */

#line 156 "array.pxd"
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 156 "array.pxd"
    goto __pyx_L3;

#line 156 "array.pxd"
  }

#line 156 "array.pxd"
  __pyx_L3:;

  /* "array.pxd":157
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self):
 */

#line 157 "array.pxd"
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 157 "array.pxd"
  __pyx_r = __pyx_t_2;

#line 157 "array.pxd"
  goto __pyx_L0;

  /* "array.pxd":153
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 */

#line 153 "array.pxd"


#line 153 "array.pxd"
  /* function exit code */

#line 153 "array.pxd"
  __pyx_L1_error:;

#line 153 "array.pxd"
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 153 "array.pxd"
  __pyx_r = -1;

#line 153 "array.pxd"
  __pyx_L0:;

#line 153 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 153 "array.pxd"
  return __pyx_r;

#line 153 "array.pxd"
}

/* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

#line 159 "array.pxd"


#line 159 "array.pxd"
static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations

#line 159 "array.pxd"
  __Pyx_RefNannySetupContext("zero", 0);

  /* "array.pxd":161
 * cdef inline void zero(array self):
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 */

#line 161 "array.pxd"
  memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize));

  /* "array.pxd":159
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self):             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
 */

#line 159 "array.pxd"


#line 159 "array.pxd"
  /* function exit code */

#line 159 "array.pxd"
  __Pyx_RefNannyFinishContext();

#line 159 "array.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
/* Python wrapper */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = 
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
__pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_i
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_ndim
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_endian_detector
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_little_endian
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_t
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  char *__pyx_v_f
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyArray_Descr *__pyx_v_descr = 0
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_offset
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_hasfields
#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__getbuffer__", 0);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL) {

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(__pyx_v_info->obj);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = 0;

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 200 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */

#line 203 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_endian_detector = 1;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */

#line 204 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 206 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */

#line 208 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);

#line 208 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */

#line 209 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_copy_shape = 1;

#line 209 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L4;

#line 209 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 209 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_copy_shape = 0;

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 211 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L4:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L6_bool_binop_done;

#line 213 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L6_bool_binop_done:;

#line 214 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L9_bool_binop_done;

#line 217 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L9_bool_binop_done:;

#line 218 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */

#line 221 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */

#line 222 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */

#line 223 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (__pyx_v_copy_shape != 0);

#line 223 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */

#line 226 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */

#line 227 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */

#line 228 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __pyx_v_ndim;

#line 228 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {

#line 228 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_i = __pyx_t_5;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */

#line 229 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L11;

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 230 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */

#line 232 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */

#line 233 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));

#line 233 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 233 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L11:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */

#line 234 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->suboffsets = NULL;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */

#line 235 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */

#line 236 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */

#line 239 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_f = NULL;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */

#line 240 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_3 = ((PyObject *)__pyx_v_self->descr);

#line 240 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_INCREF(__pyx_t_3);

#line 240 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_3);

#line 240 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_3 = 0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */

#line 244 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  } else {

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L15_bool_binop_done;

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = ((!(__pyx_v_copy_shape != 0)) != 0);

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_t_2;

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L15_bool_binop_done:;

#line 246 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(Py_None);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(Py_None);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = Py_None;

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L14;

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 248 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_self));

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj);

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 251 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L14:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);

#line 253 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */

#line 254 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __pyx_v_descr->type_num;

#line 254 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_t = __pyx_t_4;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '>') != 0);

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_2) {

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L20_next_or;

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = (__pyx_v_little_endian != 0);

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_2) {

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L19_bool_binop_done;

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 255 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L20_next_or:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((__pyx_v_descr->byteorder == '<') != 0);

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_2) {

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_1 = __pyx_t_2;

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L19_bool_binop_done;

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_2 = ((!(__pyx_v_little_endian != 0)) != 0);

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_1 = __pyx_t_2;

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L19_bool_binop_done:;

#line 256 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_1) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    switch (__pyx_v_t) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_BYTE:

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_b;

#line 258 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_UBYTE:

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_B;

#line 259 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_SHORT:

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_h;

#line 260 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */

#line 261 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_USHORT:

#line 261 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_H;

#line 261 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */

#line 262 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_INT:

#line 262 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_i;

#line 262 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */

#line 263 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_UINT:

#line 263 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_I;

#line 263 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */

#line 264 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONG:

#line 264 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_l;

#line 264 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */

#line 265 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_ULONG:

#line 265 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_L;

#line 265 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */

#line 266 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONGLONG:

#line 266 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_q;

#line 266 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */

#line 267 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_ULONGLONG:

#line 267 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_Q;

#line 267 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */

#line 268 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_FLOAT:

#line 268 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_f;

#line 268 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */

#line 269 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_DOUBLE:

#line 269 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_d;

#line 269 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */

#line 270 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_LONGDOUBLE:

#line 270 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_g;

#line 270 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */

#line 271 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CFLOAT:

#line 271 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_Zf;

#line 271 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */

#line 272 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CDOUBLE:

#line 272 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_Zd;

#line 272 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */

#line 273 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_CLONGDOUBLE:

#line 273 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_Zg;

#line 273 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      case NPY_OBJECT:

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_k_O;

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

#line 274 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      default:

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GIVEREF(__pyx_t_6);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = 0;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_6);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      break;

#line 276 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */

#line 277 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->format = __pyx_v_f;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = 0;

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 278 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */

#line 280 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_info->format = ((char *)malloc(255));

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */

#line 281 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_info->format[0]) = '^';

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */

#line 282 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_offset = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */

#line 283 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 283 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_f = __pyx_t_7;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */

#line 286 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_f[0]) = '\x00';

#line 286 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_6);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = -1;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_v_info->obj);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L2;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(Py_None);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L2:;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 194 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
/* Python wrapper */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyDeclarations

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */

#line 289 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);

#line 289 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    free(__pyx_v_info->format);

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L3;

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 290 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L3:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */

#line 291 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);

#line 291 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */

#line 292 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    free(__pyx_v_info->strides);

#line 292 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L4;

#line 292 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 292 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L4:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 288 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 769 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 768 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 772 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 771 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 775 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 774 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 778 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 777 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_r);

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_t_1);

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_t_1;

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = 0;

#line 781 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = 0;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 780 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_endian_detector
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  int __pyx_v_little_endian
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_fields = 0
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_childname = NULL
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_new_offset = NULL
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  PyObject *__pyx_v_t = NULL
#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  long __pyx_t_8;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */

#line 790 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_endian_detector = 1;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */

#line 791 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (unlikely(__pyx_v_descr->names == Py_None)) {

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  for (;;) {

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    #if CYTHON_COMPILING_IN_CPYTHON

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    #else

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    #endif

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));

#line 795 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (likely(__pyx_v_fields != Py_None)) {

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      PyObject* sequence = __pyx_v_fields;

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      Py_ssize_t size = Py_SIZE(sequence);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #else

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      Py_ssize_t size = PySequence_Size(sequence);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #endif

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (unlikely(size != 2)) {

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #if CYTHON_COMPILING_IN_CPYTHON

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_INCREF(__pyx_t_3);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_INCREF(__pyx_t_4);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #else

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      #endif

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = 0;

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);

#line 796 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = 0;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_4);

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_GOTREF(__pyx_t_3);

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);

#line 798 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((__pyx_v_child->byteorder == '>') != 0);

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_7) {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L8_next_or;

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = (__pyx_v_little_endian != 0);

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (!__pyx_t_7) {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __pyx_t_7;

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L7_bool_binop_done;

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 801 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L8_next_or:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((__pyx_v_child->byteorder == '<') != 0);

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_7) {

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    } else {

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __pyx_t_7;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L7_bool_binop_done;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_7 = ((!(__pyx_v_little_endian != 0)) != 0);

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = __pyx_t_7;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L7_bool_binop_done:;

#line 802 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    while (1) {

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 813 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (!__pyx_t_6) break;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */

#line 814 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_f[0]) = 120;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */

#line 815 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */

#line 816 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_8 = 0;

#line 816 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + 1);

#line 816 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */

#line 818 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_8 = 0;

#line 818 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    (__pyx_v_offset[__pyx_t_8]) = ((__pyx_v_offset[__pyx_t_8]) + __pyx_v_child->elsize);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */

#line 820 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);

#line 820 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    if (__pyx_t_6) {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);

#line 821 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = 0;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */

#line 822 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);

#line 822 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

        /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_4);

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 98;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 826 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 66;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 827 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 104;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 828 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 72;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 829 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 105;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 830 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 73;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 831 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 108;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 832 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 76;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 833 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 113;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 834 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 81;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 835 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 102;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 836 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 100;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 837 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 103;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 838 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 102;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 839 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 100;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 840 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_3);

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 90;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[1]) = 103;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_v_f = (__pyx_v_f + 1);

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 841 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_GOTREF(__pyx_t_4);

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      if (__pyx_t_6) {

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        (__pyx_v_f[0]) = 79;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        goto __pyx_L15;

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 842 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      /*else*/ {

        /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_4);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GIVEREF(__pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = 0;

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_GOTREF(__pyx_t_3);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
        {__pyx_filename = __pyx_f[3]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      }

#line 844 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_L15:;

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */

#line 845 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = (__pyx_v_f + 1);

#line 845 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      goto __pyx_L13;

#line 845 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 845 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    /*else*/ {

      /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
      __pyx_v_f = __pyx_t_9;

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    }

#line 849 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_L13:;

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 794 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 850 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = __pyx_v_f;

#line 850 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  goto __pyx_L0;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L1_error:;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_1);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_3);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_t_4);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_r = NULL;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF((PyObject *)__pyx_v_child);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_fields);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_childname);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_new_offset);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XDECREF(__pyx_v_t);

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 783 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr
#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = (__pyx_v_base == Py_None);

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_2 = (__pyx_t_1 != 0);

#line 968 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_2) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */

#line 969 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_baseptr = NULL;

#line 969 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L3;

#line 969 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 969 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */

#line 971 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    Py_INCREF(__pyx_v_base);

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */

#line 972 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);

#line 972 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 972 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L3:;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */

#line 973 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  Py_XDECREF(__pyx_v_arr->base);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */

#line 974 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 966 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */

#line 977 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);

#line 977 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  if (__pyx_t_1) {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(Py_None);

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = Py_None;

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

#line 978 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /*else*/ {

    /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_XDECREF(__pyx_r);

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    __pyx_r = ((PyObject *)__pyx_v_arr->base);

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
    goto __pyx_L0;

#line 980 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  }

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"


#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  /* function exit code */

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_L0:;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_XGIVEREF(__pyx_r);

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_RefNannyFinishContext();

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  return __pyx_r;

#line 976 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__string")
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
static std::string __pyx_convert_string_from_py_std__string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length
#line 13 "string.from_py"
;
  char *__pyx_v_data
#line 13 "string.from_py"
;

#line 13 "string.from_py"
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

#line 13 "string.from_py"
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */

#line 15 "string.from_py"
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 15 "string.from_py"
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */

#line 16 "string.from_py"
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);

#line 16 "string.from_py"
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__string")
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
  /* function exit code */

#line 13 "string.from_py"
  __pyx_L1_error:;

#line 13 "string.from_py"
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__string", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 13 "string.from_py"
  __pyx_L0:;

#line 13 "string.from_py"
  __Pyx_RefNannyFinishContext();

#line 13 "string.from_py"
  return __pyx_r;

#line 13 "string.from_py"
}

#line 13 "string.from_py"


#line 13 "string.from_py"
static PyMethodDef __pyx_methods[] = {

#line 13 "string.from_py"
  {0, 0, 0, 0}

#line 13 "string.from_py"
};

#line 13 "string.from_py"


#line 13 "string.from_py"
#if PY_MAJOR_VERSION >= 3

#line 13 "string.from_py"
static struct PyModuleDef __pyx_moduledef = {

#line 13 "string.from_py"
  #if PY_VERSION_HEX < 0x03020000

#line 13 "string.from_py"
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },

#line 13 "string.from_py"
  #else

#line 13 "string.from_py"
    PyModuleDef_HEAD_INIT,

#line 13 "string.from_py"
  #endif

#line 13 "string.from_py"
    "_libtmvanumpy",

#line 13 "string.from_py"
    0, /* m_doc */

#line 13 "string.from_py"
    -1, /* m_size */

#line 13 "string.from_py"
    __pyx_methods /* m_methods */,

#line 13 "string.from_py"
    NULL, /* m_reload */

#line 13 "string.from_py"
    NULL, /* m_traverse */

#line 13 "string.from_py"
    NULL, /* m_clear */

#line 13 "string.from_py"
    NULL /* m_free */

#line 13 "string.from_py"
};

#line 13 "string.from_py"
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_b_Background, __pyx_k_Background, sizeof(__pyx_k_Background), 0, 0, 0, 1},
  {&__pyx_kp_s_Class__0_d, __pyx_k_Class__0_d, sizeof(__pyx_k_Class__0_d), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_b_Regression, __pyx_k_Regression, sizeof(__pyx_k_Regression), 0, 0, 0, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_b_Signal, __pyx_k_Signal, sizeof(__pyx_k_Signal), 0, 0, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_multiclass, __pyx_k_evaluate_multiclass, sizeof(__pyx_k_evaluate_multiclass), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_regression, __pyx_k_evaluate_regression, sizeof(__pyx_k_evaluate_regression), 0, 0, 1, 1},
  {&__pyx_n_s_evaluate_twoclass, __pyx_k_evaluate_twoclass, sizeof(__pyx_k_evaluate_twoclass), 0, 0, 1, 1},
  {&__pyx_n_s_event, __pyx_k_event, sizeof(__pyx_k_event), 0, 0, 1, 1},
  {&__pyx_n_s_events, __pyx_k_events, sizeof(__pyx_k_events), 0, 0, 1, 1},
  {&__pyx_n_s_factory, __pyx_k_factory, sizeof(__pyx_k_factory), 0, 0, 1, 1},
  {&__pyx_n_s_factory_2, __pyx_k_factory_2, sizeof(__pyx_k_factory_2), 0, 0, 1, 1},
  {&__pyx_n_s_factory_add_events_multiclass, __pyx_k_factory_add_events_multiclass, sizeof(__pyx_k_factory_add_events_multiclass), 0, 0, 1, 1},
  {&__pyx_n_s_factory_add_events_regression, __pyx_k_factory_add_events_regression, sizeof(__pyx_k_factory_add_events_regression), 0, 0, 1, 1},
  {&__pyx_n_s_factory_add_events_twoclass, __pyx_k_factory_add_events_twoclass, sizeof(__pyx_k_factory_add_events_twoclass), 0, 0, 1, 1},
  {&__pyx_n_s_features, __pyx_k_features, sizeof(__pyx_k_features), 0, 0, 1, 1},
  {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_kp_s_home_endw_workspace_root_numpy, __pyx_k_home_endw_workspace_root_numpy, sizeof(__pyx_k_home_endw_workspace_root_numpy), 0, 0, 1, 0},
  {&__pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_k_home_endw_workspace_root_numpy_2, sizeof(__pyx_k_home_endw_workspace_root_numpy_2), 0, 0, 1, 0},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_labels, __pyx_k_labels, sizeof(__pyx_k_labels), 0, 0, 1, 1},
  {&__pyx_n_s_libtmvanumpy, __pyx_k_libtmvanumpy, sizeof(__pyx_k_libtmvanumpy), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_method, __pyx_k_method, sizeof(__pyx_k_method), 0, 0, 1, 1},
  {&__pyx_n_s_method_2, __pyx_k_method_2, sizeof(__pyx_k_method_2), 0, 0, 1, 1},
  {&__pyx_n_s_n_classes, __pyx_k_n_classes, sizeof(__pyx_k_n_classes), 0, 0, 1, 1},
  {&__pyx_n_s_n_features, __pyx_k_n_features, sizeof(__pyx_k_n_features), 0, 0, 1, 1},
  {&__pyx_n_s_n_targets, __pyx_k_n_targets, sizeof(__pyx_k_n_targets), 0, 0, 1, 1},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_output, __pyx_k_output, sizeof(__pyx_k_output), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_signal_label, __pyx_k_signal_label, sizeof(__pyx_k_signal_label), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_target, __pyx_k_target, sizeof(__pyx_k_target), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_test_2, __pyx_k_test_2, sizeof(__pyx_k_test_2), 0, 0, 1, 1},
  {&__pyx_n_s_treetype, __pyx_k_treetype, sizeof(__pyx_k_treetype), 0, 0, 1, 1},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_weight, __pyx_k_weight, sizeof(__pyx_k_weight), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple_);

#line 215 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__2);

#line 219 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__3);

#line 257 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__4);

#line 799 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__5);

#line 803 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__6)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GOTREF(__pyx_tuple__6);

#line 823 "../../.local/lib/python2.7/site-packages/Cython/Includes/numpy/__init__.pxd"
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "root_numpy/tmva/src/factory.pyx":4
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_twoclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_tuple__7 = PyTuple_Pack(15, __pyx_n_s_factory, __pyx_n_s_events, __pyx_n_s_labels, __pyx_n_s_signal_label, __pyx_n_s_weights, __pyx_n_s_test, __pyx_n_s_factory_2, __pyx_n_s_size, __pyx_n_s_n_features, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_weight, __pyx_n_s_label, __pyx_n_s_event, __pyx_n_s_treetype); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_GOTREF(__pyx_tuple__7);

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_GIVEREF(__pyx_tuple__7);

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(6, 0, 15, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__7, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_factory_add_events_twoclass, 4, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/tmva/src/factory.pyx":36
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_multiclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_tuple__9 = PyTuple_Pack(14, __pyx_n_s_factory, __pyx_n_s_events, __pyx_n_s_labels, __pyx_n_s_weights, __pyx_n_s_test, __pyx_n_s_factory_2, __pyx_n_s_size, __pyx_n_s_n_features, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_weight, __pyx_n_s_label, __pyx_n_s_event, __pyx_n_s_treetype); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_GOTREF(__pyx_tuple__9);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_GIVEREF(__pyx_tuple__9);

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_codeobj__10 = (PyObject*)__Pyx_PyCode_New(5, 0, 14, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__9, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_factory_add_events_multiclass, 36, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/tmva/src/factory.pyx":64
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_regression(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_tuple__11 = PyTuple_Pack(13, __pyx_n_s_factory, __pyx_n_s_events, __pyx_n_s_target, __pyx_n_s_weights, __pyx_n_s_test, __pyx_n_s_factory_2, __pyx_n_s_size, __pyx_n_s_n_features, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_weight, __pyx_n_s_event, __pyx_n_s_treetype); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_GOTREF(__pyx_tuple__11);

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_GIVEREF(__pyx_tuple__11);

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_codeobj__12 = (PyObject*)__Pyx_PyCode_New(5, 0, 13, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__11, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy, __pyx_n_s_factory_add_events_regression, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/tmva/src/evaluate.pyx":4
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_twoclass(method, np.ndarray[np.double_t, ndim=2] events):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_tuple__13 = PyTuple_Pack(10, __pyx_n_s_method, __pyx_n_s_events, __pyx_n_s_method_2, __pyx_n_s_size, __pyx_n_s_n_features, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_features, __pyx_n_s_event, __pyx_n_s_output); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__13);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__13);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_codeobj__14 = (PyObject*)__Pyx_PyCode_New(2, 0, 10, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__13, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_evaluate_twoclass, 4, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__14)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/tmva/src/evaluate.pyx":24
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_multiclass(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_classes):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_tuple__15 = PyTuple_Pack(11, __pyx_n_s_method, __pyx_n_s_events, __pyx_n_s_n_classes, __pyx_n_s_method_2, __pyx_n_s_size, __pyx_n_s_n_features, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_features, __pyx_n_s_event, __pyx_n_s_output); if (unlikely(!__pyx_tuple__15)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__15);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__15);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_codeobj__16 = (PyObject*)__Pyx_PyCode_New(3, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__15, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_evaluate_multiclass, 24, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__16)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "root_numpy/tmva/src/evaluate.pyx":44
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_regression(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_targets):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_tuple__17 = PyTuple_Pack(11, __pyx_n_s_method, __pyx_n_s_events, __pyx_n_s_n_targets, __pyx_n_s_method_2, __pyx_n_s_size, __pyx_n_s_n_features, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_features, __pyx_n_s_event, __pyx_n_s_output); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_tuple__17);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GIVEREF(__pyx_tuple__17);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_codeobj__18 = (PyObject*)__Pyx_PyCode_New(3, 0, 11, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__17, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_endw_workspace_root_numpy_2, __pyx_n_s_evaluate_regression, 44, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__18)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  return 0;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_L1_error:;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_RefNannyFinishContext();

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  return -1;

#line 44 "root_numpy/tmva/src/evaluate.pyx"
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC init_libtmvanumpy(void); /*proto*/
PyMODINIT_FUNC init_libtmvanumpy(void)
#else
PyMODINIT_FUNC PyInit__libtmvanumpy(void); /*proto*/
PyMODINIT_FUNC PyInit__libtmvanumpy(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit__libtmvanumpy(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("_libtmvanumpy", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main__libtmvanumpy) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "_libtmvanumpy")) {
      if (unlikely(PyDict_SetItemString(modules, "_libtmvanumpy", __pyx_m) < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "bool", sizeof(PyBoolObject), 0); if (unlikely(!__pyx_ptype_7cpython_4bool_bool)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "complex", sizeof(PyComplexObject), 0); if (unlikely(!__pyx_ptype_7cpython_7complex_complex)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_7cpython_5array_array = __Pyx_ImportType("array", "array", sizeof(arrayobject), 0); if (unlikely(!__pyx_ptype_7cpython_5array_array)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "root_numpy/tmva/src/setup.pxi":3
 * # cython: experimental_cpp_class_def=True, c_string_type=str, c_string_encoding=ascii
 * 
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * np.import_array()
 */

#line 3 "root_numpy/tmva/src/setup.pxi"
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3 "root_numpy/tmva/src/setup.pxi"
  __Pyx_GOTREF(__pyx_t_1);

#line 3 "root_numpy/tmva/src/setup.pxi"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 3 "root_numpy/tmva/src/setup.pxi"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/tmva/src/setup.pxi":5
 * import numpy as np
 * cimport numpy as np
 * np.import_array()             # <<<<<<<<<<<<<<
 * 
 * from cpython cimport array
 */

#line 5 "root_numpy/tmva/src/setup.pxi"
  import_array();

  /* "root_numpy/tmva/src/factory.pyx":4
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_twoclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 4 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_libtmvanumpy_1factory_add_events_twoclass, NULL, __pyx_n_s_libtmvanumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "root_numpy/tmva/src/factory.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_factory_add_events_twoclass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/factory.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/tmva/src/factory.pyx":36
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_multiclass(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 36 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_libtmvanumpy_3factory_add_events_multiclass, NULL, __pyx_n_s_libtmvanumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 36 "root_numpy/tmva/src/factory.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_factory_add_events_multiclass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 36 "root_numpy/tmva/src/factory.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/tmva/src/factory.pyx":64
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def factory_add_events_regression(             # <<<<<<<<<<<<<<
 *         factory,
 *         np.ndarray[np.double_t, ndim=2] events,
 */

#line 64 "root_numpy/tmva/src/factory.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_libtmvanumpy_5factory_add_events_regression, NULL, __pyx_n_s_libtmvanumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 64 "root_numpy/tmva/src/factory.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_factory_add_events_regression, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 64 "root_numpy/tmva/src/factory.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/tmva/src/evaluate.pyx":4
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_twoclass(method, np.ndarray[np.double_t, ndim=2] events):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_libtmvanumpy_7evaluate_twoclass, NULL, __pyx_n_s_libtmvanumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_twoclass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 4 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/tmva/src/evaluate.pyx":24
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_multiclass(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_classes):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_libtmvanumpy_9evaluate_multiclass, NULL, __pyx_n_s_libtmvanumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_multiclass, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 24 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "root_numpy/tmva/src/evaluate.pyx":44
 * @cython.boundscheck(False)
 * @cython.wraparound(False)
 * def evaluate_regression(method, np.ndarray[np.double_t, ndim=2] events, unsigned int n_targets):             # <<<<<<<<<<<<<<
 *     cdef MethodBase* _method = <MethodBase*> PyCObject_AsVoidPtr(method)
 *     cdef long size = events.shape[0]
 */

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_13_libtmvanumpy_11evaluate_regression, NULL, __pyx_n_s_libtmvanumpy); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_evaluate_regression, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 44 "root_numpy/tmva/src/evaluate.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "_libtmvanumpy.pyx":1
 * # cython: experimental_cpp_class_def=True, c_string_type=str, c_string_encoding=ascii             # <<<<<<<<<<<<<<
 * 
 * include "setup.pxi"
 */

#line 1 "_libtmvanumpy.pyx"
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "_libtmvanumpy.pyx"
  __Pyx_GOTREF(__pyx_t_1);

#line 1 "_libtmvanumpy.pyx"
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test_2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

#line 1 "_libtmvanumpy.pyx"
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__string")
 * cdef string __pyx_convert_string_from_py_std__string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

#line 13 "string.from_py"


#line 13 "string.from_py"
  /*--- Wrapped vars code ---*/

#line 13 "string.from_py"


#line 13 "string.from_py"
  goto __pyx_L0;

#line 13 "string.from_py"
  __pyx_L1_error:;

#line 13 "string.from_py"
  __Pyx_XDECREF(__pyx_t_1);

#line 13 "string.from_py"
  if (__pyx_m) {

#line 13 "string.from_py"
    if (__pyx_d) {

#line 13 "string.from_py"
      __Pyx_AddTraceback("init _libtmvanumpy", __pyx_clineno, __pyx_lineno, __pyx_filename);

#line 13 "string.from_py"
    }

#line 13 "string.from_py"
    Py_DECREF(__pyx_m); __pyx_m = 0;

#line 13 "string.from_py"
  } else if (!PyErr_Occurred()) {

#line 13 "string.from_py"
    PyErr_SetString(PyExc_ImportError, "init _libtmvanumpy");

#line 13 "string.from_py"
  }

#line 13 "string.from_py"
  __pyx_L0:;

#line 13 "string.from_py"
  __Pyx_RefNannyFinishContext();

#line 13 "string.from_py"
  #if PY_MAJOR_VERSION < 3

#line 13 "string.from_py"
  return;

#line 13 "string.from_py"
  #else

#line 13 "string.from_py"
  return __pyx_m;

#line 13 "string.from_py"
  #endif

#line 13 "string.from_py"
}

#line 1 "cython_utility"

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(tmp_type, tmp_value, tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) return __pyx_pw_7cpython_5array_5array_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
        if (PyObject_TypeCheck(obj, __pyx_ptype_7cpython_5array_array)) { __pyx_pw_7cpython_5array_5array_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif


        static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)       \
    {                                                                     \
        func_type value = func_value;                                     \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                if (is_unsigned && unlikely(value < zero))                \
                    goto raise_neg_overflow;                              \
                else                                                      \
                    goto raise_overflow;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(unsigned int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(unsigned int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(unsigned int,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(unsigned int, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(unsigned int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long, PyLong_AsLong(x))
            } else if (sizeof(unsigned int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(unsigned int, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            unsigned int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (unsigned int) -1;
        }
    } else {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
    const unsigned int neg_one = (unsigned int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +(((PyLongObject*)x)->ob_digit[0]));
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) ((PyLongObject*)x)->ob_digit[0]);
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
